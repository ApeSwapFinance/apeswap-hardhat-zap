/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={424:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>p});var a=n(81),i=n.n(a),s=n(645),r=n.n(s)()(i());r.push([e.id,"@import url(https://fonts.googleapis.com/css2?family=Source+Code+Pro:wght@400;500;600;700&display=swap);"]),r.push([e.id,"\nhtml,\nbody {\n  font-family: 'Source Code Pro', monospace;\n}\n",""]);const p=r},645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",a=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),a&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),a&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,a,i,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(a)for(var p=0;p<this.length;p++){var u=this[p][0];null!=u&&(r[u]=!0)}for(var o=0;o<e.length;o++){var d=[].concat(e[o]);a&&r[d[0]]||(void 0!==s&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=s),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),i&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=i):d[4]="".concat(i)),t.push(d))}},t}},81:e=>{"use strict";e.exports=function(e){return e[1]}},838:(e,t,n)=>{var a=n(424);a.__esModule&&(a=a.default),"string"==typeof a&&(a=[[e.id,a,""]]),a.locals&&(e.exports=a.locals),(0,n(346).Z)("20211576",a,!1,{})},346:(e,t,n)=>{"use strict";function a(e,t){for(var n=[],a={},i=0;i<t.length;i++){var s=t[i],r=s[0],p={id:e+":"+i,css:s[1],media:s[2],sourceMap:s[3]};a[r]?a[r].parts.push(p):n.push(a[r]={id:r,parts:[p]})}return n}n.d(t,{Z:()=>c});var i="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!i)throw new Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},r=i&&(document.head||document.getElementsByTagName("head")[0]),p=null,u=0,o=!1,d=function(){},y=null,l="data-vue-ssr-id",m="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function c(e,t,n,i){o=n,y=i||{};var r=a(e,t);return T(r),function(t){for(var n=[],i=0;i<r.length;i++){var p=r[i];(u=s[p.id]).refs--,n.push(u)}for(t?T(r=a(e,t)):r=[],i=0;i<n.length;i++){var u;if(0===(u=n[i]).refs){for(var o=0;o<u.parts.length;o++)u.parts[o]();delete s[u.id]}}}}function T(e){for(var t=0;t<e.length;t++){var n=e[t],a=s[n.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](n.parts[i]);for(;i<n.parts.length;i++)a.parts.push(h(n.parts[i]));a.parts.length>n.parts.length&&(a.parts.length=n.parts.length)}else{var r=[];for(i=0;i<n.parts.length;i++)r.push(h(n.parts[i]));s[n.id]={id:n.id,refs:1,parts:r}}}}function f(){var e=document.createElement("style");return e.type="text/css",r.appendChild(e),e}function h(e){var t,n,a=document.querySelector("style["+l+'~="'+e.id+'"]');if(a){if(o)return d;a.parentNode.removeChild(a)}if(m){var i=u++;a=p||(p=f()),t=b.bind(null,a,i,!1),n=b.bind(null,a,i,!0)}else a=f(),t=k.bind(null,a),n=function(){a.parentNode.removeChild(a)};return t(e),function(a){if(a){if(a.css===e.css&&a.media===e.media&&a.sourceMap===e.sourceMap)return;t(e=a)}else n()}}var v,w=(v=[],function(e,t){return v[e]=t,v.filter(Boolean).join("\n")});function b(e,t,n,a){var i=n?"":a.css;if(e.styleSheet)e.styleSheet.cssText=w(t,i);else{var s=document.createTextNode(i),r=e.childNodes;r[t]&&e.removeChild(r[t]),r.length?e.insertBefore(s,r[t]):e.appendChild(s)}}function k(e,t){var n=t.css,a=t.media,i=t.sourceMap;if(a&&e.setAttribute("media",a),y.ssrId&&e.setAttribute(l,t.id),i&&(n+="\n/*# sourceURL="+i.sources[0]+" */",n+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */"),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},t={};function n(a){var i=t[a];if(void 0!==i)return i.exports;var s=t[a]={id:a,exports:{}};return e[a](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var a in t)n.o(t,a)&&!n.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=Object.freeze({}),t=Array.isArray;function a(e){return null==e}function i(e){return null!=e}function s(e){return!0===e}function r(e){return"string"==typeof e||"number"==typeof e||"symbol"==typeof e||"boolean"==typeof e}function p(e){return"function"==typeof e}function u(e){return null!==e&&"object"==typeof e}var o=Object.prototype.toString;function d(e){return"[object Object]"===o.call(e)}function y(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function l(e){return i(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function m(e){return null==e?"":Array.isArray(e)||d(e)&&e.toString===o?JSON.stringify(e,null,2):String(e)}function c(e){var t=parseFloat(e);return isNaN(t)?e:t}function T(e,t){for(var n=Object.create(null),a=e.split(","),i=0;i<a.length;i++)n[a[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var f=T("slot,component",!0),h=T("key,ref,slot,slot-scope,is");function v(e,t){var n=e.length;if(n){if(t===e[n-1])return void(e.length=n-1);var a=e.indexOf(t);if(a>-1)return e.splice(a,1)}}var w=Object.prototype.hasOwnProperty;function b(e,t){return w.call(e,t)}function k(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var A=/-(\w)/g,g=k((function(e){return e.replace(A,(function(e,t){return t?t.toUpperCase():""}))})),P=k((function(e){return e.charAt(0).toUpperCase()+e.slice(1)})),M=/\B([A-Z])/g,I=k((function(e){return e.replace(M,"-$1").toLowerCase()})),S=Function.prototype.bind?function(e,t){return e.bind(t)}:function(e,t){function n(n){var a=arguments.length;return a?a>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n};function x(e,t){t=t||0;for(var n=e.length-t,a=new Array(n);n--;)a[n]=e[n+t];return a}function _(e,t){for(var n in t)e[n]=t[n];return e}function L(e){for(var t={},n=0;n<e.length;n++)e[n]&&_(t,e[n]);return t}function E(e,t,n){}var R=function(e,t,n){return!1},B=function(e){return e};function V(e,t){if(e===t)return!0;var n=u(e),a=u(t);if(!n||!a)return!n&&!a&&String(e)===String(t);try{var i=Array.isArray(e),s=Array.isArray(t);if(i&&s)return e.length===t.length&&e.every((function(e,n){return V(e,t[n])}));if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||s)return!1;var r=Object.keys(e),p=Object.keys(t);return r.length===p.length&&r.every((function(n){return V(e[n],t[n])}))}catch(e){return!1}}function C(e,t){for(var n=0;n<e.length;n++)if(V(e[n],t))return n;return-1}function Z(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}function O(e,t){return e===t?0===e&&1/e!=1/t:e==e||t==t}var q="data-server-rendered",F=["component","directive","filter"],N=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch","renderTracked","renderTriggered"],z={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:R,isReservedAttr:R,isUnknownElement:R,getTagNamespace:E,parsePlatformTagName:B,mustUseProp:R,async:!0,_lifecycleHooks:N},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function D(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function H(e,t,n,a){Object.defineProperty(e,t,{value:n,enumerable:!!a,writable:!0,configurable:!0})}var U=new RegExp("[^".concat($.source,".$_\\d]")),j="__proto__"in{},W="undefined"!=typeof window,G=W&&window.navigator.userAgent.toLowerCase(),K=G&&/msie|trident/.test(G),Y=G&&G.indexOf("msie 9.0")>0,J=G&&G.indexOf("edge/")>0;G&&G.indexOf("android");var X=G&&/iphone|ipad|ipod|ios/.test(G);G&&/chrome\/\d+/.test(G),G&&/phantomjs/.test(G);var Q,ee=G&&G.match(/firefox\/(\d+)/),te={}.watch,ne=!1;if(W)try{var ae={};Object.defineProperty(ae,"passive",{get:function(){ne=!0}}),window.addEventListener("test-passive",null,ae)}catch(e){}var ie=function(){return void 0===Q&&(Q=!W&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),Q},se=W&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function re(e){return"function"==typeof e&&/native code/.test(e.toString())}var pe,ue="undefined"!=typeof Symbol&&re(Symbol)&&"undefined"!=typeof Reflect&&re(Reflect.ownKeys);pe="undefined"!=typeof Set&&re(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var oe=null;function de(e){void 0===e&&(e=null),e||oe&&oe._scope.off(),oe=e,e&&e._scope.on()}var ye=function(){function e(e,t,n,a,i,s,r,p){this.tag=e,this.data=t,this.children=n,this.text=a,this.elm=i,this.ns=void 0,this.context=s,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=r,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=p,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1}return Object.defineProperty(e.prototype,"child",{get:function(){return this.componentInstance},enumerable:!1,configurable:!0}),e}(),le=function(e){void 0===e&&(e="");var t=new ye;return t.text=e,t.isComment=!0,t};function me(e){return new ye(void 0,void 0,void 0,String(e))}function ce(e){var t=new ye(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var Te=0,fe=[],he=function(){function e(){this._pending=!1,this.id=Te++,this.subs=[]}return e.prototype.addSub=function(e){this.subs.push(e)},e.prototype.removeSub=function(e){this.subs[this.subs.indexOf(e)]=null,this._pending||(this._pending=!0,fe.push(this))},e.prototype.depend=function(t){e.target&&e.target.addDep(this)},e.prototype.notify=function(e){for(var t=this.subs.filter((function(e){return e})),n=0,a=t.length;n<a;n++)t[n].update()},e}();he.target=null;var ve=[];function we(e){ve.push(e),he.target=e}function be(){ve.pop(),he.target=ve[ve.length-1]}var ke=Array.prototype,Ae=Object.create(ke);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(e){var t=ke[e];H(Ae,e,(function(){for(var n=[],a=0;a<arguments.length;a++)n[a]=arguments[a];var i,s=t.apply(this,n),r=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&r.observeArray(i),r.dep.notify(),s}))}));var ge=Object.getOwnPropertyNames(Ae),Pe={},Me=!0;function Ie(e){Me=e}var Se={notify:E,depend:E,addSub:E,removeSub:E},xe=function(){function e(e,n,a){if(void 0===n&&(n=!1),void 0===a&&(a=!1),this.value=e,this.shallow=n,this.mock=a,this.dep=a?Se:new he,this.vmCount=0,H(e,"__ob__",this),t(e)){if(!a)if(j)e.__proto__=Ae;else for(var i=0,s=ge.length;i<s;i++)H(e,p=ge[i],Ae[p]);n||this.observeArray(e)}else{var r=Object.keys(e);for(i=0;i<r.length;i++){var p;Le(e,p=r[i],Pe,void 0,n,a)}}}return e.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)_e(e[t],!1,this.mock)},e}();function _e(e,n,a){return e&&b(e,"__ob__")&&e.__ob__ instanceof xe?e.__ob__:!Me||!a&&ie()||!t(e)&&!d(e)||!Object.isExtensible(e)||e.__v_skip||Ze(e)||e instanceof ye?void 0:new xe(e,n,a)}function Le(e,n,a,i,s,r){var p=new he,u=Object.getOwnPropertyDescriptor(e,n);if(!u||!1!==u.configurable){var o=u&&u.get,d=u&&u.set;o&&!d||a!==Pe&&2!==arguments.length||(a=e[n]);var y=!s&&_e(a,!1,r);return Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var n=o?o.call(e):a;return he.target&&(p.depend(),y&&(y.dep.depend(),t(n)&&Be(n))),Ze(n)&&!s?n.value:n},set:function(t){var n=o?o.call(e):a;if(O(n,t)){if(d)d.call(e,t);else{if(o)return;if(!s&&Ze(n)&&!Ze(t))return void(n.value=t);a=t}y=!s&&_e(t,!1,r),p.notify()}}}),p}}function Ee(e,n,a){if(!Ce(e)){var i=e.__ob__;return t(e)&&y(n)?(e.length=Math.max(e.length,n),e.splice(n,1,a),i&&!i.shallow&&i.mock&&_e(a,!1,!0),a):n in e&&!(n in Object.prototype)?(e[n]=a,a):e._isVue||i&&i.vmCount?a:i?(Le(i.value,n,a,void 0,i.shallow,i.mock),i.dep.notify(),a):(e[n]=a,a)}}function Re(e,n){if(t(e)&&y(n))e.splice(n,1);else{var a=e.__ob__;e._isVue||a&&a.vmCount||Ce(e)||b(e,n)&&(delete e[n],a&&a.dep.notify())}}function Be(e){for(var n=void 0,a=0,i=e.length;a<i;a++)(n=e[a])&&n.__ob__&&n.__ob__.dep.depend(),t(n)&&Be(n)}function Ve(e){return function(e,t){Ce(e)||_e(e,t,ie())}(e,!0),H(e,"__v_isShallow",!0),e}function Ce(e){return!(!e||!e.__v_isReadonly)}function Ze(e){return!(!e||!0!==e.__v_isRef)}function Oe(e,t,n){Object.defineProperty(e,n,{enumerable:!0,configurable:!0,get:function(){var e=t[n];if(Ze(e))return e.value;var a=e&&e.__ob__;return a&&a.dep.depend(),e},set:function(e){var a=t[n];Ze(a)&&!Ze(e)?a.value=e:t[n]=e}})}var qe=k((function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),a="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=a?e.slice(1):e,once:n,capture:a,passive:t}}));function Fe(e,n){function a(){var e=a.fns;if(!t(e))return Wt(e,null,arguments,n,"v-on handler");for(var i=e.slice(),s=0;s<i.length;s++)Wt(i[s],null,arguments,n,"v-on handler")}return a.fns=e,a}function Ne(e,t,n,i,r,p){var u,o,d,y;for(u in e)o=e[u],d=t[u],y=qe(u),a(o)||(a(d)?(a(o.fns)&&(o=e[u]=Fe(o,p)),s(y.once)&&(o=e[u]=r(y.name,o,y.capture)),n(y.name,o,y.capture,y.passive,y.params)):o!==d&&(d.fns=o,e[u]=d));for(u in t)a(e[u])&&i((y=qe(u)).name,t[u],y.capture)}function ze(e,t,n){var r;e instanceof ye&&(e=e.data.hook||(e.data.hook={}));var p=e[t];function u(){n.apply(this,arguments),v(r.fns,u)}a(p)?r=Fe([u]):i(p.fns)&&s(p.merged)?(r=p).fns.push(u):r=Fe([p,u]),r.merged=!0,e[t]=r}function $e(e,t,n,a,s){if(i(t)){if(b(t,n))return e[n]=t[n],s||delete t[n],!0;if(b(t,a))return e[n]=t[a],s||delete t[a],!0}return!1}function De(e){return r(e)?[me(e)]:t(e)?Ue(e):void 0}function He(e){return i(e)&&i(e.text)&&!1===e.isComment}function Ue(e,n){var p,u,o,d,y=[];for(p=0;p<e.length;p++)a(u=e[p])||"boolean"==typeof u||(d=y[o=y.length-1],t(u)?u.length>0&&(He((u=Ue(u,"".concat(n||"","_").concat(p)))[0])&&He(d)&&(y[o]=me(d.text+u[0].text),u.shift()),y.push.apply(y,u)):r(u)?He(d)?y[o]=me(d.text+u):""!==u&&y.push(me(u)):He(u)&&He(d)?y[o]=me(d.text+u.text):(s(e._isVList)&&i(u.tag)&&a(u.key)&&i(n)&&(u.key="__vlist".concat(n,"_").concat(p,"__")),y.push(u)));return y}function je(e,n,a,o,d,y){return(t(a)||r(a))&&(d=o,o=a,a=void 0),s(y)&&(d=2),function(e,n,a,s,r){if(i(a)&&i(a.__ob__))return le();if(i(a)&&i(a.is)&&(n=a.is),!n)return le();var o,d;if(t(s)&&p(s[0])&&((a=a||{}).scopedSlots={default:s[0]},s.length=0),2===r?s=De(s):1===r&&(s=function(e){for(var n=0;n<e.length;n++)if(t(e[n]))return Array.prototype.concat.apply([],e);return e}(s)),"string"==typeof n){var y=void 0;d=e.$vnode&&e.$vnode.ns||z.getTagNamespace(n),o=z.isReservedTag(n)?new ye(z.parsePlatformTagName(n),a,s,void 0,void 0,e):a&&a.pre||!i(y=Nn(e.$options,"components",n))?new ye(n,a,s,void 0,void 0,e):Ln(y,a,e,s,n)}else o=Ln(n,a,e,s);return t(o)?o:i(o)?(i(d)&&We(o,d),i(a)&&function(e){u(e.style)&&on(e.style),u(e.class)&&on(e.class)}(a),o):le()}(e,n,a,o,d)}function We(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),i(e.children))for(var r=0,p=e.children.length;r<p;r++){var u=e.children[r];i(u.tag)&&(a(u.ns)||s(n)&&"svg"!==u.tag)&&We(u,t,n)}}function Ge(e,n){var a,s,r,p,o=null;if(t(e)||"string"==typeof e)for(o=new Array(e.length),a=0,s=e.length;a<s;a++)o[a]=n(e[a],a);else if("number"==typeof e)for(o=new Array(e),a=0;a<e;a++)o[a]=n(a+1,a);else if(u(e))if(ue&&e[Symbol.iterator]){o=[];for(var d=e[Symbol.iterator](),y=d.next();!y.done;)o.push(n(y.value,o.length)),y=d.next()}else for(r=Object.keys(e),o=new Array(r.length),a=0,s=r.length;a<s;a++)p=r[a],o[a]=n(e[p],p,a);return i(o)||(o=[]),o._isVList=!0,o}function Ke(e,t,n,a){var i,s=this.$scopedSlots[e];s?(n=n||{},a&&(n=_(_({},a),n)),i=s(n)||(p(t)?t():t)):i=this.$slots[e]||(p(t)?t():t);var r=n&&n.slot;return r?this.$createElement("template",{slot:r},i):i}function Ye(e){return Nn(this.$options,"filters",e)||B}function Je(e,n){return t(e)?-1===e.indexOf(n):e!==n}function Xe(e,t,n,a,i){var s=z.keyCodes[t]||n;return i&&a&&!z.keyCodes[t]?Je(i,a):s?Je(s,e):a?I(a)!==t:void 0===e}function Qe(e,n,a,i,s){if(a&&u(a)){t(a)&&(a=L(a));var r=void 0,p=function(t){if("class"===t||"style"===t||h(t))r=e;else{var p=e.attrs&&e.attrs.type;r=i||z.mustUseProp(n,p,t)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var u=g(t),o=I(t);u in r||o in r||(r[t]=a[t],s&&((e.on||(e.on={}))["update:".concat(t)]=function(e){a[t]=e}))};for(var o in a)p(o)}return e}function et(e,t){var n=this._staticTrees||(this._staticTrees=[]),a=n[e];return a&&!t||nt(a=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,this._c,this),"__static__".concat(e),!1),a}function tt(e,t,n){return nt(e,"__once__".concat(t).concat(n?"_".concat(n):""),!0),e}function nt(e,n,a){if(t(e))for(var i=0;i<e.length;i++)e[i]&&"string"!=typeof e[i]&&at(e[i],"".concat(n,"_").concat(i),a);else at(e,n,a)}function at(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function it(e,t){if(t&&d(t)){var n=e.on=e.on?_({},e.on):{};for(var a in t){var i=n[a],s=t[a];n[a]=i?[].concat(i,s):s}}return e}function st(e,n,a,i){n=n||{$stable:!a};for(var s=0;s<e.length;s++){var r=e[s];t(r)?st(r,n,a):r&&(r.proxy&&(r.fn.proxy=!0),n[r.key]=r.fn)}return i&&(n.$key=i),n}function rt(e,t){for(var n=0;n<t.length;n+=2){var a=t[n];"string"==typeof a&&a&&(e[t[n]]=t[n+1])}return e}function pt(e,t){return"string"==typeof e?t+e:e}function ut(e){e._o=tt,e._n=c,e._s=m,e._l=Ge,e._t=Ke,e._q=V,e._i=C,e._m=et,e._f=Ye,e._k=Xe,e._b=Qe,e._v=me,e._e=le,e._u=st,e._g=it,e._d=rt,e._p=pt}function ot(e,t){if(!e||!e.length)return{};for(var n={},a=0,i=e.length;a<i;a++){var s=e[a],r=s.data;if(r&&r.attrs&&r.attrs.slot&&delete r.attrs.slot,s.context!==t&&s.fnContext!==t||!r||null==r.slot)(n.default||(n.default=[])).push(s);else{var p=r.slot,u=n[p]||(n[p]=[]);"template"===s.tag?u.push.apply(u,s.children||[]):u.push(s)}}for(var o in n)n[o].every(dt)&&delete n[o];return n}function dt(e){return e.isComment&&!e.asyncFactory||" "===e.text}function yt(e){return e.isComment&&e.asyncFactory}function lt(t,n,a,i){var s,r=Object.keys(a).length>0,p=n?!!n.$stable:!r,u=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(p&&i&&i!==e&&u===i.$key&&!r&&!i.$hasNormal)return i;for(var o in s={},n)n[o]&&"$"!==o[0]&&(s[o]=mt(t,a,o,n[o]))}else s={};for(var d in a)d in s||(s[d]=ct(a,d));return n&&Object.isExtensible(n)&&(n._normalized=s),H(s,"$stable",p),H(s,"$key",u),H(s,"$hasNormal",r),s}function mt(e,n,a,i){var s=function(){var n=oe;de(e);var a=arguments.length?i.apply(null,arguments):i({}),s=(a=a&&"object"==typeof a&&!t(a)?[a]:De(a))&&a[0];return de(n),a&&(!s||1===a.length&&s.isComment&&!yt(s))?void 0:a};return i.proxy&&Object.defineProperty(n,a,{get:s,enumerable:!0,configurable:!0}),s}function ct(e,t){return function(){return e[t]}}function Tt(e,t,n,a,i){var s=!1;for(var r in t)r in e?t[r]!==n[r]&&(s=!0):(s=!0,ft(e,r,a,i));for(var r in e)r in t||(s=!0,delete e[r]);return s}function ft(e,t,n,a){Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){return n[a][t]}})}function ht(e,t){for(var n in t)e[n]=t[n];for(var n in e)n in t||delete e[n]}var vt,wt=null;function bt(e,t){return(e.__esModule||ue&&"Module"===e[Symbol.toStringTag])&&(e=e.default),u(e)?t.extend(e):e}function kt(e){if(t(e))for(var n=0;n<e.length;n++){var a=e[n];if(i(a)&&(i(a.componentOptions)||yt(a)))return a}}function At(e,t){vt.$on(e,t)}function gt(e,t){vt.$off(e,t)}function Pt(e,t){var n=vt;return function a(){var i=t.apply(null,arguments);null!==i&&n.$off(e,a)}}function Mt(e,t,n){vt=e,Ne(t,n||{},At,gt,Pt,e),vt=void 0}var It=null;function St(e){var t=It;return It=e,function(){It=t}}function xt(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function _t(e,t){if(t){if(e._directInactive=!1,xt(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)_t(e.$children[n]);Et(e,"activated")}}function Lt(e,t){if(!(t&&(e._directInactive=!0,xt(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)Lt(e.$children[n]);Et(e,"deactivated")}}function Et(e,t,n,a){void 0===a&&(a=!0),we();var i=oe;a&&de(e);var s=e.$options[t],r="".concat(t," hook");if(s)for(var p=0,u=s.length;p<u;p++)Wt(s[p],e,n||null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),a&&de(i),be()}var Rt=[],Bt=[],Vt={},Ct=!1,Zt=!1,Ot=0,qt=0,Ft=Date.now;if(W&&!K){var Nt=window.performance;Nt&&"function"==typeof Nt.now&&Ft()>document.createEvent("Event").timeStamp&&(Ft=function(){return Nt.now()})}var zt=function(e,t){if(e.post){if(!t.post)return 1}else if(t.post)return-1;return e.id-t.id};function $t(){var e,t;for(qt=Ft(),Zt=!0,Rt.sort(zt),Ot=0;Ot<Rt.length;Ot++)(e=Rt[Ot]).before&&e.before(),t=e.id,Vt[t]=null,e.run();var n=Bt.slice(),a=Rt.slice();Ot=Rt.length=Bt.length=0,Vt={},Ct=Zt=!1,function(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,_t(e[t],!0)}(n),function(e){for(var t=e.length;t--;){var n=e[t],a=n.vm;a&&a._watcher===n&&a._isMounted&&!a._isDestroyed&&Et(a,"updated")}}(a),function(){for(var e=0;e<fe.length;e++){var t=fe[e];t.subs=t.subs.filter((function(e){return e})),t._pending=!1}fe.length=0}(),se&&z.devtools&&se.emit("flush")}var Dt,Ht="watcher";"".concat(Ht," callback"),"".concat(Ht," getter"),"".concat(Ht," cleanup");var Ut=function(){function e(e){void 0===e&&(e=!1),this.detached=e,this.active=!0,this.effects=[],this.cleanups=[],this.parent=Dt,!e&&Dt&&(this.index=(Dt.scopes||(Dt.scopes=[])).push(this)-1)}return e.prototype.run=function(e){if(this.active){var t=Dt;try{return Dt=this,e()}finally{Dt=t}}},e.prototype.on=function(){Dt=this},e.prototype.off=function(){Dt=this.parent},e.prototype.stop=function(e){if(this.active){var t=void 0,n=void 0;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].teardown();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);if(!this.detached&&this.parent&&!e){var a=this.parent.scopes.pop();a&&a!==this&&(this.parent.scopes[this.index]=a,a.index=this.index)}this.parent=void 0,this.active=!1}},e}();function jt(e,t,n){we();try{if(t)for(var a=t;a=a.$parent;){var i=a.$options.errorCaptured;if(i)for(var s=0;s<i.length;s++)try{if(!1===i[s].call(a,e,t,n))return}catch(e){Gt(e,a,"errorCaptured hook")}}Gt(e,t,n)}finally{be()}}function Wt(e,t,n,a,i){var s;try{(s=n?e.apply(t,n):e.call(t))&&!s._isVue&&l(s)&&!s._handled&&(s.catch((function(e){return jt(e,a,i+" (Promise/async)")})),s._handled=!0)}catch(e){jt(e,a,i)}return s}function Gt(e,t,n){if(z.errorHandler)try{return z.errorHandler.call(null,e,t,n)}catch(t){t!==e&&Kt(t)}Kt(e)}function Kt(e,t,n){if(!W||"undefined"==typeof console)throw e;console.error(e)}var Yt,Jt=!1,Xt=[],Qt=!1;function en(){Qt=!1;var e=Xt.slice(0);Xt.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&re(Promise)){var tn=Promise.resolve();Yt=function(){tn.then(en),X&&setTimeout(E)},Jt=!0}else if(K||"undefined"==typeof MutationObserver||!re(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Yt="undefined"!=typeof setImmediate&&re(setImmediate)?function(){setImmediate(en)}:function(){setTimeout(en,0)};else{var nn=1,an=new MutationObserver(en),sn=document.createTextNode(String(nn));an.observe(sn,{characterData:!0}),Yt=function(){nn=(nn+1)%2,sn.data=String(nn)},Jt=!0}function rn(e,t){var n;if(Xt.push((function(){if(e)try{e.call(t)}catch(e){jt(e,t,"nextTick")}else n&&n(t)})),Qt||(Qt=!0,Yt()),!e&&"undefined"!=typeof Promise)return new Promise((function(e){n=e}))}function pn(e){return function(t,n){if(void 0===n&&(n=oe),n)return function(e,t,n){var a=e.$options;a[t]=Zn(a[t],n)}(n,e,t)}}pn("beforeMount"),pn("mounted"),pn("beforeUpdate"),pn("updated"),pn("beforeDestroy"),pn("destroyed"),pn("activated"),pn("deactivated"),pn("serverPrefetch"),pn("renderTracked"),pn("renderTriggered"),pn("errorCaptured");var un=new pe;function on(e){return dn(e,un),un.clear(),e}function dn(e,n){var a,i,s=t(e);if(!(!s&&!u(e)||e.__v_skip||Object.isFrozen(e)||e instanceof ye)){if(e.__ob__){var r=e.__ob__.dep.id;if(n.has(r))return;n.add(r)}if(s)for(a=e.length;a--;)dn(e[a],n);else if(Ze(e))dn(e.value,n);else for(a=(i=Object.keys(e)).length;a--;)dn(e[i[a]],n)}}var yn=0,ln=function(){function e(e,t,n,a,i){var s;void 0===(s=Dt&&!Dt._vm?Dt:e?e._scope:void 0)&&(s=Dt),s&&s.active&&s.effects.push(this),(this.vm=e)&&i&&(e._watcher=this),a?(this.deep=!!a.deep,this.user=!!a.user,this.lazy=!!a.lazy,this.sync=!!a.sync,this.before=a.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++yn,this.active=!0,this.post=!1,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new pe,this.newDepIds=new pe,this.expression="",p(t)?this.getter=t:(this.getter=function(e){if(!U.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}(t),this.getter||(this.getter=E)),this.value=this.lazy?void 0:this.get()}return e.prototype.get=function(){var e;we(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;jt(e,t,'getter for watcher "'.concat(this.expression,'"'))}finally{this.deep&&on(e),be(),this.cleanupDeps()}return e},e.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},e.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},e.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(e){var t=e.id;if(null==Vt[t]&&(e!==he.target||!e.noRecurse)){if(Vt[t]=!0,Zt){for(var n=Rt.length-1;n>Ot&&Rt[n].id>e.id;)n--;Rt.splice(n+1,0,e)}else Rt.push(e);Ct||(Ct=!0,rn($t))}}(this)},e.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||u(e)||this.deep){var t=this.value;if(this.value=e,this.user){var n='callback for watcher "'.concat(this.expression,'"');Wt(this.cb,this.vm,[e,t],this.vm,n)}else this.cb.call(this.vm,e,t)}}},e.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},e.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},e.prototype.teardown=function(){if(this.vm&&!this.vm._isBeingDestroyed&&v(this.vm._scope.effects,this),this.active){for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1,this.onStop&&this.onStop()}},e}(),mn={enumerable:!0,configurable:!0,get:E,set:E};function cn(e,t,n){mn.get=function(){return this[t][n]},mn.set=function(e){this[t][n]=e},Object.defineProperty(e,n,mn)}function Tn(n){var a=n.$options;if(a.props&&function(e,t){var n=e.$options.propsData||{},a=e._props=Ve({}),i=e.$options._propKeys=[];!e.$parent||Ie(!1);var s=function(s){i.push(s);var r=zn(s,t,n,e);Le(a,s,r),s in e||cn(e,"_props",s)};for(var r in t)s(r);Ie(!0)}(n,a.props),function(t){var n=t.$options,a=n.setup;if(a){var i=t._setupContext=function(t){return{get attrs(){if(!t._attrsProxy){var n=t._attrsProxy={};H(n,"_v_attr_proxy",!0),Tt(n,t.$attrs,e,t,"$attrs")}return t._attrsProxy},get listeners(){return t._listenersProxy||Tt(t._listenersProxy={},t.$listeners,e,t,"$listeners"),t._listenersProxy},get slots(){return function(e){return e._slotsProxy||ht(e._slotsProxy={},e.$scopedSlots),e._slotsProxy}(t)},emit:S(t.$emit,t),expose:function(e){e&&Object.keys(e).forEach((function(n){return Oe(t,e,n)}))}}}(t);de(t),we();var s=Wt(a,null,[t._props||Ve({}),i],t,"setup");if(be(),de(),p(s))n.render=s;else if(u(s))if(t._setupState=s,s.__sfc){var r=t._setupProxy={};for(var o in s)"__sfc"!==o&&Oe(r,s,o)}else for(var o in s)D(o)||Oe(t,s,o)}}(n),a.methods&&function(e,t){for(var n in e.$options.props,t)e[n]="function"!=typeof t[n]?E:S(t[n],e)}(n,a.methods),a.data)!function(e){var t=e.$options.data;d(t=e._data=p(t)?function(e,t){we();try{return e.call(t,t)}catch(e){return jt(e,t,"data()"),{}}finally{be()}}(t,e):t||{})||(t={});for(var n=Object.keys(t),a=e.$options.props,i=(e.$options.methods,n.length);i--;){var s=n[i];a&&b(a,s)||D(s)||cn(e,"_data",s)}var r=_e(t);r&&r.vmCount++}(n);else{var i=_e(n._data={});i&&i.vmCount++}a.computed&&function(e,t){var n=e._computedWatchers=Object.create(null),a=ie();for(var i in t){var s=t[i],r=p(s)?s:s.get;a||(n[i]=new ln(e,r||E,E,fn)),i in e||hn(e,i,s)}}(n,a.computed),a.watch&&a.watch!==te&&function(e,n){for(var a in n){var i=n[a];if(t(i))for(var s=0;s<i.length;s++)bn(e,a,i[s]);else bn(e,a,i)}}(n,a.watch)}var fn={lazy:!0};function hn(e,t,n){var a=!ie();p(n)?(mn.get=a?vn(t):wn(n),mn.set=E):(mn.get=n.get?a&&!1!==n.cache?vn(t):wn(n.get):E,mn.set=n.set||E),Object.defineProperty(e,t,mn)}function vn(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),he.target&&t.depend(),t.value}}function wn(e){return function(){return e.call(this,this)}}function bn(e,t,n,a){return d(n)&&(a=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,a)}function kn(e,t){if(e){for(var n=Object.create(null),a=ue?Reflect.ownKeys(e):Object.keys(e),i=0;i<a.length;i++){var s=a[i];if("__ob__"!==s){var r=e[s].from;if(r in t._provided)n[s]=t._provided[r];else if("default"in e[s]){var u=e[s].default;n[s]=p(u)?u.call(t):u}}}return n}}var An=0;function gn(e){var t=e.options;if(e.super){var n=gn(e.super);if(n!==e.superOptions){e.superOptions=n;var a=function(e){var t,n=e.options,a=e.sealedOptions;for(var i in n)n[i]!==a[i]&&(t||(t={}),t[i]=n[i]);return t}(e);a&&_(e.extendOptions,a),(t=e.options=Fn(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function Pn(n,a,i,r,p){var u,o=this,d=p.options;b(r,"_uid")?(u=Object.create(r))._original=r:(u=r,r=r._original);var y=s(d._compiled),l=!y;this.data=n,this.props=a,this.children=i,this.parent=r,this.listeners=n.on||e,this.injections=kn(d.inject,r),this.slots=function(){return o.$slots||lt(r,n.scopedSlots,o.$slots=ot(i,r)),o.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return lt(r,n.scopedSlots,this.slots())}}),y&&(this.$options=d,this.$slots=this.slots(),this.$scopedSlots=lt(r,n.scopedSlots,this.$slots)),d._scopeId?this._c=function(e,n,a,i){var s=je(u,e,n,a,i,l);return s&&!t(s)&&(s.fnScopeId=d._scopeId,s.fnContext=r),s}:this._c=function(e,t,n,a){return je(u,e,t,n,a,l)}}function Mn(e,t,n,a,i){var s=ce(e);return s.fnContext=n,s.fnOptions=a,t.slot&&((s.data||(s.data={})).slot=t.slot),s}function In(e,t){for(var n in t)e[g(n)]=t[n]}function Sn(e){return e.name||e.__name||e._componentTag}ut(Pn.prototype);var xn={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;xn.prepatch(n,n)}else(e.componentInstance=function(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},a=e.data.inlineTemplate;return i(a)&&(n.render=a.render,n.staticRenderFns=a.staticRenderFns),new e.componentOptions.Ctor(n)}(e,It)).$mount(t?e.elm:void 0,t)},prepatch:function(t,n){var a=n.componentOptions;!function(t,n,a,i,s){var r=i.data.scopedSlots,p=t.$scopedSlots,u=!!(r&&!r.$stable||p!==e&&!p.$stable||r&&t.$scopedSlots.$key!==r.$key||!r&&t.$scopedSlots.$key),o=!!(s||t.$options._renderChildren||u),d=t.$vnode;t.$options._parentVnode=i,t.$vnode=i,t._vnode&&(t._vnode.parent=i),t.$options._renderChildren=s;var y=i.data.attrs||e;t._attrsProxy&&Tt(t._attrsProxy,y,d.data&&d.data.attrs||e,t,"$attrs")&&(o=!0),t.$attrs=y,a=a||e;var l=t.$options._parentListeners;if(t._listenersProxy&&Tt(t._listenersProxy,a,l||e,t,"$listeners"),t.$listeners=t.$options._parentListeners=a,Mt(t,a,l),n&&t.$options.props){Ie(!1);for(var m=t._props,c=t.$options._propKeys||[],T=0;T<c.length;T++){var f=c[T],h=t.$options.props;m[f]=zn(f,h,n,t)}Ie(!0),t.$options.propsData=n}o&&(t.$slots=ot(s,i.context),t.$forceUpdate())}(n.componentInstance=t.componentInstance,a.propsData,a.listeners,n,a.children)},insert:function(e){var t,n=e.context,a=e.componentInstance;a._isMounted||(a._isMounted=!0,Et(a,"mounted")),e.data.keepAlive&&(n._isMounted?((t=a)._inactive=!1,Bt.push(t)):_t(a,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?Lt(t,!0):t.$destroy())}},_n=Object.keys(xn);function Ln(n,r,p,o,d){if(!a(n)){var y=p.$options._base;if(u(n)&&(n=y.extend(n)),"function"==typeof n){var m;if(a(n.cid)&&(n=function(e,t){if(s(e.error)&&i(e.errorComp))return e.errorComp;if(i(e.resolved))return e.resolved;var n=wt;if(n&&i(e.owners)&&-1===e.owners.indexOf(n)&&e.owners.push(n),s(e.loading)&&i(e.loadingComp))return e.loadingComp;if(n&&!i(e.owners)){var r=e.owners=[n],p=!0,o=null,d=null;n.$on("hook:destroyed",(function(){return v(r,n)}));var y=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0,null!==o&&(clearTimeout(o),o=null),null!==d&&(clearTimeout(d),d=null))},m=Z((function(n){e.resolved=bt(n,t),p?r.length=0:y(!0)})),c=Z((function(t){i(e.errorComp)&&(e.error=!0,y(!0))})),T=e(m,c);return u(T)&&(l(T)?a(e.resolved)&&T.then(m,c):l(T.component)&&(T.component.then(m,c),i(T.error)&&(e.errorComp=bt(T.error,t)),i(T.loading)&&(e.loadingComp=bt(T.loading,t),0===T.delay?e.loading=!0:o=setTimeout((function(){o=null,a(e.resolved)&&a(e.error)&&(e.loading=!0,y(!1))}),T.delay||200)),i(T.timeout)&&(d=setTimeout((function(){d=null,a(e.resolved)&&c(null)}),T.timeout)))),p=!1,e.loading?e.loadingComp:e.resolved}}(m=n,y),void 0===n))return function(e,t,n,a,i){var s=le();return s.asyncFactory=e,s.asyncMeta={data:t,context:n,children:a,tag:i},s}(m,r,p,o,d);r=r||{},gn(n),i(r.model)&&function(e,n){var a=e.model&&e.model.prop||"value",s=e.model&&e.model.event||"input";(n.attrs||(n.attrs={}))[a]=n.model.value;var r=n.on||(n.on={}),p=r[s],u=n.model.callback;i(p)?(t(p)?-1===p.indexOf(u):p!==u)&&(r[s]=[u].concat(p)):r[s]=u}(n.options,r);var c=function(e,t,n){var s=t.options.props;if(!a(s)){var r={},p=e.attrs,u=e.props;if(i(p)||i(u))for(var o in s){var d=I(o);$e(r,u,o,d,!0)||$e(r,p,o,d,!1)}return r}}(r,n);if(s(n.options.functional))return function(n,a,s,r,p){var u=n.options,o={},d=u.props;if(i(d))for(var y in d)o[y]=zn(y,d,a||e);else i(s.attrs)&&In(o,s.attrs),i(s.props)&&In(o,s.props);var l=new Pn(s,o,p,r,n),m=u.render.call(null,l._c,l);if(m instanceof ye)return Mn(m,s,l.parent,u);if(t(m)){for(var c=De(m)||[],T=new Array(c.length),f=0;f<c.length;f++)T[f]=Mn(c[f],s,l.parent,u);return T}}(n,c,r,p,o);var T=r.on;if(r.on=r.nativeOn,s(n.options.abstract)){var f=r.slot;r={},f&&(r.slot=f)}!function(e){for(var t=e.hook||(e.hook={}),n=0;n<_n.length;n++){var a=_n[n],i=t[a],s=xn[a];i===s||i&&i._merged||(t[a]=i?En(s,i):s)}}(r);var h=Sn(n.options)||d;return new ye("vue-component-".concat(n.cid).concat(h?"-".concat(h):""),r,void 0,void 0,void 0,p,{Ctor:n,propsData:c,listeners:T,tag:d,children:o},m)}}}function En(e,t){var n=function(n,a){e(n,a),t(n,a)};return n._merged=!0,n}var Rn=E,Bn=z.optionMergeStrategies;function Vn(e,t,n){if(void 0===n&&(n=!0),!t)return e;for(var a,i,s,r=ue?Reflect.ownKeys(t):Object.keys(t),p=0;p<r.length;p++)"__ob__"!==(a=r[p])&&(i=e[a],s=t[a],n&&b(e,a)?i!==s&&d(i)&&d(s)&&Vn(i,s):Ee(e,a,s));return e}function Cn(e,t,n){return n?function(){var a=p(t)?t.call(n,n):t,i=p(e)?e.call(n,n):e;return a?Vn(a,i):i}:t?e?function(){return Vn(p(t)?t.call(this,this):t,p(e)?e.call(this,this):e)}:t:e}function Zn(e,n){var a=n?e?e.concat(n):t(n)?n:[n]:e;return a?function(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(a):a}function On(e,t,n,a){var i=Object.create(e||null);return t?_(i,t):i}Bn.data=function(e,t,n){return n?Cn(e,t,n):t&&"function"!=typeof t?e:Cn(e,t)},N.forEach((function(e){Bn[e]=Zn})),F.forEach((function(e){Bn[e+"s"]=On})),Bn.watch=function(e,n,a,i){if(e===te&&(e=void 0),n===te&&(n=void 0),!n)return Object.create(e||null);if(!e)return n;var s={};for(var r in _(s,e),n){var p=s[r],u=n[r];p&&!t(p)&&(p=[p]),s[r]=p?p.concat(u):t(u)?u:[u]}return s},Bn.props=Bn.methods=Bn.inject=Bn.computed=function(e,t,n,a){if(!e)return t;var i=Object.create(null);return _(i,e),t&&_(i,t),i},Bn.provide=function(e,t){return e?function(){var n=Object.create(null);return Vn(n,p(e)?e.call(this):e),t&&Vn(n,p(t)?t.call(this):t,!1),n}:t};var qn=function(e,t){return void 0===t?e:t};function Fn(e,n,a){if(p(n)&&(n=n.options),function(e,n){var a=e.props;if(a){var i,s,r={};if(t(a))for(i=a.length;i--;)"string"==typeof(s=a[i])&&(r[g(s)]={type:null});else if(d(a))for(var p in a)s=a[p],r[g(p)]=d(s)?s:{type:s};e.props=r}}(n),function(e,n){var a=e.inject;if(a){var i=e.inject={};if(t(a))for(var s=0;s<a.length;s++)i[a[s]]={from:a[s]};else if(d(a))for(var r in a){var p=a[r];i[r]=d(p)?_({from:r},p):{from:p}}}}(n),function(e){var t=e.directives;if(t)for(var n in t){var a=t[n];p(a)&&(t[n]={bind:a,update:a})}}(n),!n._base&&(n.extends&&(e=Fn(e,n.extends,a)),n.mixins))for(var i=0,s=n.mixins.length;i<s;i++)e=Fn(e,n.mixins[i],a);var r,u={};for(r in e)o(r);for(r in n)b(e,r)||o(r);function o(t){var i=Bn[t]||qn;u[t]=i(e[t],n[t],a,t)}return u}function Nn(e,t,n,a){if("string"==typeof n){var i=e[t];if(b(i,n))return i[n];var s=g(n);if(b(i,s))return i[s];var r=P(s);return b(i,r)?i[r]:i[n]||i[s]||i[r]}}function zn(e,t,n,a){var i=t[e],s=!b(n,e),r=n[e],u=Un(Boolean,i.type);if(u>-1)if(s&&!b(i,"default"))r=!1;else if(""===r||r===I(e)){var o=Un(String,i.type);(o<0||u<o)&&(r=!0)}if(void 0===r){r=function(e,t,n){if(b(t,"default")){var a=t.default;return e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:p(a)&&"Function"!==Dn(t.type)?a.call(e):a}}(a,i,e);var d=Me;Ie(!0),_e(r),Ie(d)}return r}var $n=/^\s*function (\w+)/;function Dn(e){var t=e&&e.toString().match($n);return t?t[1]:""}function Hn(e,t){return Dn(e)===Dn(t)}function Un(e,n){if(!t(n))return Hn(n,e)?0:-1;for(var a=0,i=n.length;a<i;a++)if(Hn(n[a],e))return a;return-1}function jn(e){this._init(e)}function Wn(e){return e&&(Sn(e.Ctor.options)||e.tag)}function Gn(e,n){return t(e)?e.indexOf(n)>-1:"string"==typeof e?e.split(",").indexOf(n)>-1:(a=e,!("[object RegExp]"!==o.call(a))&&e.test(n));var a}function Kn(e,t){var n=e.cache,a=e.keys,i=e._vnode;for(var s in n){var r=n[s];if(r){var p=r.name;p&&!t(p)&&Yn(n,s,a,i)}}}function Yn(e,t,n,a){var i=e[t];!i||a&&i.tag===a.tag||i.componentInstance.$destroy(),e[t]=null,v(n,t)}!function(t){t.prototype._init=function(t){var n=this;n._uid=An++,n._isVue=!0,n.__v_skip=!0,n._scope=new Ut(!0),n._scope._vm=!0,t&&t._isComponent?function(e,t){var n=e.$options=Object.create(e.constructor.options),a=t._parentVnode;n.parent=t.parent,n._parentVnode=a;var i=a.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}(n,t):n.$options=Fn(gn(n.constructor),t||{},n),n._renderProxy=n,n._self=n,function(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._provided=n?n._provided:Object.create(null),e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}(n),function(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&Mt(e,t)}(n),function(t){t._vnode=null,t._staticTrees=null;var n=t.$options,a=t.$vnode=n._parentVnode,i=a&&a.context;t.$slots=ot(n._renderChildren,i),t.$scopedSlots=a?lt(t.$parent,a.data.scopedSlots,t.$slots):e,t._c=function(e,n,a,i){return je(t,e,n,a,i,!1)},t.$createElement=function(e,n,a,i){return je(t,e,n,a,i,!0)};var s=a&&a.data;Le(t,"$attrs",s&&s.attrs||e,null,!0),Le(t,"$listeners",n._parentListeners||e,null,!0)}(n),Et(n,"beforeCreate",void 0,!1),function(e){var t=kn(e.$options.inject,e);t&&(Ie(!1),Object.keys(t).forEach((function(n){Le(e,n,t[n])})),Ie(!0))}(n),Tn(n),function(e){var t=e.$options.provide;if(t){var n=p(t)?t.call(e):t;if(!u(n))return;for(var a=function(e){var t=e._provided,n=e.$parent&&e.$parent._provided;return n===t?e._provided=Object.create(n):t}(e),i=ue?Reflect.ownKeys(n):Object.keys(n),s=0;s<i.length;s++){var r=i[s];Object.defineProperty(a,r,Object.getOwnPropertyDescriptor(n,r))}}}(n),Et(n,"created"),n.$options.el&&n.$mount(n.$options.el)}}(jn),function(e){Object.defineProperty(e.prototype,"$data",{get:function(){return this._data}}),Object.defineProperty(e.prototype,"$props",{get:function(){return this._props}}),e.prototype.$set=Ee,e.prototype.$delete=Re,e.prototype.$watch=function(e,t,n){var a=this;if(d(t))return bn(a,e,t,n);(n=n||{}).user=!0;var i=new ln(a,e,t,n);if(n.immediate){var s='callback for immediate watcher "'.concat(i.expression,'"');we(),Wt(t,a,[i.value],a,s),be()}return function(){i.teardown()}}}(jn),function(e){var n=/^hook:/;e.prototype.$on=function(e,a){var i=this;if(t(e))for(var s=0,r=e.length;s<r;s++)i.$on(e[s],a);else(i._events[e]||(i._events[e]=[])).push(a),n.test(e)&&(i._hasHookEvent=!0);return i},e.prototype.$once=function(e,t){var n=this;function a(){n.$off(e,a),t.apply(n,arguments)}return a.fn=t,n.$on(e,a),n},e.prototype.$off=function(e,n){var a=this;if(!arguments.length)return a._events=Object.create(null),a;if(t(e)){for(var i=0,s=e.length;i<s;i++)a.$off(e[i],n);return a}var r,p=a._events[e];if(!p)return a;if(!n)return a._events[e]=null,a;for(var u=p.length;u--;)if((r=p[u])===n||r.fn===n){p.splice(u,1);break}return a},e.prototype.$emit=function(e){var t=this,n=t._events[e];if(n){n=n.length>1?x(n):n;for(var a=x(arguments,1),i='event handler for "'.concat(e,'"'),s=0,r=n.length;s<r;s++)Wt(n[s],t,a,t,i)}return t}}(jn),function(e){e.prototype._update=function(e,t){var n=this,a=n.$el,i=n._vnode,s=St(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),s(),a&&(a.__vue__=null),n.$el&&(n.$el.__vue__=n);for(var r=n;r&&r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode;)r.$parent.$el=r.$el,r=r.$parent},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){Et(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||v(t.$children,e),e._scope.stop(),e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),Et(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}(jn),function(e){ut(e.prototype),e.prototype.$nextTick=function(e){return rn(e,this)},e.prototype._render=function(){var e,n=this,a=n.$options,i=a.render,s=a._parentVnode;s&&n._isMounted&&(n.$scopedSlots=lt(n.$parent,s.data.scopedSlots,n.$slots,n.$scopedSlots),n._slotsProxy&&ht(n._slotsProxy,n.$scopedSlots)),n.$vnode=s;try{de(n),wt=n,e=i.call(n._renderProxy,n.$createElement)}catch(t){jt(t,n,"render"),e=n._vnode}finally{wt=null,de()}return t(e)&&1===e.length&&(e=e[0]),e instanceof ye||(e=le()),e.parent=s,e}}(jn);var Jn=[String,RegExp,Array],Xn={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Jn,exclude:Jn,max:[String,Number]},methods:{cacheVNode:function(){var e=this,t=e.cache,n=e.keys,a=e.vnodeToCache,i=e.keyToCache;if(a){var s=a.tag,r=a.componentInstance,p=a.componentOptions;t[i]={name:Wn(p),tag:s,componentInstance:r},n.push(i),this.max&&n.length>parseInt(this.max)&&Yn(t,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)Yn(this.cache,e,this.keys)},mounted:function(){var e=this;this.cacheVNode(),this.$watch("include",(function(t){Kn(e,(function(e){return Gn(t,e)}))})),this.$watch("exclude",(function(t){Kn(e,(function(e){return!Gn(t,e)}))}))},updated:function(){this.cacheVNode()},render:function(){var e=this.$slots.default,t=kt(e),n=t&&t.componentOptions;if(n){var a=Wn(n),i=this.include,s=this.exclude;if(i&&(!a||!Gn(i,a))||s&&a&&Gn(s,a))return t;var r=this.cache,p=this.keys,u=null==t.key?n.Ctor.cid+(n.tag?"::".concat(n.tag):""):t.key;r[u]?(t.componentInstance=r[u].componentInstance,v(p,u),p.push(u)):(this.vnodeToCache=t,this.keyToCache=u),t.data.keepAlive=!0}return t||e&&e[0]}}};!function(e){var t={get:function(){return z}};Object.defineProperty(e,"config",t),e.util={warn:Rn,extend:_,mergeOptions:Fn,defineReactive:Le},e.set=Ee,e.delete=Re,e.nextTick=rn,e.observable=function(e){return _e(e),e},e.options=Object.create(null),F.forEach((function(t){e.options[t+"s"]=Object.create(null)})),e.options._base=e,_(e.options.components,Xn),function(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=x(arguments,1);return n.unshift(this),p(e.install)?e.install.apply(e,n):p(e)&&e.apply(null,n),t.push(e),this}}(e),function(e){e.mixin=function(e){return this.options=Fn(this.options,e),this}}(e),function(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,a=n.cid,i=e._Ctor||(e._Ctor={});if(i[a])return i[a];var s=Sn(e)||Sn(n.options),r=function(e){this._init(e)};return(r.prototype=Object.create(n.prototype)).constructor=r,r.cid=t++,r.options=Fn(n.options,e),r.super=n,r.options.props&&function(e){var t=e.options.props;for(var n in t)cn(e.prototype,"_props",n)}(r),r.options.computed&&function(e){var t=e.options.computed;for(var n in t)hn(e.prototype,n,t[n])}(r),r.extend=n.extend,r.mixin=n.mixin,r.use=n.use,F.forEach((function(e){r[e]=n[e]})),s&&(r.options.components[s]=r),r.superOptions=n.options,r.extendOptions=e,r.sealedOptions=_({},r.options),i[a]=r,r}}(e),function(e){F.forEach((function(t){e[t]=function(e,n){return n?("component"===t&&d(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&p(n)&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}}))}(e)}(jn),Object.defineProperty(jn.prototype,"$isServer",{get:ie}),Object.defineProperty(jn.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(jn,"FunctionalRenderContext",{value:Pn}),jn.version="2.7.14";var Qn=T("style,class"),ea=T("input,textarea,option,select,progress"),ta=function(e,t,n){return"value"===n&&ea(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},na=T("contenteditable,draggable,spellcheck"),aa=T("events,caret,typing,plaintext-only"),ia=T("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),sa="http://www.w3.org/1999/xlink",ra=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},pa=function(e){return ra(e)?e.slice(6,e.length):""},ua=function(e){return null==e||!1===e};function oa(e,t){return{staticClass:da(e.staticClass,t.staticClass),class:i(e.class)?[e.class,t.class]:t.class}}function da(e,t){return e?t?e+" "+t:e:t||""}function ya(e){return Array.isArray(e)?function(e){for(var t,n="",a=0,s=e.length;a<s;a++)i(t=ya(e[a]))&&""!==t&&(n&&(n+=" "),n+=t);return n}(e):u(e)?function(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}(e):"string"==typeof e?e:""}var la={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},ma=T("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),ca=T("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ta=function(e){return ma(e)||ca(e)};function fa(e){return ca(e)?"svg":"math"===e?"math":void 0}var ha=Object.create(null),va=T("text,number,password,search,email,tel,url");function wa(e){return"string"==typeof e?document.querySelector(e)||document.createElement("div"):e}var ba=Object.freeze({__proto__:null,createElement:function(e,t){var n=document.createElement(e);return"select"!==e||t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(e,t){return document.createElementNS(la[e],t)},createTextNode:function(e){return document.createTextNode(e)},createComment:function(e){return document.createComment(e)},insertBefore:function(e,t,n){e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},appendChild:function(e,t){e.appendChild(t)},parentNode:function(e){return e.parentNode},nextSibling:function(e){return e.nextSibling},tagName:function(e){return e.tagName},setTextContent:function(e,t){e.textContent=t},setStyleScope:function(e,t){e.setAttribute(t,"")}}),ka={create:function(e,t){Aa(t)},update:function(e,t){e.data.ref!==t.data.ref&&(Aa(e,!0),Aa(t))},destroy:function(e){Aa(e,!0)}};function Aa(e,n){var a=e.data.ref;if(i(a)){var s=e.context,r=e.componentInstance||e.elm,u=n?null:r,o=n?void 0:r;if(p(a))Wt(a,s,[u],s,"template ref function");else{var d=e.data.refInFor,y="string"==typeof a||"number"==typeof a,l=Ze(a),m=s.$refs;if(y||l)if(d){var c=y?m[a]:a.value;n?t(c)&&v(c,r):t(c)?c.includes(r)||c.push(r):y?(m[a]=[r],ga(s,a,m[a])):a.value=[r]}else if(y){if(n&&m[a]!==r)return;m[a]=o,ga(s,a,u)}else if(l){if(n&&a.value!==r)return;a.value=u}}}}function ga(e,t,n){var a=e._setupState;a&&b(a,t)&&(Ze(a[t])?a[t].value=n:a[t]=n)}var Pa=new ye("",{},[]),Ma=["create","activate","update","remove","destroy"];function Ia(e,t){return e.key===t.key&&e.asyncFactory===t.asyncFactory&&(e.tag===t.tag&&e.isComment===t.isComment&&i(e.data)===i(t.data)&&function(e,t){if("input"!==e.tag)return!0;var n,a=i(n=e.data)&&i(n=n.attrs)&&n.type,s=i(n=t.data)&&i(n=n.attrs)&&n.type;return a===s||va(a)&&va(s)}(e,t)||s(e.isAsyncPlaceholder)&&a(t.asyncFactory.error))}function Sa(e,t,n){var a,s,r={};for(a=t;a<=n;++a)i(s=e[a].key)&&(r[s]=a);return r}var xa={create:_a,update:_a,destroy:function(e){_a(e,Pa)}};function _a(e,t){(e.data.directives||t.data.directives)&&function(e,t){var n,a,i,s=e===Pa,r=t===Pa,p=Ea(e.data.directives,e.context),u=Ea(t.data.directives,t.context),o=[],d=[];for(n in u)a=p[n],i=u[n],a?(i.oldValue=a.value,i.oldArg=a.arg,Ba(i,"update",t,e),i.def&&i.def.componentUpdated&&d.push(i)):(Ba(i,"bind",t,e),i.def&&i.def.inserted&&o.push(i));if(o.length){var y=function(){for(var n=0;n<o.length;n++)Ba(o[n],"inserted",t,e)};s?ze(t,"insert",y):y()}if(d.length&&ze(t,"postpatch",(function(){for(var n=0;n<d.length;n++)Ba(d[n],"componentUpdated",t,e)})),!s)for(n in p)u[n]||Ba(p[n],"unbind",e,e,r)}(e,t)}var La=Object.create(null);function Ea(e,t){var n,a,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++){if((a=e[n]).modifiers||(a.modifiers=La),i[Ra(a)]=a,t._setupState&&t._setupState.__sfc){var s=a.def||Nn(t,"_setupState","v-"+a.name);a.def="function"==typeof s?{bind:s,update:s}:s}a.def=a.def||Nn(t.$options,"directives",a.name)}return i}function Ra(e){return e.rawName||"".concat(e.name,".").concat(Object.keys(e.modifiers||{}).join("."))}function Ba(e,t,n,a,i){var s=e.def&&e.def[t];if(s)try{s(n.elm,e,n,a,i)}catch(a){jt(a,n.context,"directive ".concat(e.name," ").concat(t," hook"))}}var Va=[ka,xa];function Ca(e,t){var n=t.componentOptions;if(!(i(n)&&!1===n.Ctor.options.inheritAttrs||a(e.data.attrs)&&a(t.data.attrs))){var r,p,u=t.elm,o=e.data.attrs||{},d=t.data.attrs||{};for(r in(i(d.__ob__)||s(d._v_attr_proxy))&&(d=t.data.attrs=_({},d)),d)p=d[r],o[r]!==p&&Za(u,r,p,t.data.pre);for(r in(K||J)&&d.value!==o.value&&Za(u,"value",d.value),o)a(d[r])&&(ra(r)?u.removeAttributeNS(sa,pa(r)):na(r)||u.removeAttribute(r))}}function Za(e,t,n,a){a||e.tagName.indexOf("-")>-1?Oa(e,t,n):ia(t)?ua(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):na(t)?e.setAttribute(t,function(e,t){return ua(t)||"false"===t?"false":"contenteditable"===e&&aa(t)?t:"true"}(t,n)):ra(t)?ua(n)?e.removeAttributeNS(sa,pa(t)):e.setAttributeNS(sa,t,n):Oa(e,t,n)}function Oa(e,t,n){if(ua(n))e.removeAttribute(t);else{if(K&&!Y&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){var a=function(t){t.stopImmediatePropagation(),e.removeEventListener("input",a)};e.addEventListener("input",a),e.__ieph=!0}e.setAttribute(t,n)}}var qa={create:Ca,update:Ca};function Fa(e,t){var n=t.elm,s=t.data,r=e.data;if(!(a(s.staticClass)&&a(s.class)&&(a(r)||a(r.staticClass)&&a(r.class)))){var p=function(e){for(var t=e.data,n=e,a=e;i(a.componentInstance);)(a=a.componentInstance._vnode)&&a.data&&(t=oa(a.data,t));for(;i(n=n.parent);)n&&n.data&&(t=oa(t,n.data));return s=t.staticClass,r=t.class,i(s)||i(r)?da(s,ya(r)):"";var s,r}(t),u=n._transitionClasses;i(u)&&(p=da(p,ya(u))),p!==n._prevClass&&(n.setAttribute("class",p),n._prevClass=p)}}var Na,za,$a,Da,Ha,Ua,ja={create:Fa,update:Fa},Wa=/[\w).+\-_$\]]/;function Ga(e){var t,n,a,i,s,r=!1,p=!1,u=!1,o=!1,d=0,y=0,l=0,m=0;for(a=0;a<e.length;a++)if(n=t,t=e.charCodeAt(a),r)39===t&&92!==n&&(r=!1);else if(p)34===t&&92!==n&&(p=!1);else if(u)96===t&&92!==n&&(u=!1);else if(o)47===t&&92!==n&&(o=!1);else if(124!==t||124===e.charCodeAt(a+1)||124===e.charCodeAt(a-1)||d||y||l){switch(t){case 34:p=!0;break;case 39:r=!0;break;case 96:u=!0;break;case 40:l++;break;case 41:l--;break;case 91:y++;break;case 93:y--;break;case 123:d++;break;case 125:d--}if(47===t){for(var c=a-1,T=void 0;c>=0&&" "===(T=e.charAt(c));c--);T&&Wa.test(T)||(o=!0)}}else void 0===i?(m=a+1,i=e.slice(0,a).trim()):f();function f(){(s||(s=[])).push(e.slice(m,a).trim()),m=a+1}if(void 0===i?i=e.slice(0,a).trim():0!==m&&f(),s)for(a=0;a<s.length;a++)i=Ka(i,s[a]);return i}function Ka(e,t){var n=t.indexOf("(");if(n<0)return'_f("'.concat(t,'")(').concat(e,")");var a=t.slice(0,n),i=t.slice(n+1);return'_f("'.concat(a,'")(').concat(e).concat(")"!==i?","+i:i)}function Ya(e,t){console.error("[Vue compiler]: ".concat(e))}function Ja(e,t){return e?e.map((function(e){return e[t]})).filter((function(e){return e})):[]}function Xa(e,t,n,a,i){(e.props||(e.props=[])).push(pi({name:t,value:n,dynamic:i},a)),e.plain=!1}function Qa(e,t,n,a,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(pi({name:t,value:n,dynamic:i},a)),e.plain=!1}function ei(e,t,n,a){e.attrsMap[t]=n,e.attrsList.push(pi({name:t,value:n},a))}function ti(e,t,n,a,i,s,r,p){(e.directives||(e.directives=[])).push(pi({name:t,rawName:n,value:a,arg:i,isDynamicArg:s,modifiers:r},p)),e.plain=!1}function ni(e,t,n){return n?"_p(".concat(t,',"').concat(e,'")'):e+t}function ai(t,n,a,i,s,r,p,u){var o;(i=i||e).right?u?n="(".concat(n,")==='click'?'contextmenu':(").concat(n,")"):"click"===n&&(n="contextmenu",delete i.right):i.middle&&(u?n="(".concat(n,")==='click'?'mouseup':(").concat(n,")"):"click"===n&&(n="mouseup")),i.capture&&(delete i.capture,n=ni("!",n,u)),i.once&&(delete i.once,n=ni("~",n,u)),i.passive&&(delete i.passive,n=ni("&",n,u)),i.native?(delete i.native,o=t.nativeEvents||(t.nativeEvents={})):o=t.events||(t.events={});var d=pi({value:a.trim(),dynamic:u},p);i!==e&&(d.modifiers=i);var y=o[n];Array.isArray(y)?s?y.unshift(d):y.push(d):o[n]=y?s?[d,y]:[y,d]:d,t.plain=!1}function ii(e,t,n){var a=si(e,":"+t)||si(e,"v-bind:"+t);if(null!=a)return Ga(a);if(!1!==n){var i=si(e,t);if(null!=i)return JSON.stringify(i)}}function si(e,t,n){var a;if(null!=(a=e.attrsMap[t]))for(var i=e.attrsList,s=0,r=i.length;s<r;s++)if(i[s].name===t){i.splice(s,1);break}return n&&delete e.attrsMap[t],a}function ri(e,t){for(var n=e.attrsList,a=0,i=n.length;a<i;a++){var s=n[a];if(t.test(s.name))return n.splice(a,1),s}}function pi(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function ui(e,t,n){var a=n||{},i=a.number,s="$$v",r=s;a.trim&&(r="(typeof ".concat(s," === 'string'")+"? ".concat(s,".trim()")+": ".concat(s,")")),i&&(r="_n(".concat(r,")"));var p=oi(t,r);e.model={value:"(".concat(t,")"),expression:JSON.stringify(t),callback:"function (".concat(s,") {").concat(p,"}")}}function oi(e,t){var n=function(e){if(e=e.trim(),Na=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<Na-1)return(Da=e.lastIndexOf("."))>-1?{exp:e.slice(0,Da),key:'"'+e.slice(Da+1)+'"'}:{exp:e,key:null};for(za=e,Da=Ha=Ua=0;!yi();)li($a=di())?ci($a):91===$a&&mi($a);return{exp:e.slice(0,Ha),key:e.slice(Ha+1,Ua)}}(e);return null===n.key?"".concat(e,"=").concat(t):"$set(".concat(n.exp,", ").concat(n.key,", ").concat(t,")")}function di(){return za.charCodeAt(++Da)}function yi(){return Da>=Na}function li(e){return 34===e||39===e}function mi(e){var t=1;for(Ha=Da;!yi();)if(li(e=di()))ci(e);else if(91===e&&t++,93===e&&t--,0===t){Ua=Da;break}}function ci(e){for(var t=e;!yi()&&(e=di())!==t;);}var Ti,fi="__r",hi="__c";function vi(e,t,n){var a=Ti;return function i(){var s=t.apply(null,arguments);null!==s&&ki(e,i,n,a)}}var wi=Jt&&!(ee&&Number(ee[1])<=53);function bi(e,t,n,a){if(wi){var i=qt,s=t;t=s._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||e.timeStamp<=0||e.target.ownerDocument!==document)return s.apply(this,arguments)}}Ti.addEventListener(e,t,ne?{capture:n,passive:a}:n)}function ki(e,t,n,a){(a||Ti).removeEventListener(e,t._wrapper||t,n)}function Ai(e,t){if(!a(e.data.on)||!a(t.data.on)){var n=t.data.on||{},s=e.data.on||{};Ti=t.elm||e.elm,function(e){if(i(e[fi])){var t=K?"change":"input";e[t]=[].concat(e[fi],e[t]||[]),delete e[fi]}i(e[hi])&&(e.change=[].concat(e[hi],e.change||[]),delete e[hi])}(n),Ne(n,s,bi,ki,vi,t.context),Ti=void 0}}var gi,Pi={create:Ai,update:Ai,destroy:function(e){return Ai(e,Pa)}};function Mi(e,t){if(!a(e.data.domProps)||!a(t.data.domProps)){var n,r,p=t.elm,u=e.data.domProps||{},o=t.data.domProps||{};for(n in(i(o.__ob__)||s(o._v_attr_proxy))&&(o=t.data.domProps=_({},o)),u)n in o||(p[n]="");for(n in o){if(r=o[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===u[n])continue;1===p.childNodes.length&&p.removeChild(p.childNodes[0])}if("value"===n&&"PROGRESS"!==p.tagName){p._value=r;var d=a(r)?"":String(r);Ii(p,d)&&(p.value=d)}else if("innerHTML"===n&&ca(p.tagName)&&a(p.innerHTML)){(gi=gi||document.createElement("div")).innerHTML="<svg>".concat(r,"</svg>");for(var y=gi.firstChild;p.firstChild;)p.removeChild(p.firstChild);for(;y.firstChild;)p.appendChild(y.firstChild)}else if(r!==u[n])try{p[n]=r}catch(e){}}}}function Ii(e,t){return!e.composing&&("OPTION"===e.tagName||function(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}(e,t)||function(e,t){var n=e.value,a=e._vModifiers;if(i(a)){if(a.number)return c(n)!==c(t);if(a.trim)return n.trim()!==t.trim()}return n!==t}(e,t))}var Si={create:Mi,update:Mi},xi=k((function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach((function(e){if(e){var a=e.split(n);a.length>1&&(t[a[0].trim()]=a[1].trim())}})),t}));function _i(e){var t=Li(e.style);return e.staticStyle?_(e.staticStyle,t):t}function Li(e){return Array.isArray(e)?L(e):"string"==typeof e?xi(e):e}var Ei,Ri=/^--/,Bi=/\s*!important$/,Vi=function(e,t,n){if(Ri.test(t))e.style.setProperty(t,n);else if(Bi.test(n))e.style.setProperty(I(t),n.replace(Bi,""),"important");else{var a=Zi(t);if(Array.isArray(n))for(var i=0,s=n.length;i<s;i++)e.style[a]=n[i];else e.style[a]=n}},Ci=["Webkit","Moz","ms"],Zi=k((function(e){if(Ei=Ei||document.createElement("div").style,"filter"!==(e=g(e))&&e in Ei)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<Ci.length;n++){var a=Ci[n]+t;if(a in Ei)return a}}));function Oi(e,t){var n=t.data,s=e.data;if(!(a(n.staticStyle)&&a(n.style)&&a(s.staticStyle)&&a(s.style))){var r,p,u=t.elm,o=s.staticStyle,d=s.normalizedStyle||s.style||{},y=o||d,l=Li(t.data.style)||{};t.data.normalizedStyle=i(l.__ob__)?_({},l):l;var m=function(e,t){for(var n,a={},i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=_i(i.data))&&_(a,n);(n=_i(e.data))&&_(a,n);for(var s=e;s=s.parent;)s.data&&(n=_i(s.data))&&_(a,n);return a}(t);for(p in y)a(m[p])&&Vi(u,p,"");for(p in m)(r=m[p])!==y[p]&&Vi(u,p,null==r?"":r)}}var qi={create:Oi,update:Oi},Fi=/\s+/;function Ni(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Fi).forEach((function(t){return e.classList.add(t)})):e.classList.add(t);else{var n=" ".concat(e.getAttribute("class")||""," ");n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function zi(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(Fi).forEach((function(t){return e.classList.remove(t)})):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" ".concat(e.getAttribute("class")||""," "),a=" "+t+" ";n.indexOf(a)>=0;)n=n.replace(a," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function $i(e){if(e){if("object"==typeof e){var t={};return!1!==e.css&&_(t,Di(e.name||"v")),_(t,e),t}return"string"==typeof e?Di(e):void 0}}var Di=k((function(e){return{enterClass:"".concat(e,"-enter"),enterToClass:"".concat(e,"-enter-to"),enterActiveClass:"".concat(e,"-enter-active"),leaveClass:"".concat(e,"-leave"),leaveToClass:"".concat(e,"-leave-to"),leaveActiveClass:"".concat(e,"-leave-active")}})),Hi=W&&!Y,Ui="transition",ji="animation",Wi="transition",Gi="transitionend",Ki="animation",Yi="animationend";Hi&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Wi="WebkitTransition",Gi="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Ki="WebkitAnimation",Yi="webkitAnimationEnd"));var Ji=W?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function Xi(e){Ji((function(){Ji(e)}))}function Qi(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),Ni(e,t))}function es(e,t){e._transitionClasses&&v(e._transitionClasses,t),zi(e,t)}function ts(e,t,n){var a=as(e,t),i=a.type,s=a.timeout,r=a.propCount;if(!i)return n();var p=i===Ui?Gi:Yi,u=0,o=function(){e.removeEventListener(p,d),n()},d=function(t){t.target===e&&++u>=r&&o()};setTimeout((function(){u<r&&o()}),s+1),e.addEventListener(p,d)}var ns=/\b(transform|all)(,|$)/;function as(e,t){var n,a=window.getComputedStyle(e),i=(a[Wi+"Delay"]||"").split(", "),s=(a[Wi+"Duration"]||"").split(", "),r=is(i,s),p=(a[Ki+"Delay"]||"").split(", "),u=(a[Ki+"Duration"]||"").split(", "),o=is(p,u),d=0,y=0;return t===Ui?r>0&&(n=Ui,d=r,y=s.length):t===ji?o>0&&(n=ji,d=o,y=u.length):y=(n=(d=Math.max(r,o))>0?r>o?Ui:ji:null)?n===Ui?s.length:u.length:0,{type:n,timeout:d,propCount:y,hasTransform:n===Ui&&ns.test(a[Wi+"Property"])}}function is(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map((function(t,n){return ss(t)+ss(e[n])})))}function ss(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function rs(e,t){var n=e.elm;i(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var s=$i(e.data.transition);if(!a(s)&&!i(n._enterCb)&&1===n.nodeType){for(var r=s.css,o=s.type,d=s.enterClass,y=s.enterToClass,l=s.enterActiveClass,m=s.appearClass,T=s.appearToClass,f=s.appearActiveClass,h=s.beforeEnter,v=s.enter,w=s.afterEnter,b=s.enterCancelled,k=s.beforeAppear,A=s.appear,g=s.afterAppear,P=s.appearCancelled,M=s.duration,I=It,S=It.$vnode;S&&S.parent;)I=S.context,S=S.parent;var x=!I._isMounted||!e.isRootInsert;if(!x||A||""===A){var _=x&&m?m:d,L=x&&f?f:l,E=x&&T?T:y,R=x&&k||h,B=x&&p(A)?A:v,V=x&&g||w,C=x&&P||b,O=c(u(M)?M.enter:M),q=!1!==r&&!Y,F=os(B),N=n._enterCb=Z((function(){q&&(es(n,E),es(n,L)),N.cancelled?(q&&es(n,_),C&&C(n)):V&&V(n),n._enterCb=null}));e.data.show||ze(e,"insert",(function(){var t=n.parentNode,a=t&&t._pending&&t._pending[e.key];a&&a.tag===e.tag&&a.elm._leaveCb&&a.elm._leaveCb(),B&&B(n,N)})),R&&R(n),q&&(Qi(n,_),Qi(n,L),Xi((function(){es(n,_),N.cancelled||(Qi(n,E),F||(us(O)?setTimeout(N,O):ts(n,o,N)))}))),e.data.show&&(t&&t(),B&&B(n,N)),q||F||N()}}}function ps(e,t){var n=e.elm;i(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var s=$i(e.data.transition);if(a(s)||1!==n.nodeType)return t();if(!i(n._leaveCb)){var r=s.css,p=s.type,o=s.leaveClass,d=s.leaveToClass,y=s.leaveActiveClass,l=s.beforeLeave,m=s.leave,T=s.afterLeave,f=s.leaveCancelled,h=s.delayLeave,v=s.duration,w=!1!==r&&!Y,b=os(m),k=c(u(v)?v.leave:v),A=n._leaveCb=Z((function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),w&&(es(n,d),es(n,y)),A.cancelled?(w&&es(n,o),f&&f(n)):(t(),T&&T(n)),n._leaveCb=null}));h?h(g):g()}function g(){A.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),l&&l(n),w&&(Qi(n,o),Qi(n,y),Xi((function(){es(n,o),A.cancelled||(Qi(n,d),b||(us(k)?setTimeout(A,k):ts(n,p,A)))}))),m&&m(n,A),w||b||A())}}function us(e){return"number"==typeof e&&!isNaN(e)}function os(e){if(a(e))return!1;var t=e.fns;return i(t)?os(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function ds(e,t){!0!==t.data.show&&rs(t)}var ys=function(e){var n,p,u={},o=e.modules,d=e.nodeOps;for(n=0;n<Ma.length;++n)for(u[Ma[n]]=[],p=0;p<o.length;++p)i(o[p][Ma[n]])&&u[Ma[n]].push(o[p][Ma[n]]);function y(e){var t=d.parentNode(e);i(t)&&d.removeChild(t,e)}function l(e,t,n,a,r,p,o){if(i(e.elm)&&i(p)&&(e=p[o]=ce(e)),e.isRootInsert=!r,!function(e,t,n,a){var r=e.data;if(i(r)){var p=i(e.componentInstance)&&r.keepAlive;if(i(r=r.hook)&&i(r=r.init)&&r(e,!1),i(e.componentInstance))return m(e,t),c(n,e.elm,a),s(p)&&function(e,t,n,a){for(var s,r=e;r.componentInstance;)if(i(s=(r=r.componentInstance._vnode).data)&&i(s=s.transition)){for(s=0;s<u.activate.length;++s)u.activate[s](Pa,r);t.push(r);break}c(n,e.elm,a)}(e,t,n,a),!0}}(e,t,n,a)){var y=e.data,l=e.children,T=e.tag;i(T)?(e.elm=e.ns?d.createElementNS(e.ns,T):d.createElement(T,e),w(e),f(e,l,t),i(y)&&v(e,t),c(n,e.elm,a)):s(e.isComment)?(e.elm=d.createComment(e.text),c(n,e.elm,a)):(e.elm=d.createTextNode(e.text),c(n,e.elm,a))}}function m(e,t){i(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,h(e)?(v(e,t),w(e)):(Aa(e),t.push(e))}function c(e,t,n){i(e)&&(i(n)?d.parentNode(n)===e&&d.insertBefore(e,t,n):d.appendChild(e,t))}function f(e,n,a){if(t(n))for(var i=0;i<n.length;++i)l(n[i],a,e.elm,null,!0,n,i);else r(e.text)&&d.appendChild(e.elm,d.createTextNode(String(e.text)))}function h(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return i(e.tag)}function v(e,t){for(var a=0;a<u.create.length;++a)u.create[a](Pa,e);i(n=e.data.hook)&&(i(n.create)&&n.create(Pa,e),i(n.insert)&&t.push(e))}function w(e){var t;if(i(t=e.fnScopeId))d.setStyleScope(e.elm,t);else for(var n=e;n;)i(t=n.context)&&i(t=t.$options._scopeId)&&d.setStyleScope(e.elm,t),n=n.parent;i(t=It)&&t!==e.context&&t!==e.fnContext&&i(t=t.$options._scopeId)&&d.setStyleScope(e.elm,t)}function b(e,t,n,a,i,s){for(;a<=i;++a)l(n[a],s,e,t,!1,n,a)}function k(e){var t,n,a=e.data;if(i(a))for(i(t=a.hook)&&i(t=t.destroy)&&t(e),t=0;t<u.destroy.length;++t)u.destroy[t](e);if(i(t=e.children))for(n=0;n<e.children.length;++n)k(e.children[n])}function A(e,t,n){for(;t<=n;++t){var a=e[t];i(a)&&(i(a.tag)?(g(a),k(a)):y(a.elm))}}function g(e,t){if(i(t)||i(e.data)){var n,a=u.remove.length+1;for(i(t)?t.listeners+=a:t=function(e,t){function n(){0==--n.listeners&&y(e)}return n.listeners=t,n}(e.elm,a),i(n=e.componentInstance)&&i(n=n._vnode)&&i(n.data)&&g(n,t),n=0;n<u.remove.length;++n)u.remove[n](e,t);i(n=e.data.hook)&&i(n=n.remove)?n(e,t):t()}else y(e.elm)}function P(e,t,n,a){for(var s=n;s<a;s++){var r=t[s];if(i(r)&&Ia(e,r))return s}}function M(e,t,n,r,p,o){if(e!==t){i(t.elm)&&i(r)&&(t=r[p]=ce(t));var y=t.elm=e.elm;if(s(e.isAsyncPlaceholder))i(t.asyncFactory.resolved)?x(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(s(t.isStatic)&&s(e.isStatic)&&t.key===e.key&&(s(t.isCloned)||s(t.isOnce)))t.componentInstance=e.componentInstance;else{var m,c=t.data;i(c)&&i(m=c.hook)&&i(m=m.prepatch)&&m(e,t);var T=e.children,f=t.children;if(i(c)&&h(t)){for(m=0;m<u.update.length;++m)u.update[m](e,t);i(m=c.hook)&&i(m=m.update)&&m(e,t)}a(t.text)?i(T)&&i(f)?T!==f&&function(e,t,n,s,r){for(var p,u,o,y=0,m=0,c=t.length-1,T=t[0],f=t[c],h=n.length-1,v=n[0],w=n[h],k=!r;y<=c&&m<=h;)a(T)?T=t[++y]:a(f)?f=t[--c]:Ia(T,v)?(M(T,v,s,n,m),T=t[++y],v=n[++m]):Ia(f,w)?(M(f,w,s,n,h),f=t[--c],w=n[--h]):Ia(T,w)?(M(T,w,s,n,h),k&&d.insertBefore(e,T.elm,d.nextSibling(f.elm)),T=t[++y],w=n[--h]):Ia(f,v)?(M(f,v,s,n,m),k&&d.insertBefore(e,f.elm,T.elm),f=t[--c],v=n[++m]):(a(p)&&(p=Sa(t,y,c)),a(u=i(v.key)?p[v.key]:P(v,t,y,c))?l(v,s,e,T.elm,!1,n,m):Ia(o=t[u],v)?(M(o,v,s,n,m),t[u]=void 0,k&&d.insertBefore(e,o.elm,T.elm)):l(v,s,e,T.elm,!1,n,m),v=n[++m]);y>c?b(e,a(n[h+1])?null:n[h+1].elm,n,m,h,s):m>h&&A(t,y,c)}(y,T,f,n,o):i(f)?(i(e.text)&&d.setTextContent(y,""),b(y,null,f,0,f.length-1,n)):i(T)?A(T,0,T.length-1):i(e.text)&&d.setTextContent(y,""):e.text!==t.text&&d.setTextContent(y,t.text),i(c)&&i(m=c.hook)&&i(m=m.postpatch)&&m(e,t)}}}function I(e,t,n){if(s(n)&&i(e.parent))e.parent.data.pendingInsert=t;else for(var a=0;a<t.length;++a)t[a].data.hook.insert(t[a])}var S=T("attrs,class,staticClass,staticStyle,key");function x(e,t,n,a){var r,p=t.tag,u=t.data,o=t.children;if(a=a||u&&u.pre,t.elm=e,s(t.isComment)&&i(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(i(u)&&(i(r=u.hook)&&i(r=r.init)&&r(t,!0),i(r=t.componentInstance)))return m(t,n),!0;if(i(p)){if(i(o))if(e.hasChildNodes())if(i(r=u)&&i(r=r.domProps)&&i(r=r.innerHTML)){if(r!==e.innerHTML)return!1}else{for(var d=!0,y=e.firstChild,l=0;l<o.length;l++){if(!y||!x(y,o[l],n,a)){d=!1;break}y=y.nextSibling}if(!d||y)return!1}else f(t,o,n);if(i(u)){var c=!1;for(var T in u)if(!S(T)){c=!0,v(t,n);break}!c&&u.class&&on(u.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,r){if(!a(t)){var p,o=!1,y=[];if(a(e))o=!0,l(t,y);else{var m=i(e.nodeType);if(!m&&Ia(e,t))M(e,t,y,null,null,r);else{if(m){if(1===e.nodeType&&e.hasAttribute(q)&&(e.removeAttribute(q),n=!0),s(n)&&x(e,t,y))return I(t,y,!0),e;p=e,e=new ye(d.tagName(p).toLowerCase(),{},[],void 0,p)}var c=e.elm,T=d.parentNode(c);if(l(t,y,c._leaveCb?null:T,d.nextSibling(c)),i(t.parent))for(var f=t.parent,v=h(t);f;){for(var w=0;w<u.destroy.length;++w)u.destroy[w](f);if(f.elm=t.elm,v){for(var b=0;b<u.create.length;++b)u.create[b](Pa,f);var g=f.data.hook.insert;if(g.merged)for(var P=1;P<g.fns.length;P++)g.fns[P]()}else Aa(f);f=f.parent}i(T)?A([e],0,0):i(e.tag)&&k(e)}}return I(t,y,o),t.elm}i(e)&&k(e)}}({nodeOps:ba,modules:[qa,ja,Pi,Si,qi,W?{create:ds,activate:ds,remove:function(e,t){!0!==e.data.show?ps(e,t):t()}}:{}].concat(Va)});Y&&document.addEventListener("selectionchange",(function(){var e=document.activeElement;e&&e.vmodel&&ws(e,"input")}));var ls={inserted:function(e,t,n,a){"select"===n.tag?(a.elm&&!a.elm._vOptions?ze(n,"postpatch",(function(){ls.componentUpdated(e,t,n)})):ms(e,t,n.context),e._vOptions=[].map.call(e.options,fs)):("textarea"===n.tag||va(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",hs),e.addEventListener("compositionend",vs),e.addEventListener("change",vs),Y&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){ms(e,t,n.context);var a=e._vOptions,i=e._vOptions=[].map.call(e.options,fs);i.some((function(e,t){return!V(e,a[t])}))&&(e.multiple?t.value.some((function(e){return Ts(e,i)})):t.value!==t.oldValue&&Ts(t.value,i))&&ws(e,"change")}}};function ms(e,t,n){cs(e,t),(K||J)&&setTimeout((function(){cs(e,t)}),0)}function cs(e,t,n){var a=t.value,i=e.multiple;if(!i||Array.isArray(a)){for(var s,r,p=0,u=e.options.length;p<u;p++)if(r=e.options[p],i)s=C(a,fs(r))>-1,r.selected!==s&&(r.selected=s);else if(V(fs(r),a))return void(e.selectedIndex!==p&&(e.selectedIndex=p));i||(e.selectedIndex=-1)}}function Ts(e,t){return t.every((function(t){return!V(t,e)}))}function fs(e){return"_value"in e?e._value:e.value}function hs(e){e.target.composing=!0}function vs(e){e.target.composing&&(e.target.composing=!1,ws(e.target,"input"))}function ws(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function bs(e){return!e.componentInstance||e.data&&e.data.transition?e:bs(e.componentInstance._vnode)}var ks={model:ls,show:{bind:function(e,t,n){var a=t.value,i=(n=bs(n)).data&&n.data.transition,s=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;a&&i?(n.data.show=!0,rs(n,(function(){e.style.display=s}))):e.style.display=a?s:"none"},update:function(e,t,n){var a=t.value;!a!=!t.oldValue&&((n=bs(n)).data&&n.data.transition?(n.data.show=!0,a?rs(n,(function(){e.style.display=e.__vOriginalDisplay})):ps(n,(function(){e.style.display="none"}))):e.style.display=a?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,a,i){i||(e.style.display=e.__vOriginalDisplay)}}},As={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function gs(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?gs(kt(t.children)):e}function Ps(e){var t={},n=e.$options;for(var a in n.propsData)t[a]=e[a];var i=n._parentListeners;for(var a in i)t[g(a)]=i[a];return t}function Ms(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}var Is=function(e){return e.tag||yt(e)},Ss=function(e){return"show"===e.name},xs={name:"transition",props:As,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(Is)).length){var a=this.mode,i=n[0];if(function(e){for(;e=e.parent;)if(e.data.transition)return!0}(this.$vnode))return i;var s=gs(i);if(!s)return i;if(this._leaving)return Ms(e,i);var p="__transition-".concat(this._uid,"-");s.key=null==s.key?s.isComment?p+"comment":p+s.tag:r(s.key)?0===String(s.key).indexOf(p)?s.key:p+s.key:s.key;var u=(s.data||(s.data={})).transition=Ps(this),o=this._vnode,d=gs(o);if(s.data.directives&&s.data.directives.some(Ss)&&(s.data.show=!0),d&&d.data&&!function(e,t){return t.key===e.key&&t.tag===e.tag}(s,d)&&!yt(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var y=d.data.transition=_({},u);if("out-in"===a)return this._leaving=!0,ze(y,"afterLeave",(function(){t._leaving=!1,t.$forceUpdate()})),Ms(e,i);if("in-out"===a){if(yt(s))return o;var l,m=function(){l()};ze(u,"afterEnter",m),ze(u,"enterCancelled",m),ze(y,"delayLeave",(function(e){l=e}))}}return i}}},_s=_({tag:String,moveClass:String},As);delete _s.mode;var Ls={props:_s,beforeMount:function(){var e=this,t=this._update;this._update=function(n,a){var i=St(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,a)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),a=this.prevChildren=this.children,i=this.$slots.default||[],s=this.children=[],r=Ps(this),p=0;p<i.length;p++)(d=i[p]).tag&&null!=d.key&&0!==String(d.key).indexOf("__vlist")&&(s.push(d),n[d.key]=d,(d.data||(d.data={})).transition=r);if(a){var u=[],o=[];for(p=0;p<a.length;p++){var d;(d=a[p]).data.transition=r,d.data.pos=d.elm.getBoundingClientRect(),n[d.key]?u.push(d):o.push(d)}this.kept=e(t,null,u),this.removed=o}return e(t,null,s)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(Es),e.forEach(Rs),e.forEach(Bs),this._reflow=document.body.offsetHeight,e.forEach((function(e){if(e.data.moved){var n=e.elm,a=n.style;Qi(n,t),a.transform=a.WebkitTransform=a.transitionDuration="",n.addEventListener(Gi,n._moveCb=function e(a){a&&a.target!==n||a&&!/transform$/.test(a.propertyName)||(n.removeEventListener(Gi,e),n._moveCb=null,es(n,t))})}})))},methods:{hasMove:function(e,t){if(!Hi)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach((function(e){zi(n,e)})),Ni(n,t),n.style.display="none",this.$el.appendChild(n);var a=as(n);return this.$el.removeChild(n),this._hasMove=a.hasTransform}}};function Es(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function Rs(e){e.data.newPos=e.elm.getBoundingClientRect()}function Bs(e){var t=e.data.pos,n=e.data.newPos,a=t.left-n.left,i=t.top-n.top;if(a||i){e.data.moved=!0;var s=e.elm.style;s.transform=s.WebkitTransform="translate(".concat(a,"px,").concat(i,"px)"),s.transitionDuration="0s"}}var Vs={Transition:xs,TransitionGroup:Ls};jn.config.mustUseProp=ta,jn.config.isReservedTag=Ta,jn.config.isReservedAttr=Qn,jn.config.getTagNamespace=fa,jn.config.isUnknownElement=function(e){if(!W)return!0;if(Ta(e))return!1;if(e=e.toLowerCase(),null!=ha[e])return ha[e];var t=document.createElement(e);return e.indexOf("-")>-1?ha[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:ha[e]=/HTMLUnknownElement/.test(t.toString())},_(jn.options.directives,ks),_(jn.options.components,Vs),jn.prototype.__patch__=W?ys:E,jn.prototype.$mount=function(e,t){return function(e,t,n){var a;e.$el=t,e.$options.render||(e.$options.render=le),Et(e,"beforeMount"),a=function(){e._update(e._render(),n)},new ln(e,a,E,{before:function(){e._isMounted&&!e._isDestroyed&&Et(e,"beforeUpdate")}},!0),n=!1;var i=e._preWatchers;if(i)for(var s=0;s<i.length;s++)i[s].run();return null==e.$vnode&&(e._isMounted=!0,Et(e,"mounted")),e}(this,e=e&&W?wa(e):void 0,t)},W&&setTimeout((function(){z.devtools&&se&&se.emit("init",jn)}),0);var Cs,Zs=/\{\{((?:.|\r?\n)+?)\}\}/g,Os=/[-.*+?^${}()|[\]\/\\]/g,qs=k((function(e){var t=e[0].replace(Os,"\\$&"),n=e[1].replace(Os,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")})),Fs={staticKeys:["staticClass"],transformNode:function(e,t){t.warn;var n=si(e,"class");n&&(e.staticClass=JSON.stringify(n.replace(/\s+/g," ").trim()));var a=ii(e,"class",!1);a&&(e.classBinding=a)},genData:function(e){var t="";return e.staticClass&&(t+="staticClass:".concat(e.staticClass,",")),e.classBinding&&(t+="class:".concat(e.classBinding,",")),t}},Ns={staticKeys:["staticStyle"],transformNode:function(e,t){t.warn;var n=si(e,"style");n&&(e.staticStyle=JSON.stringify(xi(n)));var a=ii(e,"style",!1);a&&(e.styleBinding=a)},genData:function(e){var t="";return e.staticStyle&&(t+="staticStyle:".concat(e.staticStyle,",")),e.styleBinding&&(t+="style:(".concat(e.styleBinding,"),")),t}},zs=T("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),$s=T("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),Ds=T("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Hs=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Us=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,js="[a-zA-Z_][\\-\\.0-9_a-zA-Z".concat($.source,"]*"),Ws="((?:".concat(js,"\\:)?").concat(js,")"),Gs=new RegExp("^<".concat(Ws)),Ks=/^\s*(\/?)>/,Ys=new RegExp("^<\\/".concat(Ws,"[^>]*>")),Js=/^<!DOCTYPE [^>]+>/i,Xs=/^<!\--/,Qs=/^<!\[/,er=T("script,style,textarea",!0),tr={},nr={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},ar=/&(?:lt|gt|quot|amp|#39);/g,ir=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,sr=T("pre,textarea",!0),rr=function(e,t){return e&&sr(e)&&"\n"===t[0]};function pr(e,t){var n=t?ir:ar;return e.replace(n,(function(e){return nr[e]}))}var ur,or,dr,yr,lr,mr,cr,Tr,fr=/^@|^v-on:/,hr=/^v-|^@|^:|^#/,vr=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,wr=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,br=/^\(|\)$/g,kr=/^\[.*\]$/,Ar=/:(.*)$/,gr=/^:|^\.|^v-bind:/,Pr=/\.[^.\]]+(?=[^\]]*$)/g,Mr=/^v-slot(:|$)|^#/,Ir=/[\r\n]/,Sr=/[ \f\t\r\n]+/g,xr=k((function(e){return(Cs=Cs||document.createElement("div")).innerHTML=e,Cs.textContent})),_r="_empty_";function Lr(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:Or(t),rawAttrsMap:{},parent:n,children:[]}}function Er(e,t){ur=t.warn||Ya,mr=t.isPreTag||R,cr=t.mustUseProp||R,Tr=t.getTagNamespace||R;t.isReservedTag;dr=Ja(t.modules,"transformNode"),yr=Ja(t.modules,"preTransformNode"),lr=Ja(t.modules,"postTransformNode"),or=t.delimiters;var n,a,i=[],s=!1!==t.preserveWhitespace,r=t.whitespace,p=!1,u=!1;function o(e){if(d(e),p||e.processed||(e=Rr(e,t)),i.length||e===n||n.if&&(e.elseif||e.else)&&Vr(n,{exp:e.elseif,block:e}),a&&!e.forbidden)if(e.elseif||e.else)r=e,o=function(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];e.pop()}}(a.children),o&&o.if&&Vr(o,{exp:r.elseif,block:r});else{if(e.slotScope){var s=e.slotTarget||'"default"';(a.scopedSlots||(a.scopedSlots={}))[s]=e}a.children.push(e),e.parent=a}var r,o;e.children=e.children.filter((function(e){return!e.slotScope})),d(e),e.pre&&(p=!1),mr(e.tag)&&(u=!1);for(var y=0;y<lr.length;y++)lr[y](e,t)}function d(e){if(!u)for(var t=void 0;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}return function(e,t){for(var n,a,i=[],s=t.expectHTML,r=t.isUnaryTag||R,p=t.canBeLeftOpenTag||R,u=0,o=function(){if(n=e,a&&er(a)){var o=0,l=a.toLowerCase(),m=tr[l]||(tr[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i"));A=e.replace(m,(function(e,n,a){return o=a.length,er(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),rr(l,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""})),u+=e.length-A.length,e=A,y(l,u-o,u)}else{var c=e.indexOf("<");if(0===c){if(Xs.test(e)){var T=e.indexOf("--\x3e");if(T>=0)return t.shouldKeepComment&&t.comment&&t.comment(e.substring(4,T),u,u+T+3),d(T+3),"continue"}if(Qs.test(e)){var f=e.indexOf("]>");if(f>=0)return d(f+2),"continue"}var h=e.match(Js);if(h)return d(h[0].length),"continue";var v=e.match(Ys);if(v){var w=u;return d(v[0].length),y(v[1],w,u),"continue"}var b=function(){var t=e.match(Gs);if(t){var n={tagName:t[1],attrs:[],start:u};d(t[0].length);for(var a=void 0,i=void 0;!(a=e.match(Ks))&&(i=e.match(Us)||e.match(Hs));)i.start=u,d(i[0].length),i.end=u,n.attrs.push(i);if(a)return n.unarySlash=a[1],d(a[0].length),n.end=u,n}}();if(b)return function(e){var n=e.tagName,u=e.unarySlash;s&&("p"===a&&Ds(n)&&y(a),p(n)&&a===n&&y(n));for(var o=r(n)||!!u,d=e.attrs.length,l=new Array(d),m=0;m<d;m++){var c=e.attrs[m],T=c[3]||c[4]||c[5]||"",f="a"===n&&"href"===c[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;l[m]={name:c[1],value:pr(T,f)}}o||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:l,start:e.start,end:e.end}),a=n),t.start&&t.start(n,l,o,e.start,e.end)}(b),rr(b.tagName,e)&&d(1),"continue"}var k=void 0,A=void 0,g=void 0;if(c>=0){for(A=e.slice(c);!(Ys.test(A)||Gs.test(A)||Xs.test(A)||Qs.test(A)||(g=A.indexOf("<",1))<0);)c+=g,A=e.slice(c);k=e.substring(0,c)}c<0&&(k=e),k&&d(k.length),t.chars&&k&&t.chars(k,u-k.length,u)}if(e===n)return t.chars&&t.chars(e),"break"};e&&"break"!==o(););function d(t){u+=t,e=e.substring(t)}function y(e,n,s){var r,p;if(null==n&&(n=u),null==s&&(s=u),e)for(p=e.toLowerCase(),r=i.length-1;r>=0&&i[r].lowerCasedTag!==p;r--);else r=0;if(r>=0){for(var o=i.length-1;o>=r;o--)t.end&&t.end(i[o].tag,n,s);i.length=r,a=r&&i[r-1].tag}else"br"===p?t.start&&t.start(e,[],!0,n,s):"p"===p&&(t.start&&t.start(e,[],!1,n,s),t.end&&t.end(e,n,s))}y()}(e,{warn:ur,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,s,r,d,y){var l=a&&a.ns||Tr(e);K&&"svg"===l&&(s=function(e){for(var t=[],n=0;n<e.length;n++){var a=e[n];qr.test(a.name)||(a.name=a.name.replace(Fr,""),t.push(a))}return t}(s));var m,c=Lr(e,s,a);l&&(c.ns=l),"style"!==(m=c).tag&&("script"!==m.tag||m.attrsMap.type&&"text/javascript"!==m.attrsMap.type)||ie()||(c.forbidden=!0);for(var T=0;T<yr.length;T++)c=yr[T](c,t)||c;p||(function(e){null!=si(e,"v-pre")&&(e.pre=!0)}(c),c.pre&&(p=!0)),mr(c.tag)&&(u=!0),p?function(e){var t=e.attrsList,n=t.length;if(n)for(var a=e.attrs=new Array(n),i=0;i<n;i++)a[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(a[i].start=t[i].start,a[i].end=t[i].end);else e.pre||(e.plain=!0)}(c):c.processed||(Br(c),function(e){var t=si(e,"v-if");if(t)e.if=t,Vr(e,{exp:t,block:e});else{null!=si(e,"v-else")&&(e.else=!0);var n=si(e,"v-else-if");n&&(e.elseif=n)}}(c),function(e){null!=si(e,"v-once")&&(e.once=!0)}(c)),n||(n=c),r?o(c):(a=c,i.push(c))},end:function(e,t,n){var s=i[i.length-1];i.length-=1,a=i[i.length-1],o(s)},chars:function(e,t,n){if(a&&(!K||"textarea"!==a.tag||a.attrsMap.placeholder!==e)){var i,o=a.children;if(e=u||e.trim()?"script"===(i=a).tag||"style"===i.tag?e:xr(e):o.length?r?"condense"===r&&Ir.test(e)?"":" ":s?" ":"":""){u||"condense"!==r||(e=e.replace(Sr," "));var d=void 0,y=void 0;!p&&" "!==e&&(d=function(e,t){var n=t?qs(t):Zs;if(n.test(e)){for(var a,i,s,r=[],p=[],u=n.lastIndex=0;a=n.exec(e);){(i=a.index)>u&&(p.push(s=e.slice(u,i)),r.push(JSON.stringify(s)));var o=Ga(a[1].trim());r.push("_s(".concat(o,")")),p.push({"@binding":o}),u=i+a[0].length}return u<e.length&&(p.push(s=e.slice(u)),r.push(JSON.stringify(s))),{expression:r.join("+"),tokens:p}}}(e,or))?y={type:2,expression:d.expression,tokens:d.tokens,text:e}:" "===e&&o.length&&" "===o[o.length-1].text||(y={type:3,text:e}),y&&o.push(y)}}},comment:function(e,t,n){if(a){var i={type:3,text:e,isComment:!0};a.children.push(i)}}}),n}function Rr(e,t){var n;!function(e){var t=ii(e,"key");t&&(e.key=t)}(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,function(e){var t=ii(e,"ref");t&&(e.ref=t,e.refInFor=function(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}(e))}(e),function(e){var t;"template"===e.tag?(t=si(e,"scope"),e.slotScope=t||si(e,"slot-scope")):(t=si(e,"slot-scope"))&&(e.slotScope=t);var n,a=ii(e,"slot");if(a&&(e.slotTarget='""'===a?'"default"':a,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||Qa(e,"slot",a,function(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}(e,"slot"))),"template"===e.tag){if(n=ri(e,Mr)){var i=Cr(n),s=i.name,r=i.dynamic;e.slotTarget=s,e.slotTargetDynamic=r,e.slotScope=n.value||_r}}else if(n=ri(e,Mr)){var p=e.scopedSlots||(e.scopedSlots={}),u=Cr(n),o=u.name,d=(r=u.dynamic,p[o]=Lr("template",[],e));d.slotTarget=o,d.slotTargetDynamic=r,d.children=e.children.filter((function(e){if(!e.slotScope)return e.parent=d,!0})),d.slotScope=n.value||_r,e.children=[],e.plain=!1}}(e),"slot"===(n=e).tag&&(n.slotName=ii(n,"name")),function(e){var t;(t=ii(e,"is"))&&(e.component=t),null!=si(e,"inline-template")&&(e.inlineTemplate=!0)}(e);for(var a=0;a<dr.length;a++)e=dr[a](e,t)||e;return function(e){var t,n,a,i,s,r,p,u,o=e.attrsList;for(t=0,n=o.length;t<n;t++)if(a=i=o[t].name,s=o[t].value,hr.test(a))if(e.hasBindings=!0,(r=Zr(a.replace(hr,"")))&&(a=a.replace(Pr,"")),gr.test(a))a=a.replace(gr,""),s=Ga(s),(u=kr.test(a))&&(a=a.slice(1,-1)),r&&(r.prop&&!u&&"innerHtml"===(a=g(a))&&(a="innerHTML"),r.camel&&!u&&(a=g(a)),r.sync&&(p=oi(s,"$event"),u?ai(e,'"update:"+('.concat(a,")"),p,null,!1,0,o[t],!0):(ai(e,"update:".concat(g(a)),p,null,!1,0,o[t]),I(a)!==g(a)&&ai(e,"update:".concat(I(a)),p,null,!1,0,o[t])))),r&&r.prop||!e.component&&cr(e.tag,e.attrsMap.type,a)?Xa(e,a,s,o[t],u):Qa(e,a,s,o[t],u);else if(fr.test(a))a=a.replace(fr,""),(u=kr.test(a))&&(a=a.slice(1,-1)),ai(e,a,s,r,!1,0,o[t],u);else{var d=(a=a.replace(hr,"")).match(Ar),y=d&&d[1];u=!1,y&&(a=a.slice(0,-(y.length+1)),kr.test(y)&&(y=y.slice(1,-1),u=!0)),ti(e,a,i,s,y,u,r,o[t])}else Qa(e,a,JSON.stringify(s),o[t]),!e.component&&"muted"===a&&cr(e.tag,e.attrsMap.type,a)&&Xa(e,a,"true",o[t])}(e),e}function Br(e){var t;if(t=si(e,"v-for")){var n=function(e){var t=e.match(vr);if(t){var n={};n.for=t[2].trim();var a=t[1].trim().replace(br,""),i=a.match(wr);return i?(n.alias=a.replace(wr,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=a,n}}(t);n&&_(e,n)}}function Vr(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function Cr(e){var t=e.name.replace(Mr,"");return t||"#"!==e.name[0]&&(t="default"),kr.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'.concat(t,'"'),dynamic:!1}}function Zr(e){var t=e.match(Pr);if(t){var n={};return t.forEach((function(e){n[e.slice(1)]=!0})),n}}function Or(e){for(var t={},n=0,a=e.length;n<a;n++)t[e[n].name]=e[n].value;return t}var qr=/^xmlns:NS\d+/,Fr=/^NS\d+:/;function Nr(e){return Lr(e.tag,e.attrsList.slice(),e.parent)}var zr,$r,Dr=[Fs,Ns,{preTransformNode:function(e,t){if("input"===e.tag){var n=e.attrsMap;if(!n["v-model"])return;var a=void 0;if((n[":type"]||n["v-bind:type"])&&(a=ii(e,"type")),n.type||a||!n["v-bind"]||(a="(".concat(n["v-bind"],").type")),a){var i=si(e,"v-if",!0),s=i?"&&(".concat(i,")"):"",r=null!=si(e,"v-else",!0),p=si(e,"v-else-if",!0),u=Nr(e);Br(u),ei(u,"type","checkbox"),Rr(u,t),u.processed=!0,u.if="(".concat(a,")==='checkbox'")+s,Vr(u,{exp:u.if,block:u});var o=Nr(e);si(o,"v-for",!0),ei(o,"type","radio"),Rr(o,t),Vr(u,{exp:"(".concat(a,")==='radio'")+s,block:o});var d=Nr(e);return si(d,"v-for",!0),ei(d,":type",a),Rr(d,t),Vr(u,{exp:i,block:d}),r?u.else=!0:p&&(u.elseif=p),u}}}}],Hr={expectHTML:!0,modules:Dr,directives:{model:function(e,t,n){var a=t.value,i=t.modifiers,s=e.tag,r=e.attrsMap.type;if(e.component)return ui(e,a,i),!1;if("select"===s)!function(e,t,n){var a=n&&n.number,i='Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;'+"return ".concat(a?"_n(val)":"val","})"),s="var $$selectedVal = ".concat(i,";");ai(e,"change",s="".concat(s," ").concat(oi(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]")),null,!0)}(e,a,i);else if("input"===s&&"checkbox"===r)!function(e,t,n){var a=n&&n.number,i=ii(e,"value")||"null",s=ii(e,"true-value")||"true",r=ii(e,"false-value")||"false";Xa(e,"checked","Array.isArray(".concat(t,")")+"?_i(".concat(t,",").concat(i,")>-1")+("true"===s?":(".concat(t,")"):":_q(".concat(t,",").concat(s,")"))),ai(e,"change","var $$a=".concat(t,",")+"$$el=$event.target,"+"$$c=$$el.checked?(".concat(s,"):(").concat(r,");")+"if(Array.isArray($$a)){"+"var $$v=".concat(a?"_n("+i+")":i,",")+"$$i=_i($$a,$$v);"+"if($$el.checked){$$i<0&&(".concat(oi(t,"$$a.concat([$$v])"),")}")+"else{$$i>-1&&(".concat(oi(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))"),")}")+"}else{".concat(oi(t,"$$c"),"}"),null,!0)}(e,a,i);else if("input"===s&&"radio"===r)!function(e,t,n){var a=n&&n.number,i=ii(e,"value")||"null";i=a?"_n(".concat(i,")"):i,Xa(e,"checked","_q(".concat(t,",").concat(i,")")),ai(e,"change",oi(t,i),null,!0)}(e,a,i);else if("input"===s||"textarea"===s)!function(e,t,n){var a=e.attrsMap.type,i=n||{},s=i.lazy,r=i.number,p=i.trim,u=!s&&"range"!==a,o=s?"change":"range"===a?fi:"input",d="$event.target.value";p&&(d="$event.target.value.trim()"),r&&(d="_n(".concat(d,")"));var y=oi(t,d);u&&(y="if($event.target.composing)return;".concat(y)),Xa(e,"value","(".concat(t,")")),ai(e,o,y,null,!0),(p||r)&&ai(e,"blur","$forceUpdate()")}(e,a,i);else if(!z.isReservedTag(s))return ui(e,a,i),!1;return!0},text:function(e,t){t.value&&Xa(e,"textContent","_s(".concat(t.value,")"),t)},html:function(e,t){t.value&&Xa(e,"innerHTML","_s(".concat(t.value,")"),t)}},isPreTag:function(e){return"pre"===e},isUnaryTag:zs,mustUseProp:ta,canBeLeftOpenTag:$s,isReservedTag:Ta,getTagNamespace:fa,staticKeys:function(e){return e.reduce((function(e,t){return e.concat(t.staticKeys||[])}),[]).join(",")}(Dr)},Ur=k((function(e){return T("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}));function jr(e,t){e&&(zr=Ur(t.staticKeys||""),$r=t.isReservedTag||R,Wr(e),Gr(e,!1))}function Wr(e){if(e.static=function(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||f(e.tag)||!$r(e.tag)||function(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}(e)||!Object.keys(e).every(zr))))}(e),1===e.type){if(!$r(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var a=e.children[t];Wr(a),a.static||(e.static=!1)}if(e.ifConditions)for(t=1,n=e.ifConditions.length;t<n;t++){var i=e.ifConditions[t].block;Wr(i),i.static||(e.static=!1)}}}function Gr(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,a=e.children.length;n<a;n++)Gr(e.children[n],t||!!e.for);if(e.ifConditions)for(n=1,a=e.ifConditions.length;n<a;n++)Gr(e.ifConditions[n].block,t)}}var Kr=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,Yr=/\([^)]*?\);*$/,Jr=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Xr={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Qr={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},ep=function(e){return"if(".concat(e,")return null;")},tp={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:ep("$event.target !== $event.currentTarget"),ctrl:ep("!$event.ctrlKey"),shift:ep("!$event.shiftKey"),alt:ep("!$event.altKey"),meta:ep("!$event.metaKey"),left:ep("'button' in $event && $event.button !== 0"),middle:ep("'button' in $event && $event.button !== 1"),right:ep("'button' in $event && $event.button !== 2")};function np(e,t){var n=t?"nativeOn:":"on:",a="",i="";for(var s in e){var r=ap(e[s]);e[s]&&e[s].dynamic?i+="".concat(s,",").concat(r,","):a+='"'.concat(s,'":').concat(r,",")}return a="{".concat(a.slice(0,-1),"}"),i?n+"_d(".concat(a,",[").concat(i.slice(0,-1),"])"):n+a}function ap(e){if(!e)return"function(){}";if(Array.isArray(e))return"[".concat(e.map((function(e){return ap(e)})).join(","),"]");var t=Jr.test(e.value),n=Kr.test(e.value),a=Jr.test(e.value.replace(Yr,""));if(e.modifiers){var i="",s="",r=[],p=function(t){if(tp[t])s+=tp[t],Xr[t]&&r.push(t);else if("exact"===t){var n=e.modifiers;s+=ep(["ctrl","shift","alt","meta"].filter((function(e){return!n[e]})).map((function(e){return"$event.".concat(e,"Key")})).join("||"))}else r.push(t)};for(var u in e.modifiers)p(u);r.length&&(i+=function(e){return"if(!$event.type.indexOf('key')&&"+"".concat(e.map(ip).join("&&"),")return null;")}(r)),s&&(i+=s);var o=t?"return ".concat(e.value,".apply(null, arguments)"):n?"return (".concat(e.value,").apply(null, arguments)"):a?"return ".concat(e.value):e.value;return"function($event){".concat(i).concat(o,"}")}return t||n?e.value:"function($event){".concat(a?"return ".concat(e.value):e.value,"}")}function ip(e){var t=parseInt(e,10);if(t)return"$event.keyCode!==".concat(t);var n=Xr[e],a=Qr[e];return"_k($event.keyCode,"+"".concat(JSON.stringify(e),",")+"".concat(JSON.stringify(n),",")+"$event.key,"+"".concat(JSON.stringify(a))+")"}var sp={on:function(e,t){e.wrapListeners=function(e){return"_g(".concat(e,",").concat(t.value,")")}},bind:function(e,t){e.wrapData=function(n){return"_b(".concat(n,",'").concat(e.tag,"',").concat(t.value,",").concat(t.modifiers&&t.modifiers.prop?"true":"false").concat(t.modifiers&&t.modifiers.sync?",true":"",")")}},cloak:E},rp=function(e){this.options=e,this.warn=e.warn||Ya,this.transforms=Ja(e.modules,"transformCode"),this.dataGenFns=Ja(e.modules,"genData"),this.directives=_(_({},sp),e.directives);var t=e.isReservedTag||R;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function pp(e,t){var n=new rp(t),a=e?"script"===e.tag?"null":up(e,n):'_c("div")';return{render:"with(this){return ".concat(a,"}"),staticRenderFns:n.staticRenderFns}}function up(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return op(e,t);if(e.once&&!e.onceProcessed)return dp(e,t);if(e.for&&!e.forProcessed)return mp(e,t);if(e.if&&!e.ifProcessed)return yp(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return function(e,t){var n=e.slotName||'"default"',a=hp(e,t),i="_t(".concat(n).concat(a?",function(){return ".concat(a,"}"):""),s=e.attrs||e.dynamicAttrs?bp((e.attrs||[]).concat(e.dynamicAttrs||[]).map((function(e){return{name:g(e.name),value:e.value,dynamic:e.dynamic}}))):null,r=e.attrsMap["v-bind"];return!s&&!r||a||(i+=",null"),s&&(i+=",".concat(s)),r&&(i+="".concat(s?"":",null",",").concat(r)),i+")"}(e,t);var n=void 0;if(e.component)n=function(e,t,n){var a=t.inlineTemplate?null:hp(t,n,!0);return"_c(".concat(e,",").concat(cp(t,n)).concat(a?",".concat(a):"",")")}(e.component,e,t);else{var a=void 0,i=t.maybeComponent(e);(!e.plain||e.pre&&i)&&(a=cp(e,t));var s=void 0,r=t.options.bindings;i&&r&&!1!==r.__isScriptSetup&&(s=function(e,t){var n=g(t),a=P(n),i=function(i){return e[t]===i?t:e[n]===i?n:e[a]===i?a:void 0},s=i("setup-const")||i("setup-reactive-const");if(s)return s;var r=i("setup-let")||i("setup-ref")||i("setup-maybe-ref");return r||void 0}(r,e.tag)),s||(s="'".concat(e.tag,"'"));var p=e.inlineTemplate?null:hp(e,t,!0);n="_c(".concat(s).concat(a?",".concat(a):"").concat(p?",".concat(p):"",")")}for(var u=0;u<t.transforms.length;u++)n=t.transforms[u](e,n);return n}return hp(e,t)||"void 0"}function op(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return ".concat(up(e,t),"}")),t.pre=n,"_m(".concat(t.staticRenderFns.length-1).concat(e.staticInFor?",true":"",")")}function dp(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return yp(e,t);if(e.staticInFor){for(var n="",a=e.parent;a;){if(a.for){n=a.key;break}a=a.parent}return n?"_o(".concat(up(e,t),",").concat(t.onceId++,",").concat(n,")"):up(e,t)}return op(e,t)}function yp(e,t,n,a){return e.ifProcessed=!0,lp(e.ifConditions.slice(),t,n,a)}function lp(e,t,n,a){if(!e.length)return a||"_e()";var i=e.shift();return i.exp?"(".concat(i.exp,")?").concat(s(i.block),":").concat(lp(e,t,n,a)):"".concat(s(i.block));function s(e){return n?n(e,t):e.once?dp(e,t):up(e,t)}}function mp(e,t,n,a){var i=e.for,s=e.alias,r=e.iterator1?",".concat(e.iterator1):"",p=e.iterator2?",".concat(e.iterator2):"";return e.forProcessed=!0,"".concat(a||"_l","((").concat(i,"),")+"function(".concat(s).concat(r).concat(p,"){")+"return ".concat((n||up)(e,t))+"})"}function cp(e,t){var n="{",a=function(e,t){var n=e.directives;if(n){var a,i,s,r,p="directives:[",u=!1;for(a=0,i=n.length;a<i;a++){s=n[a],r=!0;var o=t.directives[s.name];o&&(r=!!o(e,s,t.warn)),r&&(u=!0,p+='{name:"'.concat(s.name,'",rawName:"').concat(s.rawName,'"').concat(s.value?",value:(".concat(s.value,"),expression:").concat(JSON.stringify(s.value)):"").concat(s.arg?",arg:".concat(s.isDynamicArg?s.arg:'"'.concat(s.arg,'"')):"").concat(s.modifiers?",modifiers:".concat(JSON.stringify(s.modifiers)):"","},"))}return u?p.slice(0,-1)+"]":void 0}}(e,t);a&&(n+=a+","),e.key&&(n+="key:".concat(e.key,",")),e.ref&&(n+="ref:".concat(e.ref,",")),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'.concat(e.tag,'",'));for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:".concat(bp(e.attrs),",")),e.props&&(n+="domProps:".concat(bp(e.props),",")),e.events&&(n+="".concat(np(e.events,!1),",")),e.nativeEvents&&(n+="".concat(np(e.nativeEvents,!0),",")),e.slotTarget&&!e.slotScope&&(n+="slot:".concat(e.slotTarget,",")),e.scopedSlots&&(n+="".concat(function(e,t,n){var a=e.for||Object.keys(t).some((function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||Tp(n)})),i=!!e.if;if(!a)for(var s=e.parent;s;){if(s.slotScope&&s.slotScope!==_r||s.for){a=!0;break}s.if&&(i=!0),s=s.parent}var r=Object.keys(t).map((function(e){return fp(t[e],n)})).join(",");return"scopedSlots:_u([".concat(r,"]").concat(a?",null,true":"").concat(!a&&i?",null,false,".concat(function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}(r)):"",")")}(e,e.scopedSlots,t),",")),e.model&&(n+="model:{value:".concat(e.model.value,",callback:").concat(e.model.callback,",expression:").concat(e.model.expression,"},")),e.inlineTemplate){var s=function(e,t){var n=e.children[0];if(n&&1===n.type){var a=pp(n,t.options);return"inlineTemplate:{render:function(){".concat(a.render,"},staticRenderFns:[").concat(a.staticRenderFns.map((function(e){return"function(){".concat(e,"}")})).join(","),"]}")}}(e,t);s&&(n+="".concat(s,","))}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b(".concat(n,',"').concat(e.tag,'",').concat(bp(e.dynamicAttrs),")")),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function Tp(e){return 1===e.type&&("slot"===e.tag||e.children.some(Tp))}function fp(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return yp(e,t,fp,"null");if(e.for&&!e.forProcessed)return mp(e,t,fp);var a=e.slotScope===_r?"":String(e.slotScope),i="function(".concat(a,"){")+"return ".concat("template"===e.tag?e.if&&n?"(".concat(e.if,")?").concat(hp(e,t)||"undefined",":undefined"):hp(e,t)||"undefined":up(e,t),"}"),s=a?"":",proxy:true";return"{key:".concat(e.slotTarget||'"default"',",fn:").concat(i).concat(s,"}")}function hp(e,t,n,a,i){var s=e.children;if(s.length){var r=s[0];if(1===s.length&&r.for&&"template"!==r.tag&&"slot"!==r.tag){var p=n?t.maybeComponent(r)?",1":",0":"";return"".concat((a||up)(r,t)).concat(p)}var u=n?function(e,t){for(var n=0,a=0;a<e.length;a++){var i=e[a];if(1===i.type){if(vp(i)||i.ifConditions&&i.ifConditions.some((function(e){return vp(e.block)}))){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some((function(e){return t(e.block)})))&&(n=1)}}return n}(s,t.maybeComponent):0,o=i||wp;return"[".concat(s.map((function(e){return o(e,t)})).join(","),"]").concat(u?",".concat(u):"")}}function vp(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function wp(e,t){return 1===e.type?up(e,t):3===e.type&&e.isComment?function(e){return"_e(".concat(JSON.stringify(e.text),")")}(e):"_v(".concat(2===(n=e).type?n.expression:kp(JSON.stringify(n.text)),")");var n}function bp(e){for(var t="",n="",a=0;a<e.length;a++){var i=e[a],s=kp(i.value);i.dynamic?n+="".concat(i.name,",").concat(s,","):t+='"'.concat(i.name,'":').concat(s,",")}return t="{".concat(t.slice(0,-1),"}"),n?"_d(".concat(t,",[").concat(n.slice(0,-1),"])"):t}function kp(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}function Ap(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),E}}function gp(e){var t=Object.create(null);return function(n,a,i){(a=_({},a)).warn,delete a.warn;var s=a.delimiters?String(a.delimiters)+n:n;if(t[s])return t[s];var r=e(n,a),p={},u=[];return p.render=Ap(r.render,u),p.staticRenderFns=r.staticRenderFns.map((function(e){return Ap(e,u)})),t[s]=p}}new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)");var Pp,Mp,Ip=(Pp=function(e,t){var n=Er(e.trim(),t);!1!==t.optimize&&jr(n,t);var a=pp(n,t);return{ast:n,render:a.render,staticRenderFns:a.staticRenderFns}},function(e){function t(t,n){var a=Object.create(e),i=[],s=[];if(n)for(var r in n.modules&&(a.modules=(e.modules||[]).concat(n.modules)),n.directives&&(a.directives=_(Object.create(e.directives||null),n.directives)),n)"modules"!==r&&"directives"!==r&&(a[r]=n[r]);a.warn=function(e,t,n){(n?s:i).push(e)};var p=Pp(t.trim(),a);return p.errors=i,p.tips=s,p}return{compile:t,compileToFunctions:gp(t)}}),Sp=Ip(Hr).compileToFunctions;function xp(e){return(Mp=Mp||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',Mp.innerHTML.indexOf("&#10;")>0}var _p=!!W&&xp(!1),Lp=!!W&&xp(!0),Ep=k((function(e){var t=wa(e);return t&&t.innerHTML})),Rp=jn.prototype.$mount;function Bp(e,t){for(var n in t)e[n]=t[n];return e}jn.prototype.$mount=function(e,t){if((e=e&&wa(e))===document.body||e===document.documentElement)return this;var n=this.$options;if(!n.render){var a=n.template;if(a)if("string"==typeof a)"#"===a.charAt(0)&&(a=Ep(a));else{if(!a.nodeType)return this;a=a.innerHTML}else e&&(a=function(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}(e));if(a){var i=Sp(a,{outputSourceRange:!1,shouldDecodeNewlines:_p,shouldDecodeNewlinesForHref:Lp,delimiters:n.delimiters,comments:n.comments},this),s=i.render,r=i.staticRenderFns;n.render=s,n.staticRenderFns=r}}return Rp.call(this,e,t)},jn.compile=Sp;var Vp=/[!'()*]/g,Cp=function(e){return"%"+e.charCodeAt(0).toString(16)},Zp=/%2C/g,Op=function(e){return encodeURIComponent(e).replace(Vp,Cp).replace(Zp,",")};function qp(e){try{return decodeURIComponent(e)}catch(e){}return e}var Fp=function(e){return null==e||"object"==typeof e?e:String(e)};function Np(e){var t={};return(e=e.trim().replace(/^(\?|#|&)/,""))?(e.split("&").forEach((function(e){var n=e.replace(/\+/g," ").split("="),a=qp(n.shift()),i=n.length>0?qp(n.join("=")):null;void 0===t[a]?t[a]=i:Array.isArray(t[a])?t[a].push(i):t[a]=[t[a],i]})),t):t}function zp(e){var t=e?Object.keys(e).map((function(t){var n=e[t];if(void 0===n)return"";if(null===n)return Op(t);if(Array.isArray(n)){var a=[];return n.forEach((function(e){void 0!==e&&(null===e?a.push(Op(t)):a.push(Op(t)+"="+Op(e)))})),a.join("&")}return Op(t)+"="+Op(n)})).filter((function(e){return e.length>0})).join("&"):null;return t?"?"+t:""}var $p=/\/?$/;function Dp(e,t,n,a){var i=a&&a.options.stringifyQuery,s=t.query||{};try{s=Hp(s)}catch(e){}var r={name:t.name||e&&e.name,meta:e&&e.meta||{},path:t.path||"/",hash:t.hash||"",query:s,params:t.params||{},fullPath:Wp(t,i),matched:e?jp(e):[]};return n&&(r.redirectedFrom=Wp(n,i)),Object.freeze(r)}function Hp(e){if(Array.isArray(e))return e.map(Hp);if(e&&"object"==typeof e){var t={};for(var n in e)t[n]=Hp(e[n]);return t}return e}var Up=Dp(null,{path:"/"});function jp(e){for(var t=[];e;)t.unshift(e),e=e.parent;return t}function Wp(e,t){var n=e.path,a=e.query;void 0===a&&(a={});var i=e.hash;return void 0===i&&(i=""),(n||"/")+(t||zp)(a)+i}function Gp(e,t,n){return t===Up?e===t:!!t&&(e.path&&t.path?e.path.replace($p,"")===t.path.replace($p,"")&&(n||e.hash===t.hash&&Kp(e.query,t.query)):!(!e.name||!t.name)&&e.name===t.name&&(n||e.hash===t.hash&&Kp(e.query,t.query)&&Kp(e.params,t.params)))}function Kp(e,t){if(void 0===e&&(e={}),void 0===t&&(t={}),!e||!t)return e===t;var n=Object.keys(e).sort(),a=Object.keys(t).sort();return n.length===a.length&&n.every((function(n,i){var s=e[n];if(a[i]!==n)return!1;var r=t[n];return null==s||null==r?s===r:"object"==typeof s&&"object"==typeof r?Kp(s,r):String(s)===String(r)}))}function Yp(e){for(var t=0;t<e.matched.length;t++){var n=e.matched[t];for(var a in n.instances){var i=n.instances[a],s=n.enteredCbs[a];if(i&&s){delete n.enteredCbs[a];for(var r=0;r<s.length;r++)i._isBeingDestroyed||s[r](i)}}}}var Jp={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(e,t){var n=t.props,a=t.children,i=t.parent,s=t.data;s.routerView=!0;for(var r=i.$createElement,p=n.name,u=i.$route,o=i._routerViewCache||(i._routerViewCache={}),d=0,y=!1;i&&i._routerRoot!==i;){var l=i.$vnode?i.$vnode.data:{};l.routerView&&d++,l.keepAlive&&i._directInactive&&i._inactive&&(y=!0),i=i.$parent}if(s.routerViewDepth=d,y){var m=o[p],c=m&&m.component;return c?(m.configProps&&Xp(c,s,m.route,m.configProps),r(c,s,a)):r()}var T=u.matched[d],f=T&&T.components[p];if(!T||!f)return o[p]=null,r();o[p]={component:f},s.registerRouteInstance=function(e,t){var n=T.instances[p];(t&&n!==e||!t&&n===e)&&(T.instances[p]=t)},(s.hook||(s.hook={})).prepatch=function(e,t){T.instances[p]=t.componentInstance},s.hook.init=function(e){e.data.keepAlive&&e.componentInstance&&e.componentInstance!==T.instances[p]&&(T.instances[p]=e.componentInstance),Yp(u)};var h=T.props&&T.props[p];return h&&(Bp(o[p],{route:u,configProps:h}),Xp(f,s,u,h)),r(f,s,a)}};function Xp(e,t,n,a){var i=t.props=function(e,t){switch(typeof t){case"undefined":return;case"object":return t;case"function":return t(e);case"boolean":return t?e.params:void 0}}(n,a);if(i){i=t.props=Bp({},i);var s=t.attrs=t.attrs||{};for(var r in i)e.props&&r in e.props||(s[r]=i[r],delete i[r])}}function Qp(e,t,n){var a=e.charAt(0);if("/"===a)return e;if("?"===a||"#"===a)return t+e;var i=t.split("/");n&&i[i.length-1]||i.pop();for(var s=e.replace(/^\//,"").split("/"),r=0;r<s.length;r++){var p=s[r];".."===p?i.pop():"."!==p&&i.push(p)}return""!==i[0]&&i.unshift(""),i.join("/")}function eu(e){return e.replace(/\/(?:\s*\/)+/g,"/")}var tu=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)},nu=function e(t,n,a){return tu(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var a=0;a<n.length;a++)t.push({name:a,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return mu(e,t)}(t,n):tu(t)?function(t,n,a){for(var i=[],s=0;s<t.length;s++)i.push(e(t[s],n,a).source);return mu(new RegExp("(?:"+i.join("|")+")",cu(a)),n)}(t,n,a):function(e,t,n){return Tu(pu(e,n),t,n)}(t,n,a)},au=pu,iu=du,su=Tu,ru=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function pu(e,t){for(var n,a=[],i=0,s=0,r="",p=t&&t.delimiter||"/";null!=(n=ru.exec(e));){var u=n[0],o=n[1],d=n.index;if(r+=e.slice(s,d),s=d+u.length,o)r+=o[1];else{var y=e[s],l=n[2],m=n[3],c=n[4],T=n[5],f=n[6],h=n[7];r&&(a.push(r),r="");var v=null!=l&&null!=y&&y!==l,w="+"===f||"*"===f,b="?"===f||"*"===f,k=n[2]||p,A=c||T;a.push({name:m||i++,prefix:l||"",delimiter:k,optional:b,repeat:w,partial:v,asterisk:!!h,pattern:A?lu(A):h?".*":"[^"+yu(k)+"]+?"})}}return s<e.length&&(r+=e.substr(s)),r&&a.push(r),a}function uu(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function ou(e){return encodeURI(e).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function du(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",cu(t)));return function(t,a){for(var i="",s=t||{},r=(a||{}).pretty?uu:encodeURIComponent,p=0;p<e.length;p++){var u=e[p];if("string"!=typeof u){var o,d=s[u.name];if(null==d){if(u.optional){u.partial&&(i+=u.prefix);continue}throw new TypeError('Expected "'+u.name+'" to be defined')}if(tu(d)){if(!u.repeat)throw new TypeError('Expected "'+u.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(u.optional)continue;throw new TypeError('Expected "'+u.name+'" to not be empty')}for(var y=0;y<d.length;y++){if(o=r(d[y]),!n[p].test(o))throw new TypeError('Expected all "'+u.name+'" to match "'+u.pattern+'", but received `'+JSON.stringify(o)+"`");i+=(0===y?u.prefix:u.delimiter)+o}}else{if(o=u.asterisk?ou(d):r(d),!n[p].test(o))throw new TypeError('Expected "'+u.name+'" to match "'+u.pattern+'", but received "'+o+'"');i+=u.prefix+o}}else i+=u}return i}}function yu(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function lu(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function mu(e,t){return e.keys=t,e}function cu(e){return e&&e.sensitive?"":"i"}function Tu(e,t,n){tu(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,i=!1!==n.end,s="",r=0;r<e.length;r++){var p=e[r];if("string"==typeof p)s+=yu(p);else{var u=yu(p.prefix),o="(?:"+p.pattern+")";t.push(p),p.repeat&&(o+="(?:"+u+o+")*"),s+=o=p.optional?p.partial?u+"("+o+")?":"(?:"+u+"("+o+"))?":u+"("+o+")"}}var d=yu(n.delimiter||"/"),y=s.slice(-d.length)===d;return a||(s=(y?s.slice(0,-d.length):s)+"(?:"+d+"(?=$))?"),s+=i?"$":a&&y?"":"(?="+d+"|$)",mu(new RegExp("^"+s,cu(n)),t)}nu.parse=au,nu.compile=function(e,t){return du(pu(e,t),t)},nu.tokensToFunction=iu,nu.tokensToRegExp=su;var fu=Object.create(null);function hu(e,t,n){t=t||{};try{var a=fu[e]||(fu[e]=nu.compile(e));return"string"==typeof t.pathMatch&&(t[0]=t.pathMatch),a(t,{pretty:!0})}catch(e){return""}finally{delete t[0]}}function vu(e,t,n,a){var i="string"==typeof e?{path:e}:e;if(i._normalized)return i;if(i.name){var s=(i=Bp({},e)).params;return s&&"object"==typeof s&&(i.params=Bp({},s)),i}if(!i.path&&i.params&&t){(i=Bp({},i))._normalized=!0;var r=Bp(Bp({},t.params),i.params);if(t.name)i.name=t.name,i.params=r;else if(t.matched.length){var p=t.matched[t.matched.length-1].path;i.path=hu(p,r,t.path)}return i}var u=function(e){var t="",n="",a=e.indexOf("#");a>=0&&(t=e.slice(a),e=e.slice(0,a));var i=e.indexOf("?");return i>=0&&(n=e.slice(i+1),e=e.slice(0,i)),{path:e,query:n,hash:t}}(i.path||""),o=t&&t.path||"/",d=u.path?Qp(u.path,o,n||i.append):o,y=function(e,t,n){void 0===t&&(t={});var a,i=n||Np;try{a=i(e||"")}catch(e){a={}}for(var s in t){var r=t[s];a[s]=Array.isArray(r)?r.map(Fp):Fp(r)}return a}(u.query,i.query,a&&a.options.parseQuery),l=i.hash||u.hash;return l&&"#"!==l.charAt(0)&&(l="#"+l),{_normalized:!0,path:d,query:y,hash:l}}var wu,bu=function(){},ku={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(e){var t=this,n=this.$router,a=this.$route,i=n.resolve(this.to,a,this.append),s=i.location,r=i.route,p=i.href,u={},o=n.options.linkActiveClass,d=n.options.linkExactActiveClass,y=null==o?"router-link-active":o,l=null==d?"router-link-exact-active":d,m=null==this.activeClass?y:this.activeClass,c=null==this.exactActiveClass?l:this.exactActiveClass,T=r.redirectedFrom?Dp(null,vu(r.redirectedFrom),null,n):r;u[c]=Gp(a,T,this.exactPath),u[m]=this.exact||this.exactPath?u[c]:function(e,t){return 0===e.path.replace($p,"/").indexOf(t.path.replace($p,"/"))&&(!t.hash||e.hash===t.hash)&&function(e,t){for(var n in t)if(!(n in e))return!1;return!0}(e.query,t.query)}(a,T);var f=u[c]?this.ariaCurrentValue:null,h=function(e){Au(e)&&(t.replace?n.replace(s,bu):n.push(s,bu))},v={click:Au};Array.isArray(this.event)?this.event.forEach((function(e){v[e]=h})):v[this.event]=h;var w={class:u},b=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:p,route:r,navigate:h,isActive:u[m],isExactActive:u[c]});if(b){if(1===b.length)return b[0];if(b.length>1||!b.length)return 0===b.length?e():e("span",{},b)}if("a"===this.tag)w.on=v,w.attrs={href:p,"aria-current":f};else{var k=gu(this.$slots.default);if(k){k.isStatic=!1;var A=k.data=Bp({},k.data);for(var g in A.on=A.on||{},A.on){var P=A.on[g];g in v&&(A.on[g]=Array.isArray(P)?P:[P])}for(var M in v)M in A.on?A.on[M].push(v[M]):A.on[M]=h;var I=k.data.attrs=Bp({},k.data.attrs);I.href=p,I["aria-current"]=f}else w.on=v}return e(this.tag,w,this.$slots.default)}};function Au(e){if(!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey||e.defaultPrevented||void 0!==e.button&&0!==e.button)){if(e.currentTarget&&e.currentTarget.getAttribute){var t=e.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(t))return}return e.preventDefault&&e.preventDefault(),!0}}function gu(e){if(e)for(var t,n=0;n<e.length;n++){if("a"===(t=e[n]).tag)return t;if(t.children&&(t=gu(t.children)))return t}}var Pu="undefined"!=typeof window;function Mu(e,t,n,a,i){var s=t||[],r=n||Object.create(null),p=a||Object.create(null);e.forEach((function(e){Iu(s,r,p,e,i)}));for(var u=0,o=s.length;u<o;u++)"*"===s[u]&&(s.push(s.splice(u,1)[0]),o--,u--);return{pathList:s,pathMap:r,nameMap:p}}function Iu(e,t,n,a,i,s){var r=a.path,p=a.name,u=a.pathToRegexpOptions||{},o=function(e,t,n){return n||(e=e.replace(/\/$/,"")),"/"===e[0]||null==t?e:eu(t.path+"/"+e)}(r,i,u.strict);"boolean"==typeof a.caseSensitive&&(u.sensitive=a.caseSensitive);var d={path:o,regex:Su(o,u),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:p,parent:i,matchAs:s,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};if(a.children&&a.children.forEach((function(a){var i=s?eu(s+"/"+a.path):void 0;Iu(e,t,n,a,d,i)})),t[d.path]||(e.push(d.path),t[d.path]=d),void 0!==a.alias)for(var y=Array.isArray(a.alias)?a.alias:[a.alias],l=0;l<y.length;++l){var m={path:y[l],children:a.children};Iu(e,t,n,m,i,d.path||"/")}p&&(n[p]||(n[p]=d))}function Su(e,t){return nu(e,[],t)}function xu(e,t){var n=Mu(e),a=n.pathList,i=n.pathMap,s=n.nameMap;function r(e,n,r){var u=vu(e,n,!1,t),o=u.name;if(o){var d=s[o];if(!d)return p(null,u);var y=d.regex.keys.filter((function(e){return!e.optional})).map((function(e){return e.name}));if("object"!=typeof u.params&&(u.params={}),n&&"object"==typeof n.params)for(var l in n.params)!(l in u.params)&&y.indexOf(l)>-1&&(u.params[l]=n.params[l]);return u.path=hu(d.path,u.params),p(d,u,r)}if(u.path){u.params={};for(var m=0;m<a.length;m++){var c=a[m],T=i[c];if(_u(T.regex,u.path,u.params))return p(T,u,r)}}return p(null,u)}function p(e,n,a){return e&&e.redirect?function(e,n){var a=e.redirect,i="function"==typeof a?a(Dp(e,n,null,t)):a;if("string"==typeof i&&(i={path:i}),!i||"object"!=typeof i)return p(null,n);var u=i,o=u.name,d=u.path,y=n.query,l=n.hash,m=n.params;if(y=u.hasOwnProperty("query")?u.query:y,l=u.hasOwnProperty("hash")?u.hash:l,m=u.hasOwnProperty("params")?u.params:m,o)return s[o],r({_normalized:!0,name:o,query:y,hash:l,params:m},void 0,n);if(d){var c=function(e,t){return Qp(e,t.parent?t.parent.path:"/",!0)}(d,e);return r({_normalized:!0,path:hu(c,m),query:y,hash:l},void 0,n)}return p(null,n)}(e,a||n):e&&e.matchAs?function(e,t,n){var a=r({_normalized:!0,path:hu(n,t.params)});if(a){var i=a.matched,s=i[i.length-1];return t.params=a.params,p(s,t)}return p(null,t)}(0,n,e.matchAs):Dp(e,n,a,t)}return{match:r,addRoute:function(e,t){var n="object"!=typeof e?s[e]:void 0;Mu([t||e],a,i,s,n),n&&n.alias.length&&Mu(n.alias.map((function(e){return{path:e,children:[t]}})),a,i,s,n)},getRoutes:function(){return a.map((function(e){return i[e]}))},addRoutes:function(e){Mu(e,a,i,s)}}}function _u(e,t,n){var a=t.match(e);if(!a)return!1;if(!n)return!0;for(var i=1,s=a.length;i<s;++i){var r=e.keys[i-1];r&&(n[r.name||"pathMatch"]="string"==typeof a[i]?qp(a[i]):a[i])}return!0}var Lu=Pu&&window.performance&&window.performance.now?window.performance:Date;function Eu(){return Lu.now().toFixed(3)}var Ru=Eu();function Bu(){return Ru}function Vu(e){return Ru=e}var Cu=Object.create(null);function Zu(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var e=window.location.protocol+"//"+window.location.host,t=window.location.href.replace(e,""),n=Bp({},window.history.state);return n.key=Bu(),window.history.replaceState(n,"",t),window.addEventListener("popstate",Fu),function(){window.removeEventListener("popstate",Fu)}}function Ou(e,t,n,a){if(e.app){var i=e.options.scrollBehavior;i&&e.app.$nextTick((function(){var s=function(){var e=Bu();if(e)return Cu[e]}(),r=i.call(e,t,n,a?s:null);r&&("function"==typeof r.then?r.then((function(e){Hu(e,s)})).catch((function(e){})):Hu(r,s))}))}}function qu(){var e=Bu();e&&(Cu[e]={x:window.pageXOffset,y:window.pageYOffset})}function Fu(e){qu(),e.state&&e.state.key&&Vu(e.state.key)}function Nu(e){return $u(e.x)||$u(e.y)}function zu(e){return{x:$u(e.x)?e.x:window.pageXOffset,y:$u(e.y)?e.y:window.pageYOffset}}function $u(e){return"number"==typeof e}var Du=/^#\d/;function Hu(e,t){var n,a="object"==typeof e;if(a&&"string"==typeof e.selector){var i=Du.test(e.selector)?document.getElementById(e.selector.slice(1)):document.querySelector(e.selector);if(i){var s=e.offset&&"object"==typeof e.offset?e.offset:{};t=function(e,t){var n=document.documentElement.getBoundingClientRect(),a=e.getBoundingClientRect();return{x:a.left-n.left-t.x,y:a.top-n.top-t.y}}(i,s={x:$u((n=s).x)?n.x:0,y:$u(n.y)?n.y:0})}else Nu(e)&&(t=zu(e))}else a&&Nu(e)&&(t=zu(e));t&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:t.x,top:t.y,behavior:e.behavior}):window.scrollTo(t.x,t.y))}var Uu,ju=Pu&&(-1===(Uu=window.navigator.userAgent).indexOf("Android 2.")&&-1===Uu.indexOf("Android 4.0")||-1===Uu.indexOf("Mobile Safari")||-1!==Uu.indexOf("Chrome")||-1!==Uu.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState;function Wu(e,t){qu();var n=window.history;try{if(t){var a=Bp({},n.state);a.key=Bu(),n.replaceState(a,"",e)}else n.pushState({key:Vu(Eu())},"",e)}catch(n){window.location[t?"replace":"assign"](e)}}function Gu(e){Wu(e,!0)}var Ku={redirected:2,aborted:4,cancelled:8,duplicated:16};function Yu(e,t){return Ju(e,t,Ku.cancelled,'Navigation cancelled from "'+e.fullPath+'" to "'+t.fullPath+'" with a new navigation.')}function Ju(e,t,n,a){var i=new Error(a);return i._isRouter=!0,i.from=e,i.to=t,i.type=n,i}var Xu=["params","query","hash"];function Qu(e){return Object.prototype.toString.call(e).indexOf("Error")>-1}function eo(e,t){return Qu(e)&&e._isRouter&&(null==t||e.type===t)}function to(e,t,n){var a=function(i){i>=e.length?n():e[i]?t(e[i],(function(){a(i+1)})):a(i+1)};a(0)}function no(e,t){return ao(e.map((function(e){return Object.keys(e.components).map((function(n){return t(e.components[n],e.instances[n],e,n)}))})))}function ao(e){return Array.prototype.concat.apply([],e)}var io="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function so(e){var t=!1;return function(){for(var n=[],a=arguments.length;a--;)n[a]=arguments[a];if(!t)return t=!0,e.apply(this,n)}}var ro=function(e,t){this.router=e,this.base=function(e){if(!e)if(Pu){var t=document.querySelector("base");e=(e=t&&t.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else e="/";return"/"!==e.charAt(0)&&(e="/"+e),e.replace(/\/$/,"")}(t),this.current=Up,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function po(e,t,n,a){var i=no(e,(function(e,a,i,s){var r=function(e,t){return"function"!=typeof e&&(e=wu.extend(e)),e.options[t]}(e,t);if(r)return Array.isArray(r)?r.map((function(e){return n(e,a,i,s)})):n(r,a,i,s)}));return ao(a?i.reverse():i)}function uo(e,t){if(t)return function(){return e.apply(t,arguments)}}ro.prototype.listen=function(e){this.cb=e},ro.prototype.onReady=function(e,t){this.ready?e():(this.readyCbs.push(e),t&&this.readyErrorCbs.push(t))},ro.prototype.onError=function(e){this.errorCbs.push(e)},ro.prototype.transitionTo=function(e,t,n){var a,i=this;try{a=this.router.match(e,this.current)}catch(e){throw this.errorCbs.forEach((function(t){t(e)})),e}var s=this.current;this.confirmTransition(a,(function(){i.updateRoute(a),t&&t(a),i.ensureURL(),i.router.afterHooks.forEach((function(e){e&&e(a,s)})),i.ready||(i.ready=!0,i.readyCbs.forEach((function(e){e(a)})))}),(function(e){n&&n(e),e&&!i.ready&&(eo(e,Ku.redirected)&&s===Up||(i.ready=!0,i.readyErrorCbs.forEach((function(t){t(e)}))))}))},ro.prototype.confirmTransition=function(e,t,n){var a=this,i=this.current;this.pending=e;var s,r,p=function(e){!eo(e)&&Qu(e)&&(a.errorCbs.length?a.errorCbs.forEach((function(t){t(e)})):console.error(e)),n&&n(e)},u=e.matched.length-1,o=i.matched.length-1;if(Gp(e,i)&&u===o&&e.matched[u]===i.matched[o])return this.ensureURL(),e.hash&&Ou(this.router,i,e,!1),p(((r=Ju(s=i,e,Ku.duplicated,'Avoided redundant navigation to current location: "'+s.fullPath+'".')).name="NavigationDuplicated",r));var d,y=function(e,t){var n,a=Math.max(e.length,t.length);for(n=0;n<a&&e[n]===t[n];n++);return{updated:t.slice(0,n),activated:t.slice(n),deactivated:e.slice(n)}}(this.current.matched,e.matched),l=y.updated,m=y.deactivated,c=y.activated,T=[].concat(function(e){return po(e,"beforeRouteLeave",uo,!0)}(m),this.router.beforeHooks,function(e){return po(e,"beforeRouteUpdate",uo)}(l),c.map((function(e){return e.beforeEnter})),(d=c,function(e,t,n){var a=!1,i=0,s=null;no(d,(function(e,t,r,p){if("function"==typeof e&&void 0===e.cid){a=!0,i++;var u,o=so((function(t){var a;((a=t).__esModule||io&&"Module"===a[Symbol.toStringTag])&&(t=t.default),e.resolved="function"==typeof t?t:wu.extend(t),r.components[p]=t,--i<=0&&n()})),d=so((function(e){var t="Failed to resolve async component "+p+": "+e;s||(s=Qu(e)?e:new Error(t),n(s))}));try{u=e(o,d)}catch(e){d(e)}if(u)if("function"==typeof u.then)u.then(o,d);else{var y=u.component;y&&"function"==typeof y.then&&y.then(o,d)}}})),a||n()})),f=function(t,n){if(a.pending!==e)return p(Yu(i,e));try{t(e,i,(function(t){!1===t?(a.ensureURL(!0),p(function(e,t){return Ju(e,t,Ku.aborted,'Navigation aborted from "'+e.fullPath+'" to "'+t.fullPath+'" via a navigation guard.')}(i,e))):Qu(t)?(a.ensureURL(!0),p(t)):"string"==typeof t||"object"==typeof t&&("string"==typeof t.path||"string"==typeof t.name)?(p(function(e,t){return Ju(e,t,Ku.redirected,'Redirected when going from "'+e.fullPath+'" to "'+function(e){if("string"==typeof e)return e;if("path"in e)return e.path;var t={};return Xu.forEach((function(n){n in e&&(t[n]=e[n])})),JSON.stringify(t,null,2)}(t)+'" via a navigation guard.')}(i,e)),"object"==typeof t&&t.replace?a.replace(t):a.push(t)):n(t)}))}catch(e){p(e)}};to(T,f,(function(){var n=function(e){return po(e,"beforeRouteEnter",(function(e,t,n,a){return function(e,t,n){return function(a,i,s){return e(a,i,(function(e){"function"==typeof e&&(t.enteredCbs[n]||(t.enteredCbs[n]=[]),t.enteredCbs[n].push(e)),s(e)}))}}(e,n,a)}))}(c);to(n.concat(a.router.resolveHooks),f,(function(){if(a.pending!==e)return p(Yu(i,e));a.pending=null,t(e),a.router.app&&a.router.app.$nextTick((function(){Yp(e)}))}))}))},ro.prototype.updateRoute=function(e){this.current=e,this.cb&&this.cb(e)},ro.prototype.setupListeners=function(){},ro.prototype.teardown=function(){this.listeners.forEach((function(e){e()})),this.listeners=[],this.current=Up,this.pending=null};var oo=function(e){function t(t,n){e.call(this,t,n),this._startLocation=yo(this.base)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router,n=t.options.scrollBehavior,a=ju&&n;a&&this.listeners.push(Zu());var i=function(){var n=e.current,i=yo(e.base);e.current===Up&&i===e._startLocation||e.transitionTo(i,(function(e){a&&Ou(t,e,n,!0)}))};window.addEventListener("popstate",i),this.listeners.push((function(){window.removeEventListener("popstate",i)}))}},t.prototype.go=function(e){window.history.go(e)},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Wu(eu(a.base+e.fullPath)),Ou(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){Gu(eu(a.base+e.fullPath)),Ou(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.ensureURL=function(e){if(yo(this.base)!==this.current.fullPath){var t=eu(this.base+this.current.fullPath);e?Wu(t):Gu(t)}},t.prototype.getCurrentLocation=function(){return yo(this.base)},t}(ro);function yo(e){var t=window.location.pathname,n=t.toLowerCase(),a=e.toLowerCase();return!e||n!==a&&0!==n.indexOf(eu(a+"/"))||(t=t.slice(e.length)),(t||"/")+window.location.search+window.location.hash}var lo=function(e){function t(t,n,a){e.call(this,t,n),a&&function(e){var t=yo(e);if(!/^\/#/.test(t))return window.location.replace(eu(e+"/#"+t)),!0}(this.base)||mo()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.setupListeners=function(){var e=this;if(!(this.listeners.length>0)){var t=this.router.options.scrollBehavior,n=ju&&t;n&&this.listeners.push(Zu());var a=function(){var t=e.current;mo()&&e.transitionTo(co(),(function(a){n&&Ou(e.router,a,t,!0),ju||ho(a.fullPath)}))},i=ju?"popstate":"hashchange";window.addEventListener(i,a),this.listeners.push((function(){window.removeEventListener(i,a)}))}},t.prototype.push=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){fo(e.fullPath),Ou(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this,i=this.current;this.transitionTo(e,(function(e){ho(e.fullPath),Ou(a.router,e,i,!1),t&&t(e)}),n)},t.prototype.go=function(e){window.history.go(e)},t.prototype.ensureURL=function(e){var t=this.current.fullPath;co()!==t&&(e?fo(t):ho(t))},t.prototype.getCurrentLocation=function(){return co()},t}(ro);function mo(){var e=co();return"/"===e.charAt(0)||(ho("/"+e),!1)}function co(){var e=window.location.href,t=e.indexOf("#");return t<0?"":e=e.slice(t+1)}function To(e){var t=window.location.href,n=t.indexOf("#");return(n>=0?t.slice(0,n):t)+"#"+e}function fo(e){ju?Wu(To(e)):window.location.hash=e}function ho(e){ju?Gu(To(e)):window.location.replace(To(e))}var vo=function(e){function t(t,n){e.call(this,t,n),this.stack=[],this.index=-1}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.push=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index+1).concat(e),a.index++,t&&t(e)}),n)},t.prototype.replace=function(e,t,n){var a=this;this.transitionTo(e,(function(e){a.stack=a.stack.slice(0,a.index).concat(e),t&&t(e)}),n)},t.prototype.go=function(e){var t=this,n=this.index+e;if(!(n<0||n>=this.stack.length)){var a=this.stack[n];this.confirmTransition(a,(function(){var e=t.current;t.index=n,t.updateRoute(a),t.router.afterHooks.forEach((function(t){t&&t(a,e)}))}),(function(e){eo(e,Ku.duplicated)&&(t.index=n)}))}},t.prototype.getCurrentLocation=function(){var e=this.stack[this.stack.length-1];return e?e.fullPath:"/"},t.prototype.ensureURL=function(){},t}(ro),wo=function(e){void 0===e&&(e={}),this.app=null,this.apps=[],this.options=e,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=xu(e.routes||[],this);var t=e.mode||"hash";switch(this.fallback="history"===t&&!ju&&!1!==e.fallback,this.fallback&&(t="hash"),Pu||(t="abstract"),this.mode=t,t){case"history":this.history=new oo(this,e.base);break;case"hash":this.history=new lo(this,e.base,this.fallback);break;case"abstract":this.history=new vo(this,e.base)}},bo={currentRoute:{configurable:!0}};wo.prototype.match=function(e,t,n){return this.matcher.match(e,t,n)},bo.currentRoute.get=function(){return this.history&&this.history.current},wo.prototype.init=function(e){var t=this;if(this.apps.push(e),e.$once("hook:destroyed",(function(){var n=t.apps.indexOf(e);n>-1&&t.apps.splice(n,1),t.app===e&&(t.app=t.apps[0]||null),t.app||t.history.teardown()})),!this.app){this.app=e;var n=this.history;if(n instanceof oo||n instanceof lo){var a=function(e){n.setupListeners(),function(e){var a=n.current,i=t.options.scrollBehavior;ju&&i&&"fullPath"in e&&Ou(t,e,a,!1)}(e)};n.transitionTo(n.getCurrentLocation(),a,a)}n.listen((function(e){t.apps.forEach((function(t){t._route=e}))}))}},wo.prototype.beforeEach=function(e){return Ao(this.beforeHooks,e)},wo.prototype.beforeResolve=function(e){return Ao(this.resolveHooks,e)},wo.prototype.afterEach=function(e){return Ao(this.afterHooks,e)},wo.prototype.onReady=function(e,t){this.history.onReady(e,t)},wo.prototype.onError=function(e){this.history.onError(e)},wo.prototype.push=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.push(e,t,n)}));this.history.push(e,t,n)},wo.prototype.replace=function(e,t,n){var a=this;if(!t&&!n&&"undefined"!=typeof Promise)return new Promise((function(t,n){a.history.replace(e,t,n)}));this.history.replace(e,t,n)},wo.prototype.go=function(e){this.history.go(e)},wo.prototype.back=function(){this.go(-1)},wo.prototype.forward=function(){this.go(1)},wo.prototype.getMatchedComponents=function(e){var t=e?e.matched?e:this.resolve(e).route:this.currentRoute;return t?[].concat.apply([],t.matched.map((function(e){return Object.keys(e.components).map((function(t){return e.components[t]}))}))):[]},wo.prototype.resolve=function(e,t,n){var a=vu(e,t=t||this.history.current,n,this),i=this.match(a,t),s=i.redirectedFrom||i.fullPath,r=function(e,t,n){var a="hash"===n?"#"+t:t;return e?eu(e+"/"+a):a}(this.history.base,s,this.mode);return{location:a,route:i,href:r,normalizedTo:a,resolved:i}},wo.prototype.getRoutes=function(){return this.matcher.getRoutes()},wo.prototype.addRoute=function(e,t){this.matcher.addRoute(e,t),this.history.current!==Up&&this.history.transitionTo(this.history.getCurrentLocation())},wo.prototype.addRoutes=function(e){this.matcher.addRoutes(e),this.history.current!==Up&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(wo.prototype,bo);var ko=wo;function Ao(e,t){return e.push(t),function(){var n=e.indexOf(t);n>-1&&e.splice(n,1)}}wo.install=function e(t){if(!e.installed||wu!==t){e.installed=!0,wu=t;var n=function(e){return void 0!==e},a=function(e,t){var a=e.$options._parentVnode;n(a)&&n(a=a.data)&&n(a=a.registerRouteInstance)&&a(e,t)};t.mixin({beforeCreate:function(){n(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),t.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,a(this,this)},destroyed:function(){a(this)}}),Object.defineProperty(t.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(t.prototype,"$route",{get:function(){return this._routerRoot._route}}),t.component("RouterView",Jp),t.component("RouterLink",ku);var i=t.config.optionMergeStrategies;i.beforeRouteEnter=i.beforeRouteLeave=i.beforeRouteUpdate=i.created}},wo.version="3.6.5",wo.isNavigationFailure=eo,wo.NavigationFailureType=Ku,wo.START_LOCATION=Up,Pu&&window.Vue&&window.Vue.use(wo);var go=function(){var e=this._self._c;return e("div",{staticClass:"min-h-screen bg-gray-100 px-4 pt-6"},[e("router-view")],1)};function Po(e,t,n,a,i,s,r,p){var u,o="function"==typeof e?e.options:e;if(t&&(o.render=t,o.staticRenderFns=n,o._compiled=!0),a&&(o.functional=!0),s&&(o._scopeId="data-v-"+s),r?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),i&&i.call(this,e),e&&e._registeredComponents&&e._registeredComponents.add(r)},o._ssrRegister=u):i&&(u=p?function(){i.call(this,(o.functional?this.parent:this).$root.$options.shadowRoot)}:i),u)if(o.functional){o._injectStyles=u;var d=o.render;o.render=function(e,t){return u.call(t),d(e,t)}}else{var y=o.beforeCreate;o.beforeCreate=y?[].concat(y,u):[u]}return{exports:e,options:o}}go._withStripped=!0,n(838);const Mo=Po({},go,[],!1,null,null,null).exports;var Io=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[t("HeaderBar"),e._v(" "),t("div",{staticClass:"pb-32"},[t("div",{staticClass:"space-y-4"},[t("span",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.source)+"\n      ")]),e._v(" "),t("h1",{staticClass:"text-xl"},[e._v("\n        "+e._s(e.json.name)+"\n      ")]),e._v(" "),t("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.title)+"\n      ")]),e._v(" "),t("h2",{staticClass:"text-lg"},[e._v("\n        "+e._s(e.json.author)+"\n      ")]),e._v(" "),t("p",[e._v(e._s(e.json.notice))]),e._v(" "),t("p",[e._v(e._s(e.json.details))])]),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.hasOwnProperty("constructor")?t("Member",{attrs:{json:e.json.constructor}}):e._e()],1),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.receive?t("Member",{attrs:{json:e.json.receive}}):e._e()],1),e._v(" "),t("div",{staticClass:"mt-8"},[e.json.fallback?t("Member",{attrs:{json:e.json.fallback}}):e._e()],1),e._v(" "),e.json.events?t("MemberSet",{attrs:{title:"Events",json:e.json.events}}):e._e(),e._v(" "),e.json.stateVariables?t("MemberSet",{attrs:{title:"State Variables",json:e.json.stateVariables}}):e._e(),e._v(" "),e.json.methods?t("MemberSet",{attrs:{title:"Methods",json:e.json.methods}}):e._e()],1),e._v(" "),t("FooterBar")],1)};Io._withStripped=!0;var So=function(){var e=this,t=e._self._c;return t("div",{staticClass:"bg-gray-100 fixed bottom-0 right-0 w-full border-t border-dashed border-gray-300"},[t("div",{staticClass:"w-full text-center py-2 md:max-w-screen-sm lg:max-w-screen-md mx-auto"},[t("button",{staticClass:"py-1 px-2 text-gray-500",on:{click:function(t){return e.openLink(e.repository)}}},[e._v("\n      built with "+e._s(e.name)+"\n    ")])])])};So._withStripped=!0;const xo=JSON.parse('{"u2":"hardhat-docgen","cj":"https://github.com/ItsNickBarry/hardhat-docgen"}'),_o=Po({data:function(){return{repository:xo.cj,name:xo.u2}},methods:{openLink(e){window.open(e,"_blank")}}},So,[],!1,null,null,null).exports;var Lo=function(){var e=this._self._c;return e("div",{staticClass:"w-full border-b border-dashed py-2 border-gray-300"},[e("router-link",{staticClass:"py-2 text-gray-500",attrs:{to:"/"}},[this._v("\n    <- Go back\n  ")])],1)};Lo._withStripped=!0;const Eo=Po({},Lo,[],!1,null,null,null).exports;var Ro=function(){var e=this,t=e._self._c;return t("div",{staticClass:"border-2 border-gray-400 border-dashed w-full p-2"},[t("h3",{staticClass:"text-lg pb-2 mb-2 border-b-2 border-gray-400 border-dashed"},[e._v("\n    "+e._s(e.name)+" "+e._s(e.keywords)+" "+e._s(e.inputSignature)+"\n  ")]),e._v(" "),t("div",{staticClass:"space-y-3"},[t("p",[e._v(e._s(e.json.notice))]),e._v(" "),t("p",[e._v(e._s(e.json.details))]),e._v(" "),t("MemberSection",{attrs:{name:"Parameters",items:e.inputs}}),e._v(" "),t("MemberSection",{attrs:{name:"Return Values",items:e.outputs}})],1)])};Ro._withStripped=!0;var Bo=function(){var e=this,t=e._self._c;return e.items.length>0?t("ul",[t("h4",{staticClass:"text-lg"},[e._v("\n    "+e._s(e.name)+"\n  ")]),e._v(" "),e._l(e.items,(function(n,a){return t("li",{key:a},[t("span",{staticClass:"bg-gray-300"},[e._v(e._s(n.type))]),e._v(" "),t("b",[e._v(e._s(n.name||`_${a}`))]),n.desc?t("span",[e._v(": "),t("i",[e._v(e._s(n.desc))])]):e._e()])}))],2):e._e()};Bo._withStripped=!0;const Vo={components:{MemberSection:Po({props:{name:{type:String,default:""},items:{type:Array,default:()=>new Array}}},Bo,[],!1,null,null,null).exports},props:{json:{type:Object,default:()=>new Object}},computed:{name:function(){return this.json.name||this.json.type},keywords:function(){let e=[];return this.json.stateMutability&&e.push(this.json.stateMutability),"true"===this.json.anonymous&&e.push("anonymous"),e.join(" ")},params:function(){return this.json.params||{}},returns:function(){return this.json.returns||{}},inputs:function(){return(this.json.inputs||[]).map((e=>({...e,desc:this.params[e.name]})))},inputSignature:function(){return`(${this.inputs.map((e=>e.type)).join(",")})`},outputs:function(){return(this.json.outputs||[]).map(((e,t)=>({...e,desc:this.returns[e.name||`_${t}`]})))},outputSignature:function(){return`(${this.outputs.map((e=>e.type)).join(",")})`}}},Co=Po(Vo,Ro,[],!1,null,null,null).exports;var Zo=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full mt-8"},[t("h2",{staticClass:"text-lg"},[e._v(e._s(e.title))]),e._v(" "),e._l(Object.keys(e.json),(function(n){return t("Member",{key:n,staticClass:"mt-3",attrs:{json:e.json[n]}})}))],2)};Zo._withStripped=!0;var Oo=Po({components:{Member:Co},props:{title:{type:String,default:""},json:{type:Object,default:()=>new Object}}},Zo,[],!1,null,null,null);const qo=Po({components:{Member:Co,MemberSet:Oo.exports,HeaderBar:Eo,FooterBar:_o},props:{json:{type:Object,default:()=>new Object}}},Io,[],!1,null,null,null).exports;var Fo=function(){var e=this,t=e._self._c;return t("div",{staticClass:"w-full space-y-10 md:max-w-screen-sm lg:max-w-screen-md mx-auto pb-32"},[t("Branch",{attrs:{json:e.trees,name:"Sources:"}}),e._v(" "),t("FooterBar",{staticClass:"mt-20"})],1)};Fo._withStripped=!0;var No=function(){var e=this,t=e._self._c;return t("div",[e._v("\n  "+e._s(e.name)+"\n  "),Array.isArray(e.json)?t("div",{staticClass:"pl-5"},e._l(e.json,(function(n,a){return t("div",{key:a},[t("router-link",{attrs:{to:`${n.source}:${n.name}`}},[e._v("\n        "+e._s(n.name)+"\n      ")])],1)})),0):t("div",{staticClass:"pl-5"},e._l(Object.keys(e.json),(function(n){return t("div",{key:n},[t("Branch",{attrs:{json:e.json[n],name:n}})],1)})),0)])};No._withStripped=!0;var zo=Po({name:"Branch",props:{name:{type:String,default:null},json:{type:[Object,Array],default:()=>new Object}}},No,[],!1,null,null,null);const $o=Po({components:{Branch:zo.exports,FooterBar:_o},props:{json:{type:Object,default:()=>new Object}},computed:{trees:function(){let e={};for(let t in this.json)t.replace("/","//").split(/\/(?=[^\/])/).reduce(function(e,n){if(!n.includes(":"))return e[n]=e[n]||{},e[n];{let[a]=n.split(":");e[a]=e[a]||[],e[a].push(this.json[t])}}.bind(this),e);return e}}},Fo,[],!1,null,null,null).exports;jn.use(ko);const Do={"contracts/ApeSwapZapFullV5.sol:ApeSwapZapFullV5":{source:"contracts/ApeSwapZapFullV5.sol",name:"ApeSwapZapFullV5",constructor:{inputs:[{internalType:"contract IWETH",name:"wNative",type:"address"},{internalType:"contract ITreasury",name:"goldenBananaTreasury",type:"address"},{internalType:"contract IZapAnalyzer",name:"_zapAnalyzer",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"AddLiquidityArrakis((address,address,address,uint24,uint256,uint256,uint256,uint256,address,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"address",name:"arrakisFactory",type:"address"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityArrakisParams",name:"params",type:"tuple"}],name:"AddLiquidityArrakis",type:"event"},"AddLiquidityGamma((address,address,address,uint256,uint256,address,uint256[4]))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"inMin",type:"uint256[4]"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityGammaParams",name:"params",type:"tuple"}],name:"AddLiquidityGamma",type:"event"},"AddLiquidityV2((address,address,address,uint256,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityV2Params",name:"params",type:"tuple"}],name:"AddLiquidityV2",type:"event"},"AddLiquidityV3((address,address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityV3Params",name:"params",type:"tuple"}],name:"AddLiquidityV3",type:"event"},"RemoveLiquidityGamma((address,uint256,address,uint256[4]))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"minAmounts",type:"uint256[4]"}],indexed:!1,internalType:"struct ZapLiquidity.RemoveLiquidityGammaParams",name:"params",type:"tuple"}],name:"RemoveLiquidityGamma",type:"event"},"RemoveLiquidityV2((address,address,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IV2LiquidityRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.RemoveLiquidityV2Params",name:"params",type:"tuple"}],name:"RemoveLiquidityV2",type:"event"},"Swap((address,uint256,uint8,address,bytes[],address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"enum ZapSwap.SwapType2",name:"swapType",type:"uint8"},{internalType:"address",name:"caller",type:"address"},{internalType:"bytes[]",name:"swapData",type:"bytes[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapSwap.SwapParams",name:"params",type:"tuple"}],name:"Swap",type:"event"},"ZapLending(uint256,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICErc20",name:"market",type:"address"},{indexed:!1,internalType:"uint256",name:"outputAmount",type:"uint256"}],name:"ZapLending",type:"event"},"ZapLendingMarket(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICErc20",name:"market",type:"address"}],name:"ZapLendingMarket",type:"event"},"ZapMiniApeV2((uint256,address,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapMiniApeV2.zapMiniApeV2Params",name:"params",type:"tuple"}],name:"ZapMiniApeV2",type:"event"},"ZapPool((uint256,address,address))":{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapPools.ZapPoolParams",name:"params",type:"tuple"}],name:"ZapPool",type:"event"},"ZapTBill((address,uint256,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapTBills.zapTBillParams",name:"params",type:"tuple"}],name:"ZapTBill",type:"event"},"ZapVault(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVault",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"LENDING_NATIVE_UNDERLYING()":{inputs:[],name:"LENDING_NATIVE_UNDERLYING",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"WNative()":{inputs:[],name:"WNative",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},"addLiquidityArrakis((address,address,address,uint24,uint256,uint256,uint256,uint256,address,uint256,address))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct ZapLiquidity.AddLiquidityArrakisParams",name:"params",type:"tuple"}],name:"addLiquidityArrakis",outputs:[{internalType:"uint256",name:"amount0Lp",type:"uint256"},{internalType:"uint256",name:"amount1Lp",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityGamma((address,address,address,uint256,uint256,address,uint256[4]))":{inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"inMin",type:"uint256[4]"}],internalType:"struct ZapLiquidity.AddLiquidityGammaParams",name:"params",type:"tuple"}],name:"addLiquidityGamma",outputs:[{internalType:"uint256",name:"shares",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityV2((address,address,address,uint256,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.AddLiquidityV2Params",name:"params",type:"tuple"}],name:"addLiquidityV2",outputs:[{internalType:"uint256",name:"amount0Lp",type:"uint256"},{internalType:"uint256",name:"amount1Lp",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityV3((address,address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.AddLiquidityV3Params",name:"params",type:"tuple"}],name:"addLiquidityV3",outputs:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function"},"estimateSwapReturns((uint256,(address,uint8,address[],uint24[])[],(address,uint8,address[],uint24[])[],(address,uint8,uint24,int24,int24,address)))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath0",type:"tuple[]"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath1",type:"tuple[]"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IZapAnalyzer.LiquidityType",name:"liquidityType",type:"uint8"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IZapAnalyzer.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IZapAnalyzer.SwapReturnsParams",name:"params",type:"tuple"}],name:"estimateSwapReturns",outputs:[{components:[{internalType:"uint256",name:"swapToToken0",type:"uint256"},{internalType:"uint256",name:"swapToToken1",type:"uint256"},{internalType:"uint256",name:"minAmountSwap0",type:"uint256"},{internalType:"uint256",name:"minAmountSwap1",type:"uint256"}],internalType:"struct IZapAnalyzer.SwapReturns",name:"returnValues",type:"tuple"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"},"multicall(bytes[])":{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function",details:"The `msg.value` should not be trusted for any method callable from multicall.",params:{data:"The encoded function data for each of the calls to make to this contract"},returns:{results:"The results from each of the calls passed in via data"},notice:"Call multiple functions in the current contract and return the data from all of them if they all succeed"},"removeLiquidityGamma((address,uint256,address,uint256[4]))":{inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"minAmounts",type:"uint256[4]"}],internalType:"struct ZapLiquidity.RemoveLiquidityGammaParams",name:"params",type:"tuple"}],name:"removeLiquidityGamma",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function"},"removeLiquidityV2((address,address,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"contract IV2LiquidityRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.RemoveLiquidityV2Params",name:"params",type:"tuple"}],name:"removeLiquidityV2",outputs:[{internalType:"uint256",name:"amountAReceived",type:"uint256"},{internalType:"uint256",name:"amountBReceived",type:"uint256"}],stateMutability:"payable",type:"function"},"swap((address,uint256,uint8,address,bytes[],address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"enum ZapSwap.SwapType2",name:"swapType",type:"uint8"},{internalType:"address",name:"caller",type:"address"},{internalType:"bytes[]",name:"swapData",type:"bytes[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapSwap.SwapParams",name:"params",type:"tuple"}],name:"swap",outputs:[],stateMutability:"payable",type:"function",params:{params:"all parameters for zap"},notice:"Zap single token to LP"},"unwrapNative(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"unwrapNative",outputs:[],stateMutability:"nonpayable",type:"function"},"wrapNative(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"wrapNative",outputs:[],stateMutability:"payable",type:"function"},"zapAnalyzer()":{inputs:[],name:"zapAnalyzer",outputs:[{internalType:"contract IZapAnalyzer",name:"",type:"address"}],stateMutability:"view",type:"function"},"zapLendingMarket(uint256,address,address)":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract ICErc20",name:"market",type:"address"},{internalType:"address",name:"recipient",type:"address"}],name:"zapLendingMarket",outputs:[],stateMutability:"payable",type:"function",params:{inputAmount:"Amount of input tokens to zap",market:"Lending market to deposit to",recipient:"Recipient of cTokens"},notice:"Zap token single asset lending market"},"zapMiniApeV2((uint256,address,uint256,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapMiniApeV2.zapMiniApeV2Params",name:"params",type:"tuple"}],name:"zapMiniApeV2",outputs:[],stateMutability:"payable",type:"function"},"zapPool((uint256,address,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapPools.ZapPoolParams",name:"params",type:"tuple"}],name:"zapPool",outputs:[],stateMutability:"payable",type:"function"},"zapTBill((address,uint256,uint256,address))":{inputs:[{components:[{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapTBills.zapTBillParams",name:"params",type:"tuple"}],name:"zapTBill",outputs:[],stateMutability:"payable",type:"function"},"zapVault((uint256,address,uint256,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapVaults.zapVaultParams",name:"params",type:"tuple"}],name:"zapVault",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/WrapNative.sol:WrapNative":{source:"contracts/WrapNative.sol",name:"WrapNative",constructor:{inputs:[{internalType:"contract IWETH",name:"_wNative",type:"address"}],stateMutability:"nonpayable",type:"constructor"},methods:{"WNative()":{inputs:[],name:"WNative",outputs:[{internalType:"contract IWETH",name:"",type:"address"}],stateMutability:"view",type:"function"},"unwrapNative(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"unwrapNative",outputs:[],stateMutability:"nonpayable",type:"function"},"wrapNative(uint256,address)":{inputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"wrapNative",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/_old/ApeSwapZap.sol:ApeSwapZap":{source:"contracts/_old/ApeSwapZap.sol",name:"ApeSwapZap",constructor:{inputs:[{internalType:"contract IApeRouter02",name:"_router",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"}}},"contracts/_old/ApeSwapZapFullV0.sol:ApeSwapZapFullV0":{source:"contracts/_old/ApeSwapZapFullV0.sol",name:"ApeSwapZapFullV0",constructor:{inputs:[{internalType:"contract IApeRouter02",name:"_router",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"LPMigrated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IApePair",name:"lp",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"fromRouter",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"toRouter",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LPMigrated",type:"event"},"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapTBill(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBill",type:"event"},"ZapTBillNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBillNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"apeRouter()":{inputs:[],name:"apeRouter",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapLPMigrator(address,address,uint256,uint256,uint256,uint256,uint256,uint256)":{inputs:[{internalType:"contract IApeRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"uint256",name:"amountAMinAdd",type:"uint256"},{internalType:"uint256",name:"amountBMinAdd",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapLPMigrator",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of LPs to zap",amountAMinAdd:"The minimum amount of token0 to add to APE-LP on add liquidity",amountAMinRemove:"The minimum amount of token0 to receive after removing liquidity",amountBMinAdd:"The minimum amount of token1 to add to APE-LP on add liquidity",amountBMinRemove:"The minimum amount of token1 to receive after removing liquidity",deadline:"Unix timestamp after which the transaction will revert",lp:"LP address to zap",router:"The non APE-LP router"},notice:"Zap non APE-LPs to APE-LPs"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapTBill(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapTBillNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/ApeSwapZapFullV1.sol:ApeSwapZapFullV1":{source:"contracts/_old/ApeSwapZapFullV1.sol",name:"ApeSwapZapFullV1",constructor:{inputs:[{internalType:"contract IApeRouter02",name:"_router",type:"address"},{internalType:"contract ITreasury",name:"_goldenBananaTreasury",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"LPMigrated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IApePair",name:"lp",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"fromRouter",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"toRouter",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LPMigrated",type:"event"},"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapLPPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPool",type:"event"},"ZapLPPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPoolNative",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapSingleAssetPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPool",type:"event"},"ZapSingleAssetPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPoolNative",type:"event"},"ZapTBill(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBill",type:"event"},"ZapTBillNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBillNative",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"apeRouter()":{inputs:[],name:"apeRouter",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapLPMigrator(address,address,uint256,uint256,uint256,uint256,uint256,uint256)":{inputs:[{internalType:"contract IApeRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"uint256",name:"amountAMinAdd",type:"uint256"},{internalType:"uint256",name:"amountBMinAdd",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapLPMigrator",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of LPs to zap",amountAMinAdd:"The minimum amount of token0 to add to APE-LP on add liquidity",amountAMinRemove:"The minimum amount of token0 to receive after removing liquidity",amountBMinAdd:"The minimum amount of token1 to add to APE-LP on add liquidity",amountBMinRemove:"The minimum amount of token1 to receive after removing liquidity",deadline:"Unix timestamp after which the transaction will revert",lp:"LP address to zap",router:"The non APE-LP router"},notice:"Zap non APE-LPs to APE-LPs"},"zapLPPool(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into banana/gnana pool"},"zapLPPoolNative(address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into banana/gnana pool"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapSingleAssetPool(address,uint256,address[],uint256,uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap token into banana/gnana pool"},"zapSingleAssetPoolNative(address[],uint256,uint256,address)":{inputs:[{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap native into banana/gnana pool"},"zapTBill(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapTBillNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/ApeSwapZapFullV2.sol:ApeSwapZapFullV2":{source:"contracts/_old/ApeSwapZapFullV2.sol",name:"ApeSwapZapFullV2",constructor:{inputs:[{internalType:"contract IApeRouter02",name:"_router",type:"address"},{internalType:"contract ITreasury",name:"_goldenBananaTreasury",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"LPMigrated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IApePair",name:"lp",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"fromRouter",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"toRouter",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LPMigrated",type:"event"},"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapLPPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPool",type:"event"},"ZapLPPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPoolNative",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapSingleAssetPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPool",type:"event"},"ZapSingleAssetPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPoolNative",type:"event"},"ZapTBill(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBill",type:"event"},"ZapTBillNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBillNative",type:"event"},"ZapVault(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVault",type:"event"},"ZapVaultNative(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVaultNative",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"apeRouter()":{inputs:[],name:"apeRouter",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapLPMigrator(address,address,uint256,uint256,uint256,uint256,uint256,uint256)":{inputs:[{internalType:"contract IApeRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"uint256",name:"amountAMinAdd",type:"uint256"},{internalType:"uint256",name:"amountBMinAdd",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapLPMigrator",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of LPs to zap",amountAMinAdd:"The minimum amount of token0 to add to APE-LP on add liquidity",amountAMinRemove:"The minimum amount of token0 to receive after removing liquidity",amountBMinAdd:"The minimum amount of token1 to add to APE-LP on add liquidity",amountBMinRemove:"The minimum amount of token1 to receive after removing liquidity",deadline:"Unix timestamp after which the transaction will revert",lp:"LP address to zap",router:"The non APE-LP router"},notice:"Zap non APE-LPs to APE-LPs"},"zapLPPool(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into banana/gnana pool"},"zapLPPoolNative(address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into banana/gnana pool"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapSingleAssetPool(address,uint256,address[],uint256,uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap token into banana/gnana pool"},"zapSingleAssetPoolNative(address[],uint256,uint256,address)":{inputs:[{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap native into banana/gnana pool"},"zapTBill(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapTBillNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to Treasury Bill"},"zapVault(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"zapVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to",vaultPid:"Vault address"},notice:"Zap token into banana/gnana vault"},"zapVaultNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"zapVaultNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to",vaultPid:"Vault pid"},notice:"Zap native into banana/gnana vault"}}},"contracts/_old/ApeSwapZapFullV3.sol:ApeSwapZapFullV3":{source:"contracts/_old/ApeSwapZapFullV3.sol",name:"ApeSwapZapFullV3",constructor:{inputs:[{internalType:"contract IApeRouter02",name:"_router",type:"address"},{internalType:"contract ITreasury",name:"_goldenBananaTreasury",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"LPMigrated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IApePair",name:"lp",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"fromRouter",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"toRouter",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LPMigrated",type:"event"},"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapLPPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPool",type:"event"},"ZapLPPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPoolNative",type:"event"},"ZapMiniApeV2(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pid",type:"uint256"}],name:"ZapMiniApeV2",type:"event"},"ZapMiniApeV2Native(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pid",type:"uint256"}],name:"ZapMiniApeV2Native",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapSingleAssetPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPool",type:"event"},"ZapSingleAssetPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPoolNative",type:"event"},"ZapTBill(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBill",type:"event"},"ZapTBillNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBillNative",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"apeRouter()":{inputs:[],name:"apeRouter",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapLPMigrator(address,address,uint256,uint256,uint256,uint256,uint256,uint256)":{inputs:[{internalType:"contract IApeRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"uint256",name:"amountAMinAdd",type:"uint256"},{internalType:"uint256",name:"amountBMinAdd",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapLPMigrator",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of LPs to zap",amountAMinAdd:"The minimum amount of token0 to add to APE-LP on add liquidity",amountAMinRemove:"The minimum amount of token0 to receive after removing liquidity",amountBMinAdd:"The minimum amount of token1 to add to APE-LP on add liquidity",amountBMinRemove:"The minimum amount of token1 to receive after removing liquidity",deadline:"Unix timestamp after which the transaction will revert",lp:"LP address to zap",router:"The non APE-LP router"},notice:"Zap non APE-LPs to APE-LPs"},"zapLPPool(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into banana/gnana pool"},"zapLPPoolNative(address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into banana/gnana pool"},"zapMiniApeV2(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"}],name:"zapMiniApeV2",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",miniApe:"The main dualfarm contract",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pid:"Dual farm pid",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into miniApev2 style dual farm"},"zapMiniApeV2Native(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"}],name:"zapMiniApeV2Native",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",miniApe:"The main dualfarm contract",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pid:"Dual Farm pid",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into miniApev2 style dual farm"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapSingleAssetPool(address,uint256,address[],uint256,uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap token into banana/gnana pool"},"zapSingleAssetPoolNative(address[],uint256,uint256,address)":{inputs:[{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap native into banana/gnana pool"},"zapTBill(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapTBillNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/ApeSwapZapFullV4.sol:ApeSwapZapFullV4":{source:"contracts/_old/ApeSwapZapFullV4.sol",name:"ApeSwapZapFullV4",constructor:{inputs:[{internalType:"address",name:"_wnative",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"Zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"Zap",type:"event"},"ZapNative((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"ZapNative",type:"event"},"ZapTBill(((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{anonymous:!1,inputs:[{components:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParamsTBill",name:"zapParamsTBill",type:"tuple"}],name:"ZapTBill",type:"event"},"ZapTBillNative(((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{anonymous:!1,inputs:[{components:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParamsNative",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParamsTBillNative",name:"zapParamsTBillNative",type:"tuple"}],name:"ZapTBillNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address)))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IApeSwapZapV2.MinAmountsParams",name:"params",type:"tuple"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"},"zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{zapParams:"all parameters for zap"},notice:"Zap single token to LP"},"zapNative((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParams",type:"tuple"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{zapParams:"all parameters for native zap"},notice:"Zap native token to LP"},"zapTBill(((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{inputs:[{components:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsTBill",name:"zapParamsTBill",type:"tuple"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{zapParamsTBill:"all parameters for tbill zap inputToken Input token to zap inputAmount Amount of input tokens to zap underlyingTokens Tokens of LP to zap to paths Path from input token to LP token0 minAmounts The minimum amount of output tokens that must be received for   swap and AmountAMin and amountBMin for adding liquidity deadline Unix timestamp after which the transaction will revert bill Treasury bill address maxPrice Max price of treasury bill"},notice:"Zap single token to LP"},"zapTBillNative(((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{inputs:[{components:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParamsNative",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsTBillNative",name:"zapParamsTBillNative",type:"tuple"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{zapParamsTBillNative:"all parameters for native tbill zap underlyingTokens Tokens of LP to zap to paths Path from input token to LP token0 minAmounts The minimum amount of output tokens that must be received for   swap and AmountAMin and amountBMin for adding liquidity deadline Unix timestamp after which the transaction will revert bill Treasury bill address maxPrice Max price of treasury bill"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/ApeSwapZapV2.sol:ApeSwapZapV2":{source:"contracts/_old/ApeSwapZapV2.sol",name:"ApeSwapZapV2",constructor:{inputs:[{internalType:"address",name:"_wnative",type:"address"}],stateMutability:"nonpayable",type:"constructor"},receive:{stateMutability:"payable",type:"receive"},events:{"Zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"Zap",type:"event"},"ZapNative((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"ZapNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address)))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IApeSwapZapV2.MinAmountsParams",name:"params",type:"tuple"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"},"zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{zapParams:"all parameters for zap"},notice:"Zap single token to LP"},"zapNative((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParams",type:"tuple"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{zapParams:"all parameters for native zap"},notice:"Zap native token to LP"}}},"contracts/_old/Migrations.sol:Migrations":{source:"contracts/_old/Migrations.sol",name:"Migrations",methods:{"last_completed_migration()":{inputs:[],name:"last_completed_migration",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"setCompleted(uint256)":{inputs:[{internalType:"uint256",name:"completed",type:"uint256"}],name:"setCompleted",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/ApeSwapZapLPMigrator.sol:ApeSwapZapLPMigrator":{source:"contracts/_old/extensions/ApeSwapZapLPMigrator.sol",name:"ApeSwapZapLPMigrator",events:{"LPMigrated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IApePair",name:"lp",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"fromRouter",type:"address"},{indexed:!1,internalType:"contract IApeRouter02",name:"toRouter",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"LPMigrated",type:"event"}},methods:{"apeRouter()":{inputs:[],name:"apeRouter",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zapLPMigrator(address,address,uint256,uint256,uint256,uint256,uint256,uint256)":{inputs:[{internalType:"contract IApeRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"uint256",name:"amountAMinAdd",type:"uint256"},{internalType:"uint256",name:"amountBMinAdd",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapLPMigrator",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"Amount of LPs to zap",amountAMinAdd:"The minimum amount of token0 to add to APE-LP on add liquidity",amountAMinRemove:"The minimum amount of token0 to receive after removing liquidity",amountBMinAdd:"The minimum amount of token1 to add to APE-LP on add liquidity",amountBMinRemove:"The minimum amount of token1 to receive after removing liquidity",deadline:"Unix timestamp after which the transaction will revert",lp:"LP address to zap",router:"The non APE-LP router"},notice:"Zap non APE-LPs to APE-LPs"}}},"contracts/_old/extensions/bills/ApeSwapZapTBills.sol:ApeSwapZapTBills":{source:"contracts/_old/extensions/bills/ApeSwapZapTBills.sol",name:"ApeSwapZapTBills",receive:{stateMutability:"payable",type:"receive"},events:{"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapTBill(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBill",type:"event"},"ZapTBillNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICustomBill",name:"bill",type:"address"}],name:"ZapTBillNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapTBill(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapTBillNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{bill:"Treasury bill address",deadline:"Unix timestamp after which the transaction will revert",maxPrice:"Max price of treasury bill",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/extensions/bills/ApeSwapZapTBillsV2.sol:ApeSwapZapTBillsV2":{source:"contracts/_old/extensions/bills/ApeSwapZapTBillsV2.sol",name:"ApeSwapZapTBillsV2",receive:{stateMutability:"payable",type:"receive"},events:{"Zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"Zap",type:"event"},"ZapNative((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"ZapNative",type:"event"},"ZapTBill(((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{anonymous:!1,inputs:[{components:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParamsTBill",name:"zapParamsTBill",type:"tuple"}],name:"ZapTBill",type:"event"},"ZapTBillNative(((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{anonymous:!1,inputs:[{components:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParamsNative",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],indexed:!1,internalType:"struct IApeSwapZapV2.ZapParamsTBillNative",name:"zapParamsTBillNative",type:"tuple"}],name:"ZapTBillNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address)))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IApeSwapZapV2.MinAmountsParams",name:"params",type:"tuple"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"},"zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{zapParams:"all parameters for zap"},notice:"Zap single token to LP"},"zapNative((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParams",type:"tuple"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{zapParams:"all parameters for native zap"},notice:"Zap native token to LP"},"zapTBill(((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{inputs:[{components:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsTBill",name:"zapParamsTBill",type:"tuple"}],name:"zapTBill",outputs:[],stateMutability:"nonpayable",type:"function",params:{zapParamsTBill:"all parameters for tbill zap inputToken Input token to zap inputAmount Amount of input tokens to zap underlyingTokens Tokens of LP to zap to paths Path from input token to LP token0 minAmounts The minimum amount of output tokens that must be received for   swap and AmountAMin and amountBMin for adding liquidity deadline Unix timestamp after which the transaction will revert bill Treasury bill address maxPrice Max price of treasury bill"},notice:"Zap single token to LP"},"zapTBillNative(((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256),address,uint256))":{inputs:[{components:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParamsNative",type:"tuple"},{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"maxPrice",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsTBillNative",name:"zapParamsTBillNative",type:"tuple"}],name:"zapTBillNative",outputs:[],stateMutability:"payable",type:"function",params:{zapParamsTBillNative:"all parameters for native tbill zap underlyingTokens Tokens of LP to zap to paths Path from input token to LP token0 minAmounts The minimum amount of output tokens that must be received for   swap and AmountAMin and amountBMin for adding liquidity deadline Unix timestamp after which the transaction will revert bill Treasury bill address maxPrice Max price of treasury bill"},notice:"Zap native token to Treasury Bill"}}},"contracts/_old/extensions/bills/libraries/ICustomBill.sol:ICustomBill":{source:"contracts/_old/extensions/bills/libraries/ICustomBill.sol",name:"ICustomBill",methods:{"deposit(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_maxPrice",type:"uint256"},{internalType:"address",name:"_depositor",type:"address"}],name:"deposit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"principalToken()":{inputs:[],name:"principalToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/farms/ApeSwapZapMiniApeV2.sol:ApeSwapZapMiniApeV2":{source:"contracts/_old/extensions/farms/ApeSwapZapMiniApeV2.sol",name:"ApeSwapZapMiniApeV2",receive:{stateMutability:"payable",type:"receive"},events:{"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapMiniApeV2(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pid",type:"uint256"}],name:"ZapMiniApeV2",type:"event"},"ZapMiniApeV2Native(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"pid",type:"uint256"}],name:"ZapMiniApeV2Native",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapMiniApeV2(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"}],name:"zapMiniApeV2",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",miniApe:"The main dualfarm contract",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pid:"Dual farm pid",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into miniApev2 style dual farm"},"zapMiniApeV2Native(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"}],name:"zapMiniApeV2Native",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",miniApe:"The main dualfarm contract",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pid:"Dual Farm pid",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into miniApev2 style dual farm"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"}}},"contracts/_old/extensions/farms/libraries/IMiniApeV2.sol:IMiniApeV2":{source:"contracts/_old/extensions/farms/libraries/IMiniApeV2.sol",name:"IMiniApeV2",methods:{"deposit(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"lpToken(uint256)":{inputs:[{internalType:"uint256",name:"pid",type:"uint256"}],name:"lpToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/pools/ApeSwapZapPools.sol:ApeSwapZapPools":{source:"contracts/_old/extensions/pools/ApeSwapZapPools.sol",name:"ApeSwapZapPools",receive:{stateMutability:"payable",type:"receive"},events:{"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapLPPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPool",type:"event"},"ZapLPPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapLPPoolNative",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapSingleAssetPool(address,uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPool",type:"event"},"ZapSingleAssetPoolNative(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"ZapSingleAssetPoolNative",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapLPPool(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap token into banana/gnana pool"},"zapLPPoolNative(address[],address[],address[],uint256[],uint256[],uint256,address)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapLPPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",pool:"Pool address",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native into banana/gnana pool"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapSingleAssetPool(address,uint256,address[],uint256,uint256,address)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPool",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap token into banana/gnana pool"},"zapSingleAssetPoolNative(address[],uint256,uint256,address)":{inputs:[{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountsSwap",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"}],name:"zapSingleAssetPoolNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path:"Path from input token to stake token",pool:"Pool address"},notice:"Zap native into banana/gnana pool"}}},"contracts/_old/extensions/pools/libraries/BEP20RewardApeV5.sol:BEP20RewardApeV5":{source:"contracts/_old/extensions/pools/libraries/BEP20RewardApeV5.sol",name:"BEP20RewardApeV5",events:{"Deposit(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"DepositRewards(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"DepositRewards",type:"event"},"EmergencyRewardWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyRewardWithdraw",type:"event"},"EmergencySweepWithdraw(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencySweepWithdraw",type:"event"},"EmergencyWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LogUpdatePool(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"bonusEndBlock",type:"uint256"},{indexed:!1,internalType:"uint256",name:"rewardPerBlock",type:"uint256"}],name:"LogUpdatePool",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"SkimStakeTokenFees(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"SkimStakeTokenFees",type:"event"},"Withdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"REWARD_TOKEN()":{inputs:[],name:"REWARD_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"STAKE_TOKEN()":{inputs:[],name:"STAKE_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bonusEndBlock()":{inputs:[],name:"bonusEndBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Since this contract needs to be supplied with rewards we are  sending the balance of the contract if the pending rewards are higher",params:{_amount:"The amount of staking tokens to deposit"},notice:"Deposit staking token into the contract to earn rewards."},"depositRewards(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyRewardWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyRewardWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyWithdraw()":{inputs:[],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"getMultiplier(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getStakeTokenFeeBalance()":{inputs:[],name:"getStakeTokenFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the stake token fees (if any) earned by reflect token",notice:"If STAKE_TOKEN == REWARD_TOKEN there are no fees to skim"},"getUnharvestedRewards()":{inputs:[],name:"getUnharvestedRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"wei balance of rewards left to be paid"},notice:"Get the balance of rewards that have not been harvested"},"initialize(address,address,uint256,uint256,uint256)":{inputs:[{internalType:"contract IERC20",name:"_stakeToken",type:"address"},{internalType:"contract IERC20",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolInfo()":{inputs:[],name:"poolInfo",outputs:[{internalType:"contract IERC20",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accRewardTokenPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"rewardBalance()":{inputs:[],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"wei balace of conract"},notice:"Obtain the reward balance of this contract"},"rewardPerBlock()":{inputs:[],name:"rewardPerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setBonusEndBlock(uint256)":{inputs:[{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"setBonusEndBlock",outputs:[],stateMutability:"nonpayable",type:"function",params:{_bonusEndBlock:"The block when rewards will end"}},"setRewardPerBlock(uint256)":{inputs:[{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"}],name:"setRewardPerBlock",outputs:[],stateMutability:"nonpayable",type:"function",params:{_rewardPerBlock:"The amount of reward tokens to be given per block"}},"skimStakeTokenFees(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"skimStakeTokenFees",outputs:[],stateMutability:"nonpayable",type:"function",details:"Remove excess stake tokens earned by reflect fees"},"startBlock()":{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"sweepToken(address)":{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{token:"The address of the BEP20 token to sweep"},notice:"A public function to sweep accidental BEP20 transfers to this contract.   Tokens are sent to owner"},"totalRewardsAllocated()":{inputs:[],name:"totalRewardsAllocated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalRewardsPaid()":{inputs:[],name:"totalRewardsPaid",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStakeTokenBalance()":{inputs:[],name:"totalStakeTokenBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the stake balance of this contract"},"totalStaked()":{inputs:[],name:"totalStaked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"The amount of staking tokens to withdraw"},notice:"Withdraw rewards and/or staked tokens. Pass a 0 amount to withdraw only rewards"}}},"contracts/_old/extensions/pools/libraries/IBEP20RewardApeV5.sol:IBEP20RewardApeV5":{source:"contracts/_old/extensions/pools/libraries/IBEP20RewardApeV5.sol",name:"IBEP20RewardApeV5",methods:{"REWARD_TOKEN()":{inputs:[],name:"REWARD_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"STAKE_TOKEN()":{inputs:[],name:"STAKE_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bonusEndBlock()":{inputs:[],name:"bonusEndBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositRewards(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyRewardWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyRewardWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyWithdraw()":{inputs:[],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"getMultiplier(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getStakeTokenFeeBalance()":{inputs:[],name:"getStakeTokenFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUnharvestedRewards()":{inputs:[],name:"getUnharvestedRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"_stakeToken",type:"address"},{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolInfo()":{inputs:[],name:"poolInfo",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accRewardTokenPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardBalance()":{inputs:[],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardPerBlock()":{inputs:[],name:"rewardPerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setBonusEndBlock(uint256)":{inputs:[{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"setBonusEndBlock",outputs:[],stateMutability:"nonpayable",type:"function"},"setRewardPerBlock(uint256)":{inputs:[{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"}],name:"setRewardPerBlock",outputs:[],stateMutability:"nonpayable",type:"function"},"skimStakeTokenFees(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"skimStakeTokenFees",outputs:[],stateMutability:"nonpayable",type:"function"},"startBlock()":{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"sweepToken(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"nonpayable",type:"function"},"totalRewardsAllocated()":{inputs:[],name:"totalRewardsAllocated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalRewardsPaid()":{inputs:[],name:"totalRewardsPaid",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStakeTokenBalance()":{inputs:[],name:"totalStakeTokenBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStaked()":{inputs:[],name:"totalStaked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/pools/libraries/ITreasury.sol:ITreasury":{source:"contracts/_old/extensions/pools/libraries/ITreasury.sol",name:"ITreasury",methods:{"adminAddress()":{inputs:[],name:"adminAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"banana()":{inputs:[],name:"banana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bananaReserves()":{inputs:[],name:"bananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buy(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"buy",outputs:[],stateMutability:"nonpayable",type:"function"},"buyFee()":{inputs:[],name:"buyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"emergencyWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"goldenBanana()":{inputs:[],name:"goldenBanana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"goldenBananaReserves()":{inputs:[],name:"goldenBananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"maxBuyFee()":{inputs:[],name:"maxBuyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"sell(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"sell",outputs:[],stateMutability:"nonpayable",type:"function"},"setAdmin(address)":{inputs:[{internalType:"address",name:"_adminAddress",type:"address"}],name:"setAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},"setBuyFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setBuyFee",outputs:[],stateMutability:"nonpayable",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/vaults/ApeSwapZapVaults.sol:ApeSwapZapVaults":{source:"contracts/_old/extensions/vaults/ApeSwapZapVaults.sol",name:"ApeSwapZapVaults",receive:{stateMutability:"payable",type:"receive"},events:{"Zap(address,uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"address",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"Zap",type:"event"},"ZapNative(uint256,address[])":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"address[]",name:"underlyingTokens",type:"address[]"}],name:"ZapNative",type:"event"},"ZapVault(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVault",type:"event"},"ZapVaultNative(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVaultNative",type:"event"}},methods:{"WNATIVE()":{inputs:[],name:"WNATIVE",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function",params:{inputAmount:"total input amount for swap",path0:"path from input token to LP token0",path1:"path from input token to LP token1"},notice:"get min amounts for swaps"},"router()":{inputs:[],name:"router",outputs:[{internalType:"contract IApeRouter02",name:"",type:"address"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Input amount",inputToken:"Input token",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap single token to LP"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",to:"address to receive LPs",underlyingTokens:"Tokens of LP to zap to"},notice:"Zap native token to LP"},"zapVault(address,uint256,address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"zapVault",outputs:[],stateMutability:"nonpayable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",inputAmount:"Amount of input tokens to zap",inputToken:"Input token to zap",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to",vaultPid:"Vault address"},notice:"Zap token into banana/gnana vault"},"zapVaultNative(address[],address[],address[],uint256[],uint256[],uint256,address,uint256)":{inputs:[{internalType:"address[]",name:"underlyingTokens",type:"address[]"},{internalType:"address[]",name:"path0",type:"address[]"},{internalType:"address[]",name:"path1",type:"address[]"},{internalType:"uint256[]",name:"minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"minAmountsLP",type:"uint256[]"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"zapVaultNative",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"Unix timestamp after which the transaction will revert",minAmountsLP:"AmountAMin and amountBMin for adding liquidity",minAmountsSwap:"The minimum amount of output tokens that must be received for swap",path0:"Path from input token to LP token0",path1:"Path from input token to LP token1",underlyingTokens:"Tokens of LP to zap to",vaultPid:"Vault pid"},notice:"Zap native into banana/gnana vault"}}},"contracts/_old/extensions/vaults/libraries/IBaseBananaMaximizerStrategy.sol:IBaseBananaMaximizerStrategy":{source:"contracts/_old/extensions/vaults/libraries/IBaseBananaMaximizerStrategy.sol",name:"IBaseBananaMaximizerStrategy",methods:{"STAKE_TOKEN_ADDRESS()":{inputs:[],name:"STAKE_TOKEN_ADDRESS",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/extensions/vaults/libraries/IMaximizerVaultApe.sol:IMaximizerVaultApe":{source:"contracts/_old/extensions/vaults/libraries/IMaximizerVaultApe.sol",name:"IMaximizerVaultApe",methods:{"BUYBACK_RATE_UL()":{inputs:[],name:"BUYBACK_RATE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"KEEPER_FEE_UL()":{inputs:[],name:"KEEPER_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PLATFORM_FEE_UL()":{inputs:[],name:"PLATFORM_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_FEE_PERIOD_UL()":{inputs:[],name:"WITHDRAW_FEE_PERIOD_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_FEE_UL()":{inputs:[],name:"WITHDRAW_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_REWARDS_FEE_UL()":{inputs:[],name:"WITHDRAW_REWARDS_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"addVault(address)":{inputs:[{internalType:"address",name:"_strat",type:"address"}],name:"addVault",outputs:[],stateMutability:"nonpayable",type:"function"},"deposit(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"earnAll()":{inputs:[],name:"earnAll",outputs:[],stateMutability:"nonpayable",type:"function"},"earnSome(uint256[])":{inputs:[{internalType:"uint256[]",name:"pids",type:"uint256[]"}],name:"earnSome",outputs:[],stateMutability:"nonpayable",type:"function"},"getSettings()":{inputs:[],name:"getSettings",outputs:[{components:[{internalType:"address",name:"treasury",type:"address"},{internalType:"uint256",name:"keeperFee",type:"uint256"},{internalType:"address",name:"platform",type:"address"},{internalType:"uint256",name:"platformFee",type:"uint256"},{internalType:"uint256",name:"buyBackRate",type:"uint256"},{internalType:"uint256",name:"withdrawFee",type:"uint256"},{internalType:"uint256",name:"withdrawFeePeriod",type:"uint256"},{internalType:"uint256",name:"withdrawRewardsFee",type:"uint256"}],internalType:"struct IMaximizerVaultApe.Settings",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"harvest(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function"},"harvestAll(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"harvestAll",outputs:[],stateMutability:"nonpayable",type:"function"},"stakedWantTokens(uint256,address)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"stakedWantTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userInfo(uint256,address)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"autoBananaShares",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"},{internalType:"uint256",name:"lastDepositedTime",type:"uint256"}],stateMutability:"view",type:"function"},"vaults(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"vaults",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultsLength()":{inputs:[],name:"vaultsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"withdrawAll(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/_old/interfaces/IApeSwapZap.sol:IApeSwapZap":{source:"contracts/_old/interfaces/IApeSwapZap.sol",name:"IApeSwapZap",methods:{"getMinAmounts(uint256,address[],address[])":{inputs:[{internalType:"uint256",name:"_inputAmount",type:"uint256"},{internalType:"address[]",name:"_path0",type:"address[]"},{internalType:"address[]",name:"_path1",type:"address[]"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"_minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"_minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function"},"zap(address,uint256,address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"contract IERC20",name:"_inputToken",type:"address"},{internalType:"uint256",name:"_inputAmount",type:"uint256"},{internalType:"address[]",name:"_underlyingTokens",type:"address[]"},{internalType:"address[]",name:"_path0",type:"address[]"},{internalType:"address[]",name:"_path1",type:"address[]"},{internalType:"uint256[]",name:"_minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"_minAmountsLP",type:"uint256[]"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function"},"zapNative(address[],address[],address[],uint256[],uint256[],address,uint256)":{inputs:[{internalType:"address[]",name:"_underlyingTokens",type:"address[]"},{internalType:"address[]",name:"_path0",type:"address[]"},{internalType:"address[]",name:"_path1",type:"address[]"},{internalType:"uint256[]",name:"_minAmountsSwap",type:"uint256[]"},{internalType:"uint256[]",name:"_minAmountsLP",type:"uint256[]"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_deadline",type:"uint256"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/_old/interfaces/IApeSwapZapV2.sol:IApeSwapZapV2":{source:"contracts/_old/interfaces/IApeSwapZapV2.sol",name:"IApeSwapZapV2",methods:{"getMinAmounts((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address)))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IApeSwapZapV2.MinAmountsParams",name:"params",type:"tuple"}],name:"getMinAmounts",outputs:[{internalType:"uint256[2]",name:"minAmountsSwap",type:"uint256[2]"},{internalType:"uint256[2]",name:"minAmountsLP",type:"uint256[2]"}],stateMutability:"view",type:"function"},"zap((address,uint256,address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParams",name:"zapParams",type:"tuple"}],name:"zap",outputs:[],stateMutability:"nonpayable",type:"function"},"zapNative((address,address,(address,uint8,address[],uint256,uint24[]),(address,uint8,address[],uint256,uint24[]),(address,uint8,uint256,uint256,uint24,address),address,uint256))":{inputs:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path0",type:"tuple"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IApeSwapZapV2.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint256",name:"minAmountSwap",type:"uint256"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IApeSwapZapV2.SwapPath",name:"path1",type:"tuple"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IApeSwapZapV2.LPType",name:"lpType",type:"uint8"},{internalType:"uint256",name:"minAmountLP0",type:"uint256"},{internalType:"uint256",name:"minAmountLP1",type:"uint256"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IApeSwapZapV2.LiquidityPath",name:"liquidityPath",type:"tuple"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct IApeSwapZapV2.ZapParamsNative",name:"zapParamsNative",type:"tuple"}],name:"zapNative",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/_old/lens/LPBalanceChecker.sol:LPBalanceChecker":{source:"contracts/_old/lens/LPBalanceChecker.sol",name:"LPBalanceChecker",details:"Messing around with a pattern where the onlyOwner functions are completely in a separate contract",constructor:{inputs:[{internalType:"address[]",name:"_stakingContracts",type:"address[]"},{internalType:"contract IApeFactory[]",name:"_factoryContract",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"addStakingContract(address,address)":{inputs:[{internalType:"address",name:"stakingContract",type:"address"},{internalType:"contract IApeFactory",name:"factoryContract",type:"address"}],name:"addStakingContract",outputs:[],stateMutability:"nonpayable",type:"function"},"getBalance(address)":{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getBalance",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerBase.Balances[]",name:"pBalances",type:"tuple[]"}],stateMutability:"view",type:"function"},"masterApe()":{inputs:[],name:"masterApe",outputs:[{internalType:"contract IMasterApe",name:"",type:"address"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pcsMasterChefV2()":{inputs:[],name:"pcsMasterChefV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolManager()":{inputs:[],name:"poolManager",outputs:[{internalType:"contract IPoolManager",name:"",type:"address"}],stateMutability:"view",type:"function"},"removeStakingContract(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"removeStakingContract",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"stakingContractToFactory(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"stakingContractToFactory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"stakingContracts(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingContracts",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/_old/lens/LPBalanceChecker.sol:LPBalanceCheckerBase":{source:"contracts/_old/lens/LPBalanceChecker.sol",name:"LPBalanceCheckerBase",constructor:{inputs:[{internalType:"address[]",name:"_stakingContracts",type:"address[]"},{internalType:"contract IApeFactory[]",name:"_factoryContract",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},methods:{"getBalance(address)":{inputs:[{internalType:"address",name:"user",type:"address"}],name:"getBalance",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerBase.Balances[]",name:"pBalances",type:"tuple[]"}],stateMutability:"view",type:"function"},"masterApe()":{inputs:[],name:"masterApe",outputs:[{internalType:"contract IMasterApe",name:"",type:"address"}],stateMutability:"view",type:"function"},"pcsMasterChefV2()":{inputs:[],name:"pcsMasterChefV2",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"poolManager()":{inputs:[],name:"poolManager",outputs:[{internalType:"contract IPoolManager",name:"",type:"address"}],stateMutability:"view",type:"function"},"stakingContractToFactory(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"stakingContractToFactory",outputs:[{internalType:"contract IApeFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"stakingContracts(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingContracts",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/LPBalanceCheckerPolygon.sol:LPBalanceCheckerPolygon":{source:"contracts/_old/lens/LPBalanceCheckerPolygon.sol",name:"LPBalanceCheckerPolygon",details:"Messing around with a pattern where the onlyOwner functions are completely in a separate contract",constructor:{inputs:[{internalType:"address[]",name:"_stakingContracts",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},events:{"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"}},methods:{"addStakingContract(address)":{inputs:[{internalType:"address",name:"stakingContract",type:"address"}],name:"addStakingContract",outputs:[],stateMutability:"nonpayable",type:"function"},"getBalance(address,uint256)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"customArraySize",type:"uint256"}],name:"getBalance",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerPolygonBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerPolygonBase.Balances[]",name:"pBalances",type:"tuple[]"}],stateMutability:"view",type:"function"},"getBalanceQuickswap(address,uint256,bool)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"customArraySize",type:"uint256"},{internalType:"bool",name:"dual",type:"bool"}],name:"getBalanceQuickswap",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerPolygonBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerPolygonBase.Balances",name:"pBalance",type:"tuple"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"quickswapDualStakingRewardsFactory()":{inputs:[],name:"quickswapDualStakingRewardsFactory",outputs:[{internalType:"contract IDualStakingRewardsFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"quickswapStakingRewardsFactory()":{inputs:[],name:"quickswapStakingRewardsFactory",outputs:[{internalType:"contract IStakingRewardsFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"removeStakingContract(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"removeStakingContract",outputs:[],stateMutability:"nonpayable",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"stakingContracts(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingContracts",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/_old/lens/LPBalanceCheckerPolygon.sol:LPBalanceCheckerPolygonBase":{source:"contracts/_old/lens/LPBalanceCheckerPolygon.sol",name:"LPBalanceCheckerPolygonBase",constructor:{inputs:[{internalType:"address[]",name:"_stakingContracts",type:"address[]"}],stateMutability:"nonpayable",type:"constructor"},methods:{"getBalance(address,uint256)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"customArraySize",type:"uint256"}],name:"getBalance",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerPolygonBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerPolygonBase.Balances[]",name:"pBalances",type:"tuple[]"}],stateMutability:"view",type:"function"},"getBalanceQuickswap(address,uint256,bool)":{inputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"customArraySize",type:"uint256"},{internalType:"bool",name:"dual",type:"bool"}],name:"getBalanceQuickswap",outputs:[{components:[{internalType:"address",name:"stakingAddress",type:"address"},{components:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"lp",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"total",type:"uint256"},{internalType:"uint256",name:"wallet",type:"uint256"},{internalType:"uint256",name:"staked",type:"uint256"}],internalType:"struct LPBalanceCheckerPolygonBase.Balance[]",name:"balances",type:"tuple[]"}],internalType:"struct LPBalanceCheckerPolygonBase.Balances",name:"pBalance",type:"tuple"}],stateMutability:"view",type:"function"},"quickswapDualStakingRewardsFactory()":{inputs:[],name:"quickswapDualStakingRewardsFactory",outputs:[{internalType:"contract IDualStakingRewardsFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"quickswapStakingRewardsFactory()":{inputs:[],name:"quickswapStakingRewardsFactory",outputs:[{internalType:"contract IStakingRewardsFactory",name:"",type:"address"}],stateMutability:"view",type:"function"},"stakingContracts(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingContracts",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/libraries/IDualStakingRewardsFactory.sol:IDualStakingRewardsFactory":{source:"contracts/_old/lens/libraries/IDualStakingRewardsFactory.sol",name:"IDualStakingRewardsFactory",methods:{"stakingRewardsInfoByStakingToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"stakingRewardsInfoByStakingToken",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"stakingTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingTokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/libraries/IPoolManager.sol:IPoolManager":{source:"contracts/_old/lens/libraries/IPoolManager.sol",name:"IPoolManager",methods:{"allActivePools()":{inputs:[],name:"allActivePools",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"allLegacyPools()":{inputs:[],name:"allLegacyPools",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"allNewPools()":{inputs:[],name:"allNewPools",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"getActivePoolCount()":{inputs:[],name:"getActivePoolCount",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"viewTotalGovernanceHoldings(address)":{inputs:[{internalType:"address",name:"userAddress",type:"address"}],name:"viewTotalGovernanceHoldings",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/libraries/IStakingDualRewards.sol:IStakingDualRewards":{source:"contracts/_old/lens/libraries/IStakingDualRewards.sol",name:"IStakingDualRewards",methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"stakingToken()":{inputs:[],name:"stakingToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/libraries/IStakingRewardsFactory.sol:IStakingRewardsFactory":{source:"contracts/_old/lens/libraries/IStakingRewardsFactory.sol",name:"IStakingRewardsFactory",methods:{"stakingRewardsInfoByStakingToken(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"stakingRewardsInfoByStakingToken",outputs:[{internalType:"address",name:"",type:"address"},{internalType:"uint256",name:"",type:"uint256"},{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"stakingTokens(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"stakingTokens",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}}},"contracts/_old/lens/libraries/IUniV3PriceGetter.sol:IUniV3PriceGetter":{source:"contracts/_old/lens/libraries/IUniV3PriceGetter.sol",name:"IUniV3PriceGetter",methods:{"getPrice(address,uint32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint32",name:"_secondsAgo",type:"uint32"}],name:"getPrice",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/_old/libraries/ArrakisMath.sol:ArrakisMath":{source:"contracts/_old/libraries/ArrakisMath.sol",name:"ArrakisMath"},"contracts/extensions/bills/ApeSwapZapTBills.sol:ApeSwapZapTBills":{source:"contracts/extensions/bills/ApeSwapZapTBills.sol",name:"ApeSwapZapTBills",events:{"ZapTBill((address,uint256,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapTBills.zapTBillParams",name:"params",type:"tuple"}],name:"ZapTBill",type:"event"}},methods:{"zapTBill((address,uint256,uint256,address))":{inputs:[{components:[{internalType:"contract ICustomBill",name:"bill",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"uint256",name:"maxPrice",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapTBills.zapTBillParams",name:"params",type:"tuple"}],name:"zapTBill",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/extensions/bills/libraries/ICustomBill.sol:ICustomBill":{source:"contracts/extensions/bills/libraries/ICustomBill.sol",name:"ICustomBill",methods:{"deposit(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"uint256",name:"_maxPrice",type:"uint256"},{internalType:"address",name:"_depositor",type:"address"}],name:"deposit",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"principalToken()":{inputs:[],name:"principalToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/farms/ApeSwapZapMiniApeV2.sol:ApeSwapZapMiniApeV2":{source:"contracts/extensions/farms/ApeSwapZapMiniApeV2.sol",name:"ApeSwapZapMiniApeV2",events:{"ZapMiniApeV2((uint256,address,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapMiniApeV2.zapMiniApeV2Params",name:"params",type:"tuple"}],name:"ZapMiniApeV2",type:"event"}},methods:{"zapMiniApeV2((uint256,address,uint256,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMiniApeV2",name:"miniApe",type:"address"},{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapMiniApeV2.zapMiniApeV2Params",name:"params",type:"tuple"}],name:"zapMiniApeV2",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/extensions/farms/libraries/IMasterApe.sol:IMasterApe":{source:"contracts/extensions/farms/libraries/IMasterApe.sol",name:"IMasterApe",methods:{"BONUS_MULTIPLIER()":{inputs:[],name:"BONUS_MULTIPLIER",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"add(uint256,address,bool)":{inputs:[{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"address",name:"_lpToken",type:"address"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"add",outputs:[],stateMutability:"nonpayable",type:"function"},"cake()":{inputs:[],name:"cake",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"cakePerBlock()":{inputs:[],name:"cakePerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"checkPoolDuplicate(address)":{inputs:[{internalType:"address",name:"_lpToken",type:"address"}],name:"checkPoolDuplicate",outputs:[],stateMutability:"view",type:"function"},"deposit(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"dev(address)":{inputs:[{internalType:"address",name:"_devaddr",type:"address"}],name:"dev",outputs:[],stateMutability:"nonpayable",type:"function"},"devaddr()":{inputs:[],name:"devaddr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"emergencyWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"enterStaking(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"enterStaking",outputs:[],stateMutability:"nonpayable",type:"function"},"getMultiplier(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getPoolInfo(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"getPoolInfo",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accCakePerShare",type:"uint256"}],stateMutability:"view",type:"function"},"leaveStaking(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"leaveStaking",outputs:[],stateMutability:"nonpayable",type:"function"},"lpToken(uint256)":{inputs:[{internalType:"uint256",name:"input",type:"uint256"}],name:"lpToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"massUpdatePools()":{inputs:[],name:"massUpdatePools",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"pendingCake(uint256,address)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"pendingCake",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolInfo(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"poolInfo",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accCakePerShare",type:"uint256"}],stateMutability:"view",type:"function"},"poolLength()":{inputs:[],name:"poolLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"set(uint256,uint256,bool)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_allocPoint",type:"uint256"},{internalType:"bool",name:"_withUpdate",type:"bool"}],name:"set",outputs:[],stateMutability:"nonpayable",type:"function"},"startBlock()":{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"syrup()":{inputs:[],name:"syrup",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalAllocPoint()":{inputs:[],name:"totalAllocPoint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"updateMultiplier(uint256)":{inputs:[{internalType:"uint256",name:"multiplierNumber",type:"uint256"}],name:"updateMultiplier",outputs:[],stateMutability:"nonpayable",type:"function"},"updatePool(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"userInfo(uint256,address)":{inputs:[{internalType:"uint256",name:"",type:"uint256"},{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/farms/libraries/IMiniApeV2.sol:IMiniApeV2":{source:"contracts/extensions/farms/libraries/IMiniApeV2.sol",name:"IMiniApeV2",methods:{"deposit(uint256,uint256,address)":{inputs:[{internalType:"uint256",name:"pid",type:"uint256"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"lpToken(uint256)":{inputs:[{internalType:"uint256",name:"pid",type:"uint256"}],name:"lpToken",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/lending/ApeSwapZapLending.sol:ApeSwapZapLending":{source:"contracts/extensions/lending/ApeSwapZapLending.sol",name:"ApeSwapZapLending",events:{"ZapLending(uint256,address,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICErc20",name:"market",type:"address"},{indexed:!1,internalType:"uint256",name:"outputAmount",type:"uint256"}],name:"ZapLending",type:"event"},"ZapLendingMarket(uint256,address)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"contract ICErc20",name:"market",type:"address"}],name:"ZapLendingMarket",type:"event"}},stateVariables:{"LENDING_NATIVE_UNDERLYING()":{inputs:[],name:"LENDING_NATIVE_UNDERLYING",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"stateVariable",details:"Native token market underlying"}},methods:{"zapLendingMarket(uint256,address,address)":{inputs:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract ICErc20",name:"market",type:"address"},{internalType:"address",name:"recipient",type:"address"}],name:"zapLendingMarket",outputs:[],stateMutability:"payable",type:"function",params:{inputAmount:"Amount of input tokens to zap",market:"Lending market to deposit to",recipient:"Recipient of cTokens"},notice:"Zap token single asset lending market"}}},"contracts/extensions/lending/lib/EIP20NonStandardInterface.sol:EIP20NonStandardInterface":{source:"contracts/extensions/lending/lib/EIP20NonStandardInterface.sol",name:"EIP20NonStandardInterface",title:"EIP20NonStandardInterface",details:"Version of ERC20 with no return values for `transfer` and `transferFrom`  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"remaining",type:"uint256"}],stateMutability:"view",type:"function",params:{owner:"The address of the account which owns the tokens to be spent",spender:"The address of the account which may transfer tokens"},returns:{remaining:"The number of tokens allowed to be spent"},notice:"Get the current allowance from `owner` for `spender`"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"success",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",params:{amount:"The number of tokens that are approved",spender:"The address of the account which may transfer tokens"},returns:{success:"Whether or not the approval succeeded"},notice:"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function",params:{owner:"The address from which the balance will be retrieved"},returns:{balance:"The balance"},notice:"Gets the balance of the specified address"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"The supply of tokens"},notice:"Get the total number of tokens in circulation"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The number of tokens to transfer",dst:"The address of the destination account"},notice:"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"src",type:"address"},{internalType:"address",name:"dst",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The number of tokens to transfer",dst:"The address of the destination account",src:"The address of the source account"},notice:"Transfer `amount` tokens from `src` to `dst`"}}},"contracts/extensions/lending/lib/ICErc20.sol:ICErc20":{source:"contracts/extensions/lending/lib/ICErc20.sol",name:"ICErc20",title:"Compound's CErc20 Contract",details:"Interface from CErc20V0_05.sol",notice:"CTokens which wrap an EIP-20 underlying and are delegated to a CTokenDelegate",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Approval",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"remaining",type:"uint256"}],stateMutability:"view",type:"function",params:{owner:"The address of the account which owns the tokens to be spent",spender:"The address of the account which may transfer tokens"},returns:{remaining:"The number of tokens allowed to be spent"},notice:"Get the current allowance from `owner` for `spender`"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"success",type:"bool"}],stateMutability:"nonpayable",type:"function",details:"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",params:{amount:"The number of tokens that are approved",spender:"The address of the account which may transfer tokens"},returns:{success:"Whether or not the approval succeeded"},notice:"Approve `spender` to transfer up to `amount` from `src`"},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function",params:{owner:"The address from which the balance will be retrieved"},returns:{balance:"The balance"},notice:"Gets the balance of the specified address"},"borrow(uint256)":{inputs:[{internalType:"uint256",name:"borrowAmount",type:"uint256"}],name:"borrow",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{borrowAmount:"The amount of the underlying asset to borrow"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender borrows assets from the protocol to their own address"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"view",type:"function",notice:"EIP-20 token decimals for this token"},"liquidateBorrow(address,uint256,address)":{inputs:[{internalType:"address",name:"borrower",type:"address"},{internalType:"uint256",name:"repayAmount",type:"uint256"},{internalType:"address",name:"cTokenCollateral",type:"address"}],name:"liquidateBorrow",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{borrower:"The borrower of this cToken to be liquidated",cTokenCollateral:"The market in which to seize collateral from the borrower",repayAmount:"The amount of the underlying borrowed asset to repay"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."},"mint()":{inputs:[],name:"mint",outputs:[],stateMutability:"payable",type:"function",details:"Accrues interest whether or not the operation succeeds, unless reverted",notice:"Sender supplies assets into the market and receives cTokens in exchange"},"mint(uint256)":{inputs:[{internalType:"uint256",name:"mintAmount",type:"uint256"}],name:"mint",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Accrues interest whether or not the operation succeeds, unless reverted",params:{mintAmount:"The amount of the underlying asset to supply"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender supplies assets into the market and receives cTokens in exchange"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"EIP-20 token name for this token"},"redeem(uint256)":{inputs:[{internalType:"uint256",name:"redeemTokens",type:"uint256"}],name:"redeem",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Accrues interest whether or not the operation succeeds, unless reverted",params:{redeemTokens:"The number of cTokens to redeem into underlying"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender redeems cTokens in exchange for the underlying asset"},"redeemUnderlying(uint256)":{inputs:[{internalType:"uint256",name:"redeemAmount",type:"uint256"}],name:"redeemUnderlying",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",details:"Accrues interest whether or not the operation succeeds, unless reverted",params:{redeemAmount:"The amount of underlying to redeem"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender redeems cTokens in exchange for a specified amount of underlying asset"},"repayBorrow(uint256)":{inputs:[{internalType:"uint256",name:"repayAmount",type:"uint256"}],name:"repayBorrow",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{repayAmount:"The amount to repay"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender repays their own borrow"},"repayBorrowBehalf(address,uint256)":{inputs:[{internalType:"address",name:"borrower",type:"address"},{internalType:"uint256",name:"repayAmount",type:"uint256"}],name:"repayBorrowBehalf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function",params:{borrower:"the account with the debt being payed off",repayAmount:"The amount to repay"},returns:{_0:"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"},notice:"Sender repays a borrow belonging to borrower"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",notice:"EIP-20 token symbol for this token"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"The supply of tokens"},notice:"Get the total number of tokens in circulation"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"dst",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transfer",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The number of tokens to transfer",dst:"The address of the destination account"},notice:"Transfer `amount` tokens from `msg.sender` to `dst`"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"src",type:"address"},{internalType:"address",name:"dst",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",params:{amount:"The number of tokens to transfer",dst:"The address of the destination account",src:"The address of the source account"},notice:"Transfer `amount` tokens from `src` to `dst`"},"underlying()":{inputs:[],name:"underlying",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",notice:"Underlying asset for this CToken"}}},"contracts/extensions/liquidity/ZapLiquidity.sol:ZapLiquidity":{source:"contracts/extensions/liquidity/ZapLiquidity.sol",name:"ZapLiquidity",events:{"AddLiquidityArrakis((address,address,address,uint24,uint256,uint256,uint256,uint256,address,uint256,address))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"address",name:"arrakisFactory",type:"address"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityArrakisParams",name:"params",type:"tuple"}],name:"AddLiquidityArrakis",type:"event"},"AddLiquidityGamma((address,address,address,uint256,uint256,address,uint256[4]))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"inMin",type:"uint256[4]"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityGammaParams",name:"params",type:"tuple"}],name:"AddLiquidityGamma",type:"event"},"AddLiquidityV2((address,address,address,uint256,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityV2Params",name:"params",type:"tuple"}],name:"AddLiquidityV2",type:"event"},"AddLiquidityV3((address,address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.AddLiquidityV3Params",name:"params",type:"tuple"}],name:"AddLiquidityV3",type:"event"},"RemoveLiquidityGamma((address,uint256,address,uint256[4]))":{anonymous:!1,inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"minAmounts",type:"uint256[4]"}],indexed:!1,internalType:"struct ZapLiquidity.RemoveLiquidityGammaParams",name:"params",type:"tuple"}],name:"RemoveLiquidityGamma",type:"event"},"RemoveLiquidityV2((address,address,uint256,uint256,uint256,address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IV2LiquidityRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapLiquidity.RemoveLiquidityV2Params",name:"params",type:"tuple"}],name:"RemoveLiquidityV2",type:"event"}},methods:{"addLiquidityArrakis((address,address,address,uint24,uint256,uint256,uint256,uint256,address,uint256,address))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct ZapLiquidity.AddLiquidityArrakisParams",name:"params",type:"tuple"}],name:"addLiquidityArrakis",outputs:[{internalType:"uint256",name:"amount0Lp",type:"uint256"},{internalType:"uint256",name:"amount1Lp",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityGamma((address,address,address,uint256,uint256,address,uint256[4]))":{inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"inMin",type:"uint256[4]"}],internalType:"struct ZapLiquidity.AddLiquidityGammaParams",name:"params",type:"tuple"}],name:"addLiquidityGamma",outputs:[{internalType:"uint256",name:"shares",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityV2((address,address,address,uint256,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.AddLiquidityV2Params",name:"params",type:"tuple"}],name:"addLiquidityV2",outputs:[{internalType:"uint256",name:"amount0Lp",type:"uint256"},{internalType:"uint256",name:"amount1Lp",type:"uint256"}],stateMutability:"payable",type:"function"},"addLiquidityV3((address,address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.AddLiquidityV3Params",name:"params",type:"tuple"}],name:"addLiquidityV3",outputs:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function"},"removeLiquidityGamma((address,uint256,address,uint256[4]))":{inputs:[{components:[{internalType:"address",name:"hypervisor",type:"address"},{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256[4]",name:"minAmounts",type:"uint256[4]"}],internalType:"struct ZapLiquidity.RemoveLiquidityGammaParams",name:"params",type:"tuple"}],name:"removeLiquidityGamma",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function"},"removeLiquidityV2((address,address,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"contract IV2LiquidityRouter02",name:"router",type:"address"},{internalType:"contract IApePair",name:"lp",type:"address"},{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"amountAMinRemove",type:"uint256"},{internalType:"uint256",name:"amountBMinRemove",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapLiquidity.RemoveLiquidityV2Params",name:"params",type:"tuple"}],name:"removeLiquidityV2",outputs:[{internalType:"uint256",name:"amountAReceived",type:"uint256"},{internalType:"uint256",name:"amountBReceived",type:"uint256"}],stateMutability:"payable",type:"function"}}},"contracts/extensions/liquidity/features/arrakis/ArrakisHelper.sol:ArrakisHelper":{source:"contracts/extensions/liquidity/features/arrakis/ArrakisHelper.sol",name:"ArrakisHelper"},"contracts/extensions/liquidity/features/arrakis/lib/IArrakisFactoryV1.sol:IArrakisFactoryV1":{source:"contracts/extensions/liquidity/features/arrakis/lib/IArrakisFactoryV1.sol",name:"IArrakisFactoryV1",methods:{"deployVault(address,address,uint24,address,uint16,int24,int24)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"uniFee",type:"uint24"},{internalType:"address",name:"manager",type:"address"},{internalType:"uint16",name:"managerFee",type:"uint16"},{internalType:"int24",name:"lowerTick",type:"int24"},{internalType:"int24",name:"upperTick",type:"int24"}],name:"deployVault",outputs:[{internalType:"address",name:"pool",type:"address"}],stateMutability:"nonpayable",type:"function"},"getDeployers()":{inputs:[],name:"getDeployers",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"getGelatoPools()":{inputs:[],name:"getGelatoPools",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"getPools(address)":{inputs:[{internalType:"address",name:"deployer",type:"address"}],name:"getPools",outputs:[{internalType:"address[]",name:"",type:"address[]"}],stateMutability:"view",type:"function"},"getProxyAdmin(address)":{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"getProxyAdmin",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getTokenName(address,address)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"}],name:"getTokenName",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"},"isPoolImmutable(address)":{inputs:[{internalType:"address",name:"pool",type:"address"}],name:"isPoolImmutable",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},"makePoolsImmutable(address[])":{inputs:[{internalType:"address[]",name:"pools",type:"address[]"}],name:"makePoolsImmutable",outputs:[],stateMutability:"nonpayable",type:"function"},"numDeployers()":{inputs:[],name:"numDeployers",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"numPools()":{inputs:[],name:"numPools",outputs:[{internalType:"uint256",name:"result",type:"uint256"}],stateMutability:"view",type:"function"},"numPools(address)":{inputs:[{internalType:"address",name:"deployer",type:"address"}],name:"numPools",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"upgradePools(address[])":{inputs:[{internalType:"address[]",name:"pools",type:"address[]"}],name:"upgradePools",outputs:[],stateMutability:"nonpayable",type:"function"},"upgradePoolsAndCall(address[],bytes[])":{inputs:[{internalType:"address[]",name:"pools",type:"address[]"},{internalType:"bytes[]",name:"datas",type:"bytes[]"}],name:"upgradePoolsAndCall",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/arrakis/lib/IArrakisPool.sol:IArrakisPool":{source:"contracts/extensions/liquidity/features/arrakis/lib/IArrakisPool.sol",name:"IArrakisPool",methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"account",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"burn(uint256,address)":{inputs:[{internalType:"uint256",name:"burnAmount",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint128",name:"liquidityBurned",type:"uint128"}],stateMutability:"nonpayable",type:"function"},"getMintAmounts(uint256,uint256)":{inputs:[{internalType:"uint256",name:"amount0Max",type:"uint256"},{internalType:"uint256",name:"amount1Max",type:"uint256"}],name:"getMintAmounts",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint256",name:"mintAmount",type:"uint256"}],stateMutability:"view",type:"function"},"getPositionID()":{inputs:[],name:"getPositionID",outputs:[{internalType:"bytes32",name:"positionID",type:"bytes32"}],stateMutability:"view",type:"function"},"getUnderlyingBalances()":{inputs:[],name:"getUnderlyingBalances",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"view",type:"function"},"lowerTick()":{inputs:[],name:"lowerTick",outputs:[{internalType:"int24",name:"",type:"int24"}],stateMutability:"view",type:"function"},"mint(uint256,address)":{inputs:[{internalType:"uint256",name:"mintAmount",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint128",name:"liquidityMinted",type:"uint128"}],stateMutability:"nonpayable",type:"function"},"pool()":{inputs:[],name:"pool",outputs:[{internalType:"contract IUniswapV3Pool",name:"",type:"address"}],stateMutability:"view",type:"function"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"upperTick()":{inputs:[],name:"upperTick",outputs:[{internalType:"int24",name:"",type:"int24"}],stateMutability:"view",type:"function"}}},"contracts/extensions/liquidity/features/arrakis/lib/IArrakisRouter.sol:IArrakisRouter":{source:"contracts/extensions/liquidity/features/arrakis/lib/IArrakisRouter.sol",name:"IArrakisRouter",methods:{"addLiquidity(address,uint256,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"amount0Max",type:"uint256"},{internalType:"uint256",name:"amount1Max",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint256",name:"mintAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"amount0Max",type:"uint256"},{internalType:"uint256",name:"amount1Max",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint256",name:"mintAmount",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"rebalanceAndAddLiquidity(address,uint256,uint256,bool,uint256,uint160,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"amount0In",type:"uint256"},{internalType:"uint256",name:"amount1In",type:"uint256"},{internalType:"bool",name:"zeroForOne",type:"bool"},{internalType:"uint256",name:"swapAmount",type:"uint256"},{internalType:"uint160",name:"swapThreshold",type:"uint160"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"rebalanceAndAddLiquidity",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint256",name:"mintAmount",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"rebalanceAndAddLiquidityETH(address,uint256,uint256,bool,uint256,uint160,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"amount0In",type:"uint256"},{internalType:"uint256",name:"amount1In",type:"uint256"},{internalType:"bool",name:"zeroForOne",type:"bool"},{internalType:"uint256",name:"swapAmount",type:"uint256"},{internalType:"uint160",name:"swapThreshold",type:"uint160"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"rebalanceAndAddLiquidityETH",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint256",name:"mintAmount",type:"uint256"}],stateMutability:"payable",type:"function"},"removeLiquidity(address,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"burnAmount",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"receiver",type:"address"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint128",name:"liquidityBurned",type:"uint128"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IArrakisPool",name:"pool",type:"address"},{internalType:"uint256",name:"burnAmount",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address payable",name:"receiver",type:"address"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"},{internalType:"uint128",name:"liquidityBurned",type:"uint128"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/gamma/lib/IGammaHypervisor.sol:Hypervisor":{source:"contracts/extensions/liquidity/features/gamma/lib/IGammaHypervisor.sol",name:"Hypervisor",methods:{"token0()":{inputs:[],name:"token0",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"whitelistedAddress()":{inputs:[],name:"whitelistedAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"withdraw(uint256,address,address,uint256[4])":{inputs:[{internalType:"uint256",name:"shares",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"address",name:"from",type:"address"},{internalType:"uint256[4]",name:"minAmounts",type:"uint256[4]"}],name:"withdraw",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/gamma/lib/IGammaUniProxy.sol:UniProxy":{source:"contracts/extensions/liquidity/features/gamma/lib/IGammaUniProxy.sol",name:"UniProxy",methods:{"deposit(uint256,uint256,address,address,uint256[4])":{inputs:[{internalType:"uint256",name:"deposit0",type:"uint256"},{internalType:"uint256",name:"deposit1",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"address",name:"pos",type:"address"},{internalType:"uint256[4]",name:"inMin",type:"uint256[4]"}],name:"deposit",outputs:[{internalType:"uint256",name:"shares",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"getDepositAmount(address,address,uint256)":{inputs:[{internalType:"address",name:"pos",type:"address"},{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"_deposit",type:"uint256"}],name:"getDepositAmount",outputs:[{internalType:"uint256",name:"amountStart",type:"uint256"},{internalType:"uint256",name:"amountEnd",type:"uint256"}],stateMutability:"view",type:"function"}}},"contracts/extensions/liquidity/features/univ2/lib/IApeFactory.sol:IApeFactory":{source:"contracts/extensions/liquidity/features/univ2/lib/IApeFactory.sol",name:"IApeFactory",events:{"PairCreated(address,address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"token0",type:"address"},{indexed:!0,internalType:"address",name:"token1",type:"address"},{indexed:!1,internalType:"address",name:"pair",type:"address"},{indexed:!1,internalType:"uint256",name:"",type:"uint256"}],name:"PairCreated",type:"event"}},methods:{"INIT_CODE_PAIR_HASH()":{inputs:[],name:"INIT_CODE_PAIR_HASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"allPairs(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"allPairs",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"view",type:"function"},"allPairsLength()":{inputs:[],name:"allPairsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"createPair(address,address)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"}],name:"createPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"nonpayable",type:"function"},"feeTo()":{inputs:[],name:"feeTo",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"feeToSetter()":{inputs:[],name:"feeToSetter",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getPair(address,address)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"}],name:"getPair",outputs:[{internalType:"address",name:"pair",type:"address"}],stateMutability:"view",type:"function"},"setFeeTo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"setFeeTo",outputs:[],stateMutability:"nonpayable",type:"function"},"setFeeToSetter(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"setFeeToSetter",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/univ2/lib/IApePair.sol:IApePair":{source:"contracts/extensions/liquidity/features/univ2/lib/IApePair.sol",name:"IApePair",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"spender",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Approval",type:"event"},"Burn(address,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Burn",type:"event"},"Mint(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"Mint",type:"event"},"Swap(address,uint256,uint256,uint256,uint256,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0In",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1In",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount0Out",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1Out",type:"uint256"},{indexed:!0,internalType:"address",name:"to",type:"address"}],name:"Swap",type:"event"},"Sync(uint112,uint112)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint112",name:"reserve0",type:"uint112"},{indexed:!1,internalType:"uint112",name:"reserve1",type:"uint112"}],name:"Sync",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!1,internalType:"uint256",name:"value",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function"},"MINIMUM_LIQUIDITY()":{inputs:[],name:"MINIMUM_LIQUIDITY",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"pure",type:"function"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},"allowance(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"}],name:"allowance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"approve",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"burn(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"burn",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"decimals()":{inputs:[],name:"decimals",outputs:[{internalType:"uint8",name:"",type:"uint8"}],stateMutability:"pure",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"getReserves()":{inputs:[],name:"getReserves",outputs:[{internalType:"uint112",name:"reserve0",type:"uint112"},{internalType:"uint112",name:"reserve1",type:"uint112"},{internalType:"uint32",name:"blockTimestampLast",type:"uint32"}],stateMutability:"view",type:"function"},"initialize(address,address)":{inputs:[{internalType:"address",name:"",type:"address"},{internalType:"address",name:"",type:"address"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"kLast()":{inputs:[],name:"kLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"mint(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"mint",outputs:[{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"nonces(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"nonces",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"value",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"nonpayable",type:"function"},"price0CumulativeLast()":{inputs:[],name:"price0CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"price1CumulativeLast()":{inputs:[],name:"price1CumulativeLast",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"skim(address)":{inputs:[{internalType:"address",name:"to",type:"address"}],name:"skim",outputs:[],stateMutability:"nonpayable",type:"function"},"swap(uint256,uint256,address,bytes)":{inputs:[{internalType:"uint256",name:"amount0Out",type:"uint256"},{internalType:"uint256",name:"amount1Out",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"bytes",name:"data",type:"bytes"}],name:"swap",outputs:[],stateMutability:"nonpayable",type:"function"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"pure",type:"function"},"sync()":{inputs:[],name:"sync",outputs:[],stateMutability:"nonpayable",type:"function"},"token0()":{inputs:[],name:"token0",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"token1()":{inputs:[],name:"token1",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transferFrom",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/univ2/lib/IV2LiquidityRouter01.sol:IV2LiquidityRouter01":{source:"contracts/extensions/liquidity/features/univ2/lib/IV2LiquidityRouter01.sol",name:"IV2LiquidityRouter01",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/univ2/lib/IV2LiquidityRouter02.sol:IV2LiquidityRouter02":{source:"contracts/extensions/liquidity/features/univ2/lib/IV2LiquidityRouter02.sol",name:"IV2LiquidityRouter02",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/liquidity/features/univ3/UniV3LiquidityHelper.sol:UniV3LiquidityHelper":{source:"contracts/extensions/liquidity/features/univ3/UniV3LiquidityHelper.sol",name:"UniV3LiquidityHelper"},"contracts/extensions/liquidity/features/univ3/lib/IERC721Permit.sol:IERC721Permit":{source:"contracts/extensions/liquidity/features/univ3/lib/IERC721Permit.sol",name:"IERC721Permit",title:"ERC721 with permit",notice:"Extension to ERC721 that includes a permit function for signature based approvals",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},"ApprovalForAll(address,address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",returns:{_0:"The domain seperator used in encoding of permit signature"},notice:"The domain separator used in the permit signature"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function",returns:{_0:"The typehash for the permit"},notice:"The permit typehash used in the permit signature"},"approve(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function",details:"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"operator",type:"address"}],stateMutability:"view",type:"function",details:"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"owner",type:"address"}],stateMutability:"view",type:"function",details:"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"The deadline timestamp by which the call must be mined for the approve to work",r:"Must produce valid secp256k1 signature from the holder along with `v` and `s`",s:"Must produce valid secp256k1 signature from the holder along with `r` and `v`",spender:"The account that is being approved",tokenId:"The ID of the token that is being approved for spending",v:"Must produce valid secp256k1 signature from the holder along with `r` and `s`"},notice:"Approve of a specific token ID for spending by spender via signature"},"safeTransferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"_approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function",details:"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}}},"contracts/extensions/liquidity/features/univ3/lib/INonfungiblePositionManager.sol:INonfungiblePositionManager":{source:"contracts/extensions/liquidity/features/univ3/lib/INonfungiblePositionManager.sol",name:"INonfungiblePositionManager",title:"Non-fungible token for positions",notice:"Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred and authorized.",events:{"Approval(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"approved",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Approval",type:"event"},"ApprovalForAll(address,address,bool)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"owner",type:"address"},{indexed:!0,internalType:"address",name:"operator",type:"address"},{indexed:!1,internalType:"bool",name:"approved",type:"bool"}],name:"ApprovalForAll",type:"event"},"Collect(uint256,address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"address",name:"recipient",type:"address"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"Collect",type:"event",details:"The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior",params:{amount0:"The amount of token0 owed to the position that was collected",amount1:"The amount of token1 owed to the position that was collected",recipient:"The address of the account that received the collected tokens",tokenId:"The ID of the token for which underlying tokens were collected"},notice:"Emitted when tokens are collected for a position NFT"},"DecreaseLiquidity(uint256,uint128,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint128",name:"liquidity",type:"uint128"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"DecreaseLiquidity",type:"event",params:{amount0:"The amount of token0 that was accounted for the decrease in liquidity",amount1:"The amount of token1 that was accounted for the decrease in liquidity",liquidity:"The amount by which liquidity for the NFT position was decreased",tokenId:"The ID of the token for which liquidity was decreased"},notice:"Emitted when liquidity is decreased for a position NFT"},"IncreaseLiquidity(uint256,uint128,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"},{indexed:!1,internalType:"uint128",name:"liquidity",type:"uint128"},{indexed:!1,internalType:"uint256",name:"amount0",type:"uint256"},{indexed:!1,internalType:"uint256",name:"amount1",type:"uint256"}],name:"IncreaseLiquidity",type:"event",details:"Also emitted when a token is minted",params:{amount0:"The amount of token0 that was paid for the increase in liquidity",amount1:"The amount of token1 that was paid for the increase in liquidity",liquidity:"The amount by which liquidity for the NFT position was increased",tokenId:"The ID of the token for which liquidity was increased"},notice:"Emitted when liquidity is increased for a position NFT"},"Transfer(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"from",type:"address"},{indexed:!0,internalType:"address",name:"to",type:"address"},{indexed:!0,internalType:"uint256",name:"tokenId",type:"uint256"}],name:"Transfer",type:"event"}},methods:{"DOMAIN_SEPARATOR()":{inputs:[],name:"DOMAIN_SEPARATOR",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"view",type:"function",returns:{_0:"The domain seperator used in encoding of permit signature"},notice:"The domain separator used in the permit signature"},"PERMIT_TYPEHASH()":{inputs:[],name:"PERMIT_TYPEHASH",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function",returns:{_0:"The typehash for the permit"},notice:"The permit typehash used in the permit signature"},"WETH9()":{inputs:[],name:"WETH9",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Returns the address of WETH9"}},"approve(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"approve",outputs:[],stateMutability:"nonpayable",type:"function",details:"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{inputs:[{internalType:"address",name:"owner",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"balance",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the number of tokens in ``owner``'s account."},"burn(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"burn",outputs:[],stateMutability:"payable",type:"function",params:{tokenId:"The ID of the token that is being burned"},notice:"Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens must be collected first."},"collect((uint256,address,uint128,uint128))":{inputs:[{components:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint128",name:"amount0Max",type:"uint128"},{internalType:"uint128",name:"amount1Max",type:"uint128"}],internalType:"struct INonfungiblePositionManager.CollectParams",name:"params",type:"tuple"}],name:"collect",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"tokenId The ID of the NFT for which tokens are being collected, recipient The account that should receive the tokens, amount0Max The maximum amount of token0 to collect, amount1Max The maximum amount of token1 to collect"},returns:{amount0:"The amount of fees collected in token0",amount1:"The amount of fees collected in token1"},notice:"Collects up to a maximum amount of fees owed to a specific position to the recipient"},"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint160",name:"sqrtPriceX96",type:"uint160"}],name:"createAndInitializePoolIfNecessary",outputs:[{internalType:"address",name:"pool",type:"address"}],stateMutability:"payable",type:"function",details:"This method can be bundled with others via IMulticall for the first action   (e.g. mint) performed against a pool",params:{fee:"The fee amount of the v3 pool for the specified token pair",sqrtPriceX96:"The initial square root price of the pool as a Q64.96 value",token0:"The contract address of token0 of the pool",token1:"The contract address of token1 of the pool"},returns:{pool:"Returns the pool address based on the pair of tokens and fee, will return the  newly created pool address if necessary"},notice:"Creates a new pool if it does not exist, then initializes if not initialized"},"decreaseLiquidity((uint256,uint128,uint256,uint256,uint256))":{inputs:[{components:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct INonfungiblePositionManager.DecreaseLiquidityParams",name:"params",type:"tuple"}],name:"decreaseLiquidity",outputs:[{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"tokenId The ID of the token for which liquidity is being decreased, amount The amount by which liquidity will be decreased, amount0Min The minimum amount of token0 that should be accounted for the burned liquidity, amount1Min The minimum amount of token1 that should be accounted for the burned liquidity, deadline The time by which the transaction must be included to effect the change"},returns:{amount0:"The amount of token0 accounted to the position's tokens owed",amount1:"The amount of token1 accounted to the position's tokens owed"},notice:"Decreases the amount of liquidity in a position and accounts it to the position"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Returns the address of the Uniswap V3 factory"}},"getApproved(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"getApproved",outputs:[{internalType:"address",name:"operator",type:"address"}],stateMutability:"view",type:"function",details:"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256))":{inputs:[{components:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct INonfungiblePositionManager.IncreaseLiquidityParams",name:"params",type:"tuple"}],name:"increaseLiquidity",outputs:[{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"tokenId The ID of the token for which liquidity is being increased, amount0Desired The desired amount of token0 to be spent, amount1Desired The desired amount of token1 to be spent, amount0Min The minimum amount of token0 to spend, which serves as a slippage check, amount1Min The minimum amount of token1 to spend, which serves as a slippage check, deadline The time by which the transaction must be included to effect the change"},returns:{amount0:"The amount of token0 to acheive resulting liquidity",amount1:"The amount of token1 to acheive resulting liquidity",liquidity:"The new liquidity amount as a result of the increase"},notice:"Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`"},"isApprovedForAll(address,address)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"address",name:"operator",type:"address"}],name:"isApprovedForAll",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"mint((address,address,uint24,int24,int24,uint256,uint256,uint256,uint256,address,uint256))":{inputs:[{components:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint256",name:"amount0Desired",type:"uint256"},{internalType:"uint256",name:"amount1Desired",type:"uint256"},{internalType:"uint256",name:"amount0Min",type:"uint256"},{internalType:"uint256",name:"amount1Min",type:"uint256"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct INonfungiblePositionManager.MintParams",name:"params",type:"tuple"}],name:"mint",outputs:[{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"amount0",type:"uint256"},{internalType:"uint256",name:"amount1",type:"uint256"}],stateMutability:"payable",type:"function",details:"Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized a method does not exist, i.e. the pool is assumed to be initialized.",params:{params:"The params necessary to mint a position, encoded as `MintParams` in calldata"},returns:{amount0:"The amount of token0",amount1:"The amount of token1",liquidity:"The amount of liquidity for this position",tokenId:"The ID of the token that represents the minted position"},notice:"Creates a new position wrapped in a NFT"},"name()":{inputs:[],name:"name",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the token collection name."},"ownerOf(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"ownerOf",outputs:[{internalType:"address",name:"owner",type:"address"}],stateMutability:"view",type:"function",details:"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"permit(address,uint256,uint256,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"spender",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"permit",outputs:[],stateMutability:"payable",type:"function",params:{deadline:"The deadline timestamp by which the call must be mined for the approve to work",r:"Must produce valid secp256k1 signature from the holder along with `v` and `s`",s:"Must produce valid secp256k1 signature from the holder along with `r` and `v`",spender:"The account that is being approved",tokenId:"The ID of the token that is being approved for spending",v:"Must produce valid secp256k1 signature from the holder along with `r` and `s`"},notice:"Approve of a specific token ID for spending by spender via signature"},"positions(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"positions",outputs:[{internalType:"uint96",name:"nonce",type:"uint96"},{internalType:"address",name:"operator",type:"address"},{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"uint128",name:"liquidity",type:"uint128"},{internalType:"uint256",name:"feeGrowthInside0LastX128",type:"uint256"},{internalType:"uint256",name:"feeGrowthInside1LastX128",type:"uint256"},{internalType:"uint128",name:"tokensOwed0",type:"uint128"},{internalType:"uint128",name:"tokensOwed1",type:"uint128"}],stateMutability:"view",type:"function",details:"Throws if the token ID is not valid.",params:{tokenId:"The ID of the token that represents the position"},returns:{fee:"The fee associated with the pool",feeGrowthInside0LastX128:"The fee growth of token0 as of the last action on the individual position",feeGrowthInside1LastX128:"The fee growth of token1 as of the last action on the individual position",liquidity:"The liquidity of the position",nonce:"The nonce for permits",operator:"The address that is approved for spending",tickLower:"The lower end of the tick range for the position",tickUpper:"The higher end of the tick range for the position",token0:"The address of the token0 for a specific pool",token1:"The address of the token1 for a specific pool",tokensOwed0:"The uncollected amount of token0 owed to the position as of the last computation",tokensOwed1:"The uncollected amount of token1 owed to the position as of the last computation"},notice:"Returns the position information associated with a given token ID."},"refundETH()":{inputs:[],name:"refundETH",outputs:[],stateMutability:"payable",type:"function",details:"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount",notice:"Refunds any ETH balance held by this contract to the `msg.sender`"},"safeTransferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"safeTransferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{inputs:[{internalType:"address",name:"operator",type:"address"},{internalType:"bool",name:"_approved",type:"bool"}],name:"setApprovalForAll",outputs:[],stateMutability:"nonpayable",type:"function",details:"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{inputs:[{internalType:"bytes4",name:"interfaceId",type:"bytes4"}],name:"supportsInterface",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function",details:"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"sweepToken(address,uint256,address)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountMinimum",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"payable",type:"function",details:"The amountMinimum parameter prevents malicious contracts from stealing the token from users",params:{amountMinimum:"The minimum amount of token required for a transfer",recipient:"The destination address of the token",token:"The contract address of the token which will be transferred to `recipient`"},notice:"Transfers the full amount of a token held by this contract to recipient"},"symbol()":{inputs:[],name:"symbol",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the token collection symbol."},"tokenByIndex(uint256)":{inputs:[{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns a token ID at a given `index` of all the tokens stored by the contract. Use along with {totalSupply} to enumerate all tokens."},"tokenOfOwnerByIndex(address,uint256)":{inputs:[{internalType:"address",name:"owner",type:"address"},{internalType:"uint256",name:"index",type:"uint256"}],name:"tokenOfOwnerByIndex",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns a token ID owned by `owner` at a given `index` of its token list. Use along with {balanceOf} to enumerate all of ``owner``'s tokens."},"tokenURI(uint256)":{inputs:[{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"tokenURI",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function",details:"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"totalSupply()":{inputs:[],name:"totalSupply",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Returns the total amount of tokens stored by the contract."},"transferFrom(address,address,uint256)":{inputs:[{internalType:"address",name:"from",type:"address"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"tokenId",type:"uint256"}],name:"transferFrom",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers `tokenId` token from `from` to `to`. WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."},"unwrapWETH9(uint256,address)":{inputs:[{internalType:"uint256",name:"amountMinimum",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"unwrapWETH9",outputs:[],stateMutability:"payable",type:"function",details:"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",params:{amountMinimum:"The minimum amount of WETH9 to unwrap",recipient:"The address receiving ETH"},notice:"Unwraps the contract's WETH9 balance and sends it to recipient as ETH."}}},"contracts/extensions/liquidity/features/univ3/lib/IPeripheryImmutableState.sol:IPeripheryImmutableState":{source:"contracts/extensions/liquidity/features/univ3/lib/IPeripheryImmutableState.sol",name:"IPeripheryImmutableState",title:"Immutable state",notice:"Functions that return immutable state of the router",methods:{"WETH9()":{inputs:[],name:"WETH9",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Returns the address of WETH9"}},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",returns:{_0:"Returns the address of the Uniswap V3 factory"}}}},"contracts/extensions/liquidity/features/univ3/lib/IPeripheryPayments.sol:IPeripheryPayments":{source:"contracts/extensions/liquidity/features/univ3/lib/IPeripheryPayments.sol",name:"IPeripheryPayments",title:"Periphery Payments",notice:"Functions to ease deposits and withdrawals of ETH",methods:{"refundETH()":{inputs:[],name:"refundETH",outputs:[],stateMutability:"payable",type:"function",details:"Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps that use ether for the input amount",notice:"Refunds any ETH balance held by this contract to the `msg.sender`"},"sweepToken(address,uint256,address)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountMinimum",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"payable",type:"function",details:"The amountMinimum parameter prevents malicious contracts from stealing the token from users",params:{amountMinimum:"The minimum amount of token required for a transfer",recipient:"The destination address of the token",token:"The contract address of the token which will be transferred to `recipient`"},notice:"Transfers the full amount of a token held by this contract to recipient"},"unwrapWETH9(uint256,address)":{inputs:[{internalType:"uint256",name:"amountMinimum",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],name:"unwrapWETH9",outputs:[],stateMutability:"payable",type:"function",details:"The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.",params:{amountMinimum:"The minimum amount of WETH9 to unwrap",recipient:"The address receiving ETH"},notice:"Unwraps the contract's WETH9 balance and sends it to recipient as ETH."}}},"contracts/extensions/liquidity/features/univ3/lib/IPoolInitializer.sol:IPoolInitializer":{source:"contracts/extensions/liquidity/features/univ3/lib/IPoolInitializer.sol",name:"IPoolInitializer",title:"Creates and initializes V3 Pools",notice:"Provides a method for creating and initializing a pool, if necessary, for bundling with other methods that require the pool to exist.",methods:{"createAndInitializePoolIfNecessary(address,address,uint24,uint160)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"uint160",name:"sqrtPriceX96",type:"uint160"}],name:"createAndInitializePoolIfNecessary",outputs:[{internalType:"address",name:"pool",type:"address"}],stateMutability:"payable",type:"function",details:"This method can be bundled with others via IMulticall for the first action   (e.g. mint) performed against a pool",params:{fee:"The fee amount of the v3 pool for the specified token pair",sqrtPriceX96:"The initial square root price of the pool as a Q64.96 value",token0:"The contract address of token0 of the pool",token1:"The contract address of token1 of the pool"},returns:{pool:"Returns the pool address based on the pair of tokens and fee, will return the  newly created pool address if necessary"},notice:"Creates a new pool if it does not exist, then initializes if not initialized"}}},"contracts/extensions/pools/ApeSwapZapPools.sol:ApeSwapZapPools":{source:"contracts/extensions/pools/ApeSwapZapPools.sol",name:"ApeSwapZapPools",events:{"ZapPool((uint256,address,address))":{anonymous:!1,inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"},{internalType:"address",name:"recipient",type:"address"}],indexed:!1,internalType:"struct ApeSwapZapPools.ZapPoolParams",name:"params",type:"tuple"}],name:"ZapPool",type:"event"}},methods:{"BANANA()":{inputs:[],name:"BANANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA()":{inputs:[],name:"GNANA",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"GNANA_TREASURY()":{inputs:[],name:"GNANA_TREASURY",outputs:[{internalType:"contract ITreasury",name:"",type:"address"}],stateMutability:"view",type:"function"},"zapPool((uint256,address,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IBEP20RewardApeV5",name:"pool",type:"address"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapPools.ZapPoolParams",name:"params",type:"tuple"}],name:"zapPool",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/extensions/pools/libraries/BEP20RewardApeV5.sol:BEP20RewardApeV5":{source:"contracts/extensions/pools/libraries/BEP20RewardApeV5.sol",name:"BEP20RewardApeV5",events:{"Deposit(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"sender",type:"address"},{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Deposit",type:"event"},"DepositRewards(uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"DepositRewards",type:"event"},"EmergencyRewardWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyRewardWithdraw",type:"event"},"EmergencySweepWithdraw(address,address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!0,internalType:"contract IERC20",name:"token",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencySweepWithdraw",type:"event"},"EmergencyWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},"Initialized(uint8)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint8",name:"version",type:"uint8"}],name:"Initialized",type:"event"},"LogUpdatePool(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"bonusEndBlock",type:"uint256"},{indexed:!1,internalType:"uint256",name:"rewardPerBlock",type:"uint256"}],name:"LogUpdatePool",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"SkimStakeTokenFees(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"SkimStakeTokenFees",type:"event"},"Withdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Withdraw",type:"event"}},methods:{"REWARD_TOKEN()":{inputs:[],name:"REWARD_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"STAKE_TOKEN()":{inputs:[],name:"STAKE_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bonusEndBlock()":{inputs:[],name:"bonusEndBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function",details:"Since this contract needs to be supplied with rewards we are  sending the balance of the contract if the pending rewards are higher",params:{_amount:"The amount of staking tokens to deposit"},notice:"Deposit staking token into the contract to earn rewards."},"depositRewards(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyRewardWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyRewardWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyWithdraw()":{inputs:[],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"getMultiplier(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getStakeTokenFeeBalance()":{inputs:[],name:"getStakeTokenFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the stake token fees (if any) earned by reflect token",notice:"If STAKE_TOKEN == REWARD_TOKEN there are no fees to skim"},"getUnharvestedRewards()":{inputs:[],name:"getUnharvestedRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"wei balance of rewards left to be paid"},notice:"Get the balance of rewards that have not been harvested"},"initialize(address,address,uint256,uint256,uint256)":{inputs:[{internalType:"contract IERC20",name:"_stakeToken",type:"address"},{internalType:"contract IERC20",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolInfo()":{inputs:[],name:"poolInfo",outputs:[{internalType:"contract IERC20",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accRewardTokenPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"rewardBalance()":{inputs:[],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",returns:{_0:"wei balace of conract"},notice:"Obtain the reward balance of this contract"},"rewardPerBlock()":{inputs:[],name:"rewardPerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setBonusEndBlock(uint256)":{inputs:[{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"setBonusEndBlock",outputs:[],stateMutability:"nonpayable",type:"function",params:{_bonusEndBlock:"The block when rewards will end"}},"setRewardPerBlock(uint256)":{inputs:[{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"}],name:"setRewardPerBlock",outputs:[],stateMutability:"nonpayable",type:"function",params:{_rewardPerBlock:"The amount of reward tokens to be given per block"}},"skimStakeTokenFees(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"skimStakeTokenFees",outputs:[],stateMutability:"nonpayable",type:"function",details:"Remove excess stake tokens earned by reflect fees"},"startBlock()":{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"sweepToken(address)":{inputs:[{internalType:"contract IERC20",name:"token",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"nonpayable",type:"function",params:{token:"The address of the BEP20 token to sweep"},notice:"A public function to sweep accidental BEP20 transfers to this contract.   Tokens are sent to owner"},"totalRewardsAllocated()":{inputs:[],name:"totalRewardsAllocated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalRewardsPaid()":{inputs:[],name:"totalRewardsPaid",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStakeTokenBalance()":{inputs:[],name:"totalStakeTokenBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the stake balance of this contract"},"totalStaked()":{inputs:[],name:"totalStaked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function",params:{_amount:"The amount of staking tokens to withdraw"},notice:"Withdraw rewards and/or staked tokens. Pass a 0 amount to withdraw only rewards"}}},"contracts/extensions/pools/libraries/IBEP20RewardApeV5.sol:IBEP20RewardApeV5":{source:"contracts/extensions/pools/libraries/IBEP20RewardApeV5.sol",name:"IBEP20RewardApeV5",methods:{"REWARD_TOKEN()":{inputs:[],name:"REWARD_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"STAKE_TOKEN()":{inputs:[],name:"STAKE_TOKEN",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bonusEndBlock()":{inputs:[],name:"bonusEndBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"deposit(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositRewards(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"depositRewards",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyRewardWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyRewardWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"emergencyWithdraw()":{inputs:[],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"getMultiplier(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_from",type:"uint256"},{internalType:"uint256",name:"_to",type:"uint256"}],name:"getMultiplier",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getStakeTokenFeeBalance()":{inputs:[],name:"getStakeTokenFeeBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"getUnharvestedRewards()":{inputs:[],name:"getUnharvestedRewards",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"initialize(address,address,uint256,uint256,uint256)":{inputs:[{internalType:"address",name:"_stakeToken",type:"address"},{internalType:"address",name:"_rewardToken",type:"address"},{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"},{internalType:"uint256",name:"_startBlock",type:"uint256"},{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"initialize",outputs:[],stateMutability:"nonpayable",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"pendingReward(address)":{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"pendingReward",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"poolInfo()":{inputs:[],name:"poolInfo",outputs:[{internalType:"address",name:"lpToken",type:"address"},{internalType:"uint256",name:"allocPoint",type:"uint256"},{internalType:"uint256",name:"lastRewardBlock",type:"uint256"},{internalType:"uint256",name:"accRewardTokenPerShare",type:"uint256"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"rewardBalance()":{inputs:[],name:"rewardBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"rewardPerBlock()":{inputs:[],name:"rewardPerBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"setBonusEndBlock(uint256)":{inputs:[{internalType:"uint256",name:"_bonusEndBlock",type:"uint256"}],name:"setBonusEndBlock",outputs:[],stateMutability:"nonpayable",type:"function"},"setRewardPerBlock(uint256)":{inputs:[{internalType:"uint256",name:"_rewardPerBlock",type:"uint256"}],name:"setRewardPerBlock",outputs:[],stateMutability:"nonpayable",type:"function"},"skimStakeTokenFees(address)":{inputs:[{internalType:"address",name:"_to",type:"address"}],name:"skimStakeTokenFees",outputs:[],stateMutability:"nonpayable",type:"function"},"startBlock()":{inputs:[],name:"startBlock",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"sweepToken(address)":{inputs:[{internalType:"address",name:"token",type:"address"}],name:"sweepToken",outputs:[],stateMutability:"nonpayable",type:"function"},"totalRewardsAllocated()":{inputs:[],name:"totalRewardsAllocated",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalRewardsPaid()":{inputs:[],name:"totalRewardsPaid",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStakeTokenBalance()":{inputs:[],name:"totalStakeTokenBalance",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"totalStaked()":{inputs:[],name:"totalStaked",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"updatePool()":{inputs:[],name:"updatePool",outputs:[],stateMutability:"nonpayable",type:"function"},"userInfo(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"amount",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/pools/libraries/ITreasury.sol:ITreasury":{source:"contracts/extensions/pools/libraries/ITreasury.sol",name:"ITreasury",methods:{"adminAddress()":{inputs:[],name:"adminAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"banana()":{inputs:[],name:"banana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bananaReserves()":{inputs:[],name:"bananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"buy(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"buy",outputs:[],stateMutability:"nonpayable",type:"function"},"buyFee()":{inputs:[],name:"buyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"emergencyWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"goldenBanana()":{inputs:[],name:"goldenBanana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"goldenBananaReserves()":{inputs:[],name:"goldenBananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"maxBuyFee()":{inputs:[],name:"maxBuyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function"},"sell(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"sell",outputs:[],stateMutability:"nonpayable",type:"function"},"setAdmin(address)":{inputs:[{internalType:"address",name:"_adminAddress",type:"address"}],name:"setAdmin",outputs:[],stateMutability:"nonpayable",type:"function"},"setBuyFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setBuyFee",outputs:[],stateMutability:"nonpayable",type:"function"},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/pools/libraries/Treasury.sol:Treasury":{source:"contracts/extensions/pools/libraries/Treasury.sol",name:"Treasury",notice:"The Treasury contract holds GoldenBanana that can be bought with BANANA and later  be redeemed for BANANA. To buy a GoldenBanana, a portion of the BANANA used will be burned in the process,  while the remaining BANANA will be locked in the contract to be unlocked at any  future time.",constructor:{inputs:[{internalType:"contract IERC20",name:"_banana",type:"address"},{internalType:"contract IERC20",name:"_goldenBanana",type:"address"}],stateMutability:"nonpayable",type:"constructor"},events:{"AdminTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousAdmin",type:"address"},{indexed:!0,internalType:"address",name:"newAdmin",type:"address"}],name:"AdminTransferred",type:"event"},"Buy(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Buy",type:"event"},"EmergencyWithdraw(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"receiver",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"EmergencyWithdraw",type:"event"},"OwnershipTransferred(address,address)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"previousOwner",type:"address"},{indexed:!0,internalType:"address",name:"newOwner",type:"address"}],name:"OwnershipTransferred",type:"event"},"Sell(address,uint256)":{anonymous:!1,inputs:[{indexed:!0,internalType:"address",name:"user",type:"address"},{indexed:!1,internalType:"uint256",name:"amount",type:"uint256"}],name:"Sell",type:"event"},"UpdateBuyFee(uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"uint256",name:"previousBuyFee",type:"uint256"},{indexed:!1,internalType:"uint256",name:"newBuyFee",type:"uint256"}],name:"UpdateBuyFee",type:"event"}},methods:{"adminAddress()":{inputs:[],name:"adminAddress",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"banana()":{inputs:[],name:"banana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"bananaReserves()":{inputs:[],name:"bananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the amount of Banana held by this contract"},"buy(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"buy",outputs:[],stateMutability:"nonpayable",type:"function",details:"Buy Golden Banana with Banana. A potion of the Banana will be burned in the process.",params:{_amount:"Amount of Golden Banana to sell"}},"buyFee()":{inputs:[],name:"buyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"emergencyWithdraw(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"emergencyWithdraw",outputs:[],stateMutability:"nonpayable",type:"function",details:"Incase of a problem with the treasury contract, the Golden Banana can be removed  and sent to a new treasury contract"},"goldenBanana()":{inputs:[],name:"goldenBanana",outputs:[{internalType:"contract IERC20",name:"",type:"address"}],stateMutability:"view",type:"function"},"goldenBananaReserves()":{inputs:[],name:"goldenBananaReserves",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function",details:"Obtain the amount of Golden Banana held by this contract"},"maxBuyFee()":{inputs:[],name:"maxBuyFee",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"owner()":{inputs:[],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function",details:"Returns the address of the current owner."},"renounceOwnership()":{inputs:[],name:"renounceOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"sell(uint256)":{inputs:[{internalType:"uint256",name:"_amount",type:"uint256"}],name:"sell",outputs:[],stateMutability:"nonpayable",type:"function",details:"Sell Golden Banana to redeem for Banana",params:{_amount:"Amount of Golden Banana to sell"}},"setAdmin(address)":{inputs:[{internalType:"address",name:"_adminAddress",type:"address"}],name:"setAdmin",outputs:[],stateMutability:"nonpayable",type:"function",details:"Use the owner address to update the admin"},"setBuyFee(uint256)":{inputs:[{internalType:"uint256",name:"_fee",type:"uint256"}],name:"setBuyFee",outputs:[],stateMutability:"nonpayable",type:"function",details:"Set the fee that will be used to burn Banana on purchases",params:{_fee:"The fee used for burning. 10000 = 100%"}},"transferOwnership(address)":{inputs:[{internalType:"address",name:"newOwner",type:"address"}],name:"transferOwnership",outputs:[],stateMutability:"nonpayable",type:"function",details:"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}}},"contracts/extensions/swap/ZapSwap.sol:ZapSwap":{source:"contracts/extensions/swap/ZapSwap.sol",name:"ZapSwap",events:{"Swap((address,uint256,uint8,address,bytes[],address,uint256))":{anonymous:!1,inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"enum ZapSwap.SwapType2",name:"swapType",type:"uint8"},{internalType:"address",name:"caller",type:"address"},{internalType:"bytes[]",name:"swapData",type:"bytes[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],indexed:!1,internalType:"struct ZapSwap.SwapParams",name:"params",type:"tuple"}],name:"Swap",type:"event"}},methods:{"swap((address,uint256,uint8,address,bytes[],address,uint256))":{inputs:[{components:[{internalType:"contract IERC20",name:"inputToken",type:"address"},{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"enum ZapSwap.SwapType2",name:"swapType",type:"uint8"},{internalType:"address",name:"caller",type:"address"},{internalType:"bytes[]",name:"swapData",type:"bytes[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],internalType:"struct ZapSwap.SwapParams",name:"params",type:"tuple"}],name:"swap",outputs:[],stateMutability:"payable",type:"function",params:{params:"all parameters for zap"},notice:"Zap single token to LP"}}},"contracts/extensions/swap/features/apeswap-ms-router/lib/IApeSwapMultiSwapRouter.sol:IApeSwapMultiSwapRouter":{source:"contracts/extensions/swap/features/apeswap-ms-router/lib/IApeSwapMultiSwapRouter.sol",name:"IApeSwapMultiSwapRouter",title:"Uniswap V2 and V3 Swap Router",methods:{"addLiquidity(address,address,address,uint256,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"exactInput((address,bytes,address,uint256,uint256))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"bytes",name:"path",type:"bytes"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMinimum",type:"uint256"}],internalType:"struct IV3SwapRouter.ExactInputParams",name:"params",type:"tuple"}],name:"exactInput",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{params:"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,address,uint24,address,uint256,uint256,uint160))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMinimum",type:"uint256"},{internalType:"uint160",name:"sqrtPriceLimitX96",type:"uint160"}],internalType:"struct IV3SwapRouter.ExactInputSingleParams",name:"params",type:"tuple"}],name:"exactInputSingle",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{params:"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((address,bytes,address,uint256,uint256))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"bytes",name:"path",type:"bytes"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMaximum",type:"uint256"}],internalType:"struct IV3SwapRouter.ExactOutputParams",name:"params",type:"tuple"}],name:"exactOutput",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},returns:{amountIn:"The amount of the input token"},notice:"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."},"exactOutputSingle((address,address,address,uint24,address,uint256,uint256,uint160))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMaximum",type:"uint256"},{internalType:"uint160",name:"sqrtPriceLimitX96",type:"uint160"}],internalType:"struct IV3SwapRouter.ExactOutputSingleParams",name:"params",type:"tuple"}],name:"exactOutputSingle",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},returns:{amountIn:"The amount of the input token"},notice:"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."},"multicall(bytes[])":{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function"},"swapExactTokensForTokens(address,uint256,uint256,address[],address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{amountIn:"The amount of token to swap",amountOutMin:"The minimum amount of output that must be received",path:"The ordered list of tokens to swap through",to:"The recipient address"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another token"},"swapTokensForExactTokens(address,uint256,uint256,address[],address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{amountInMax:"The maximum amount of input that the caller will pay",amountOut:"The amount of token to swap for",path:"The ordered list of tokens to swap through",to:"The recipient address"},returns:{amountIn:"The amount of token to pay"},notice:"Swaps as little as possible of one token for an exact amount of another token"},"uniswapV3SwapCallback(int256,int256,bytes)":{inputs:[{internalType:"int256",name:"amount0Delta",type:"int256"},{internalType:"int256",name:"amount1Delta",type:"int256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"uniswapV3SwapCallback",outputs:[],stateMutability:"nonpayable",type:"function",details:"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",params:{amount0Delta:"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",amount1Delta:"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",data:"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},notice:"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."},"wrapETH(uint256)":{inputs:[{internalType:"uint256",name:"value",type:"uint256"}],name:"wrapETH",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter.sol:IV2SwapRouter":{source:"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter.sol",name:"IV2SwapRouter",title:"Router token swapping functionality",notice:"Functions for swapping tokens via Uniswap V2",methods:{"addLiquidity(address,address,address,uint256,uint256,uint256,uint256,address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"address",name:"tokenA",type:"address"},{internalType:"address",name:"tokenB",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(address,uint256,uint256,address[],address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{amountIn:"The amount of token to swap",amountOutMin:"The minimum amount of output that must be received",path:"The ordered list of tokens to swap through",to:"The recipient address"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another token"},"swapTokensForExactTokens(address,uint256,uint256,address[],address)":{inputs:[{internalType:"contract IV2SwapRouter02",name:"router",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{amountInMax:"The maximum amount of input that the caller will pay",amountOut:"The amount of token to swap for",path:"The ordered list of tokens to swap through",to:"The recipient address"},returns:{amountIn:"The amount of token to pay"},notice:"Swaps as little as possible of one token for an exact amount of another token"}}},"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter01.sol:IV2SwapRouter01":{source:"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter01.sol",name:"IV2SwapRouter01",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter02.sol:IV2SwapRouter02":{source:"contracts/extensions/swap/features/univ2/lib/IV2SwapRouter02.sol",name:"IV2SwapRouter02",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/swap/features/univ3/UniV3SwapHelper.sol:UniV3SwapHelper":{source:"contracts/extensions/swap/features/univ3/UniV3SwapHelper.sol",name:"UniV3SwapHelper"},"contracts/extensions/swap/features/univ3/lib/IV3SwapRouter.sol:IV3SwapRouter":{source:"contracts/extensions/swap/features/univ3/lib/IV3SwapRouter.sol",name:"IV3SwapRouter",title:"Router token swapping functionality",notice:"Functions for swapping tokens via Uniswap V3",methods:{"exactInput((address,bytes,address,uint256,uint256))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"bytes",name:"path",type:"bytes"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMinimum",type:"uint256"}],internalType:"struct IV3SwapRouter.ExactInputParams",name:"params",type:"tuple"}],name:"exactInput",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{params:"The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another along the specified path"},"exactInputSingle((address,address,address,uint24,address,uint256,uint256,uint160))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMinimum",type:"uint256"},{internalType:"uint160",name:"sqrtPriceLimitX96",type:"uint160"}],internalType:"struct IV3SwapRouter.ExactInputSingleParams",name:"params",type:"tuple"}],name:"exactInputSingle",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"payable",type:"function",details:"Setting `amountIn` to 0 will cause the contract to look up its own balance, and swap the entire amount, enabling contracts to send tokens before calling this function.",params:{params:"The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata"},returns:{amountOut:"The amount of the received token"},notice:"Swaps `amountIn` of one token for as much as possible of another token"},"exactOutput((address,bytes,address,uint256,uint256))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"bytes",name:"path",type:"bytes"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMaximum",type:"uint256"}],internalType:"struct IV3SwapRouter.ExactOutputParams",name:"params",type:"tuple"}],name:"exactOutput",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata"},returns:{amountIn:"The amount of the input token"},notice:"Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed) that may remain in the router after the swap."},"exactOutputSingle((address,address,address,uint24,address,uint256,uint256,uint160))":{inputs:[{components:[{internalType:"address",name:"factory",type:"address"},{internalType:"address",name:"tokenIn",type:"address"},{internalType:"address",name:"tokenOut",type:"address"},{internalType:"uint24",name:"fee",type:"uint24"},{internalType:"address",name:"recipient",type:"address"},{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMaximum",type:"uint256"},{internalType:"uint160",name:"sqrtPriceLimitX96",type:"uint160"}],internalType:"struct IV3SwapRouter.ExactOutputSingleParams",name:"params",type:"tuple"}],name:"exactOutputSingle",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"payable",type:"function",params:{params:"The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata"},returns:{amountIn:"The amount of the input token"},notice:"Swaps as little as possible of one token for `amountOut` of another token that may remain in the router after the swap."},"uniswapV3SwapCallback(int256,int256,bytes)":{inputs:[{internalType:"int256",name:"amount0Delta",type:"int256"},{internalType:"int256",name:"amount1Delta",type:"int256"},{internalType:"bytes",name:"data",type:"bytes"}],name:"uniswapV3SwapCallback",outputs:[],stateMutability:"nonpayable",type:"function",details:"In the implementation you must pay the pool tokens owed for the swap. The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory. amount0Delta and amount1Delta can both be 0 if no tokens were swapped.",params:{amount0Delta:"The amount of token0 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token0 to the pool.",amount1Delta:"The amount of token1 that was sent (negative) or must be received (positive) by the pool by the end of the swap. If positive, the callback must send that amount of token1 to the pool.",data:"Any data passed through by the caller via the IUniswapV3PoolActions#swap call"},notice:"Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap."}}},"contracts/extensions/vaults/ApeSwapZapVaults.sol:ApeSwapZapVaults":{source:"contracts/extensions/vaults/ApeSwapZapVaults.sol",name:"ApeSwapZapVaults",events:{"ZapVault(address,uint256,uint256)":{anonymous:!1,inputs:[{indexed:!1,internalType:"contract IERC20",name:"inputToken",type:"address"},{indexed:!1,internalType:"uint256",name:"inputAmount",type:"uint256"},{indexed:!1,internalType:"uint256",name:"vaultPid",type:"uint256"}],name:"ZapVault",type:"event"}},methods:{"zapVault((uint256,address,uint256,address))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{internalType:"contract IMaximizerVaultApe",name:"maximizerVaultApe",type:"address"},{internalType:"uint256",name:"vaultPid",type:"uint256"},{internalType:"address",name:"recipient",type:"address"}],internalType:"struct ApeSwapZapVaults.zapVaultParams",name:"params",type:"tuple"}],name:"zapVault",outputs:[],stateMutability:"payable",type:"function"}}},"contracts/extensions/vaults/libraries/IBaseBananaMaximizerStrategy.sol:IBaseBananaMaximizerStrategy":{source:"contracts/extensions/vaults/libraries/IBaseBananaMaximizerStrategy.sol",name:"IBaseBananaMaximizerStrategy",methods:{"STAKE_TOKEN_ADDRESS()":{inputs:[],name:"STAKE_TOKEN_ADDRESS",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"nonpayable",type:"function"}}},"contracts/extensions/vaults/libraries/IMaximizerVaultApe.sol:IMaximizerVaultApe":{source:"contracts/extensions/vaults/libraries/IMaximizerVaultApe.sol",name:"IMaximizerVaultApe",methods:{"BUYBACK_RATE_UL()":{inputs:[],name:"BUYBACK_RATE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"KEEPER_FEE_UL()":{inputs:[],name:"KEEPER_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"PLATFORM_FEE_UL()":{inputs:[],name:"PLATFORM_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_FEE_PERIOD_UL()":{inputs:[],name:"WITHDRAW_FEE_PERIOD_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_FEE_UL()":{inputs:[],name:"WITHDRAW_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"WITHDRAW_REWARDS_FEE_UL()":{inputs:[],name:"WITHDRAW_REWARDS_FEE_UL",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"addVault(address)":{inputs:[{internalType:"address",name:"_strat",type:"address"}],name:"addVault",outputs:[],stateMutability:"nonpayable",type:"function"},"deposit(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"deposit",outputs:[],stateMutability:"nonpayable",type:"function"},"depositTo(uint256,address,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_to",type:"address"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"depositTo",outputs:[],stateMutability:"nonpayable",type:"function"},"earnAll()":{inputs:[],name:"earnAll",outputs:[],stateMutability:"nonpayable",type:"function"},"earnSome(uint256[])":{inputs:[{internalType:"uint256[]",name:"pids",type:"uint256[]"}],name:"earnSome",outputs:[],stateMutability:"nonpayable",type:"function"},"getSettings()":{inputs:[],name:"getSettings",outputs:[{components:[{internalType:"address",name:"treasury",type:"address"},{internalType:"uint256",name:"keeperFee",type:"uint256"},{internalType:"address",name:"platform",type:"address"},{internalType:"uint256",name:"platformFee",type:"uint256"},{internalType:"uint256",name:"buyBackRate",type:"uint256"},{internalType:"uint256",name:"withdrawFee",type:"uint256"},{internalType:"uint256",name:"withdrawFeePeriod",type:"uint256"},{internalType:"uint256",name:"withdrawRewardsFee",type:"uint256"}],internalType:"struct IMaximizerVaultApe.Settings",name:"",type:"tuple"}],stateMutability:"view",type:"function"},"harvest(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"harvest",outputs:[],stateMutability:"nonpayable",type:"function"},"harvestAll(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"harvestAll",outputs:[],stateMutability:"nonpayable",type:"function"},"stakedWantTokens(uint256,address)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"stakedWantTokens",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"userInfo(uint256,address)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"address",name:"_user",type:"address"}],name:"userInfo",outputs:[{internalType:"uint256",name:"stake",type:"uint256"},{internalType:"uint256",name:"autoBananaShares",type:"uint256"},{internalType:"uint256",name:"rewardDebt",type:"uint256"},{internalType:"uint256",name:"lastDepositedTime",type:"uint256"}],stateMutability:"view",type:"function"},"vaults(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"vaults",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"},"vaultsLength()":{inputs:[],name:"vaultsLength",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"view",type:"function"},"withdraw(uint256,uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"},{internalType:"uint256",name:"_wantAmt",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"},"withdrawAll(uint256)":{inputs:[{internalType:"uint256",name:"_pid",type:"uint256"}],name:"withdrawAll",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IApeRouter01.sol:IApeRouter01":{source:"contracts/interfaces/IApeRouter01.sol",name:"IApeRouter01",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IApeRouter02.sol:IApeRouter02":{source:"contracts/interfaces/IApeRouter02.sol",name:"IApeRouter02",methods:{"WETH()":{inputs:[],name:"WETH",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"amountADesired",type:"uint256"},{internalType:"uint256",name:"amountBDesired",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"amountTokenDesired",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"addLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"},{internalType:"uint256",name:"liquidity",type:"uint256"}],stateMutability:"payable",type:"function"},"factory()":{inputs:[],name:"factory",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"pure",type:"function"},"getAmountIn(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountIn",outputs:[{internalType:"uint256",name:"amountIn",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountOut(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"reserveIn",type:"uint256"},{internalType:"uint256",name:"reserveOut",type:"uint256"}],name:"getAmountOut",outputs:[{internalType:"uint256",name:"amountOut",type:"uint256"}],stateMutability:"pure",type:"function"},"getAmountsIn(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsIn",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"getAmountsOut(uint256,address[])":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"}],name:"getAmountsOut",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"view",type:"function"},"quote(uint256,uint256,uint256)":{inputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"reserveA",type:"uint256"},{internalType:"uint256",name:"reserveB",type:"uint256"}],name:"quote",outputs:[{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"pure",type:"function"},"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidity",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETH",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"removeLiquidityETHSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermit",outputs:[{internalType:"uint256",name:"amountToken",type:"uint256"},{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountTokenMin",type:"uint256"},{internalType:"uint256",name:"amountETHMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",outputs:[{internalType:"uint256",name:"amountETH",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)":{inputs:[{internalType:"address",name:"token0",type:"address"},{internalType:"address",name:"token1",type:"address"},{internalType:"uint256",name:"liquidity",type:"uint256"},{internalType:"uint256",name:"amountAMin",type:"uint256"},{internalType:"uint256",name:"amountBMin",type:"uint256"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"},{internalType:"bool",name:"approveMax",type:"bool"},{internalType:"uint8",name:"v",type:"uint8"},{internalType:"bytes32",name:"r",type:"bytes32"},{internalType:"bytes32",name:"s",type:"bytes32"}],name:"removeLiquidityWithPermit",outputs:[{internalType:"uint256",name:"amountA",type:"uint256"},{internalType:"uint256",name:"amountB",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"swapETHForExactTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapETHForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"payable",type:"function"},"swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactETHForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"payable",type:"function"},"swapExactTokensForETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForETHSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountIn",type:"uint256"},{internalType:"uint256",name:"amountOutMin",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapExactTokensForTokensSupportingFeeOnTransferTokens",outputs:[],stateMutability:"nonpayable",type:"function"},"swapTokensForExactETH(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactETH",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"},"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)":{inputs:[{internalType:"uint256",name:"amountOut",type:"uint256"},{internalType:"uint256",name:"amountInMax",type:"uint256"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"deadline",type:"uint256"}],name:"swapTokensForExactTokens",outputs:[{internalType:"uint256[]",name:"amounts",type:"uint256[]"}],stateMutability:"nonpayable",type:"function"}}},"contracts/interfaces/IMulticall.sol:IMulticall":{source:"contracts/interfaces/IMulticall.sol",name:"IMulticall",title:"Multicall interface",notice:"Enables calling multiple methods in a single call to the contract",methods:{"multicall(bytes[])":{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function",details:"The `msg.value` should not be trusted for any method callable from multicall.",params:{data:"The encoded function data for each of the calls to make to this contract"},returns:{results:"The results from each of the calls passed in via data"},notice:"Call multiple functions in the current contract and return the data from all of them if they all succeed"}}},"contracts/interfaces/IWETH.sol:IWETH":{source:"contracts/interfaces/IWETH.sol",name:"IWETH",methods:{"balanceOf(address)":{inputs:[{internalType:"address",name:"",type:"address"}],name:"balanceOf",outputs:[{internalType:"uint256",name:"",type:"uint256"}],stateMutability:"nonpayable",type:"function"},"deposit()":{inputs:[],name:"deposit",outputs:[],stateMutability:"payable",type:"function"},"transfer(address,uint256)":{inputs:[{internalType:"address",name:"to",type:"address"},{internalType:"uint256",name:"value",type:"uint256"}],name:"transfer",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"nonpayable",type:"function"},"withdraw(uint256)":{inputs:[{internalType:"uint256",name:"",type:"uint256"}],name:"withdraw",outputs:[],stateMutability:"nonpayable",type:"function"}}},"contracts/lens/IZapAnalyzer.sol:IZapAnalyzer":{source:"contracts/lens/IZapAnalyzer.sol",name:"IZapAnalyzer",methods:{"estimateSwapReturns((uint256,(address,uint8,address[],uint24[])[],(address,uint8,address[],uint24[])[],(address,uint8,uint24,int24,int24,address)))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath0",type:"tuple[]"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath1",type:"tuple[]"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IZapAnalyzer.LiquidityType",name:"liquidityType",type:"uint8"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IZapAnalyzer.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IZapAnalyzer.SwapReturnsParams",name:"params",type:"tuple"}],name:"estimateSwapReturns",outputs:[{components:[{internalType:"uint256",name:"swapToToken0",type:"uint256"},{internalType:"uint256",name:"swapToToken1",type:"uint256"},{internalType:"uint256",name:"minAmountSwap0",type:"uint256"},{internalType:"uint256",name:"minAmountSwap1",type:"uint256"}],internalType:"struct IZapAnalyzer.SwapReturns",name:"returnValues",type:"tuple"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"}}},"contracts/lens/ZapAnalyzer.sol:ZapAnalyzer":{source:"contracts/lens/ZapAnalyzer.sol",name:"ZapAnalyzer",methods:{"estimateSwapReturns((uint256,(address,uint8,address[],uint24[])[],(address,uint8,address[],uint24[])[],(address,uint8,uint24,int24,int24,address)))":{inputs:[{components:[{internalType:"uint256",name:"inputAmount",type:"uint256"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath0",type:"tuple[]"},{components:[{internalType:"address",name:"swapRouter",type:"address"},{internalType:"enum IZapAnalyzer.SwapType",name:"swapType",type:"uint8"},{internalType:"address[]",name:"path",type:"address[]"},{internalType:"uint24[]",name:"uniV3PoolFees",type:"uint24[]"}],internalType:"struct IZapAnalyzer.SwapPath[]",name:"swapPath1",type:"tuple[]"},{components:[{internalType:"address",name:"lpRouter",type:"address"},{internalType:"enum IZapAnalyzer.LiquidityType",name:"liquidityType",type:"uint8"},{internalType:"uint24",name:"uniV3PoolLPFee",type:"uint24"},{internalType:"int24",name:"tickLower",type:"int24"},{internalType:"int24",name:"tickUpper",type:"int24"},{internalType:"address",name:"arrakisFactory",type:"address"}],internalType:"struct IZapAnalyzer.LiquidityPath",name:"liquidityPath",type:"tuple"}],internalType:"struct IZapAnalyzer.SwapReturnsParams",name:"params",type:"tuple"}],name:"estimateSwapReturns",outputs:[{components:[{internalType:"uint256",name:"swapToToken0",type:"uint256"},{internalType:"uint256",name:"swapToToken1",type:"uint256"},{internalType:"uint256",name:"minAmountSwap0",type:"uint256"},{internalType:"uint256",name:"minAmountSwap1",type:"uint256"}],internalType:"struct IZapAnalyzer.SwapReturns",name:"returnValues",type:"tuple"}],stateMutability:"view",type:"function",params:{params:"all params"},notice:"get min amounts for swaps"}}},"contracts/libraries/Constants.sol:Constants":{source:"contracts/libraries/Constants.sol",name:"Constants",title:"Constant state",notice:"Constant state used by the swap router"},"contracts/utils/Multicall.sol:Multicall":{source:"contracts/utils/Multicall.sol",name:"Multicall",title:"Multicall",notice:"Enables calling multiple methods in a single call to the contract",methods:{"multicall(bytes[])":{inputs:[{internalType:"bytes[]",name:"data",type:"bytes[]"}],name:"multicall",outputs:[{internalType:"bytes[]",name:"results",type:"bytes[]"}],stateMutability:"payable",type:"function",details:"The `msg.value` should not be trusted for any method callable from multicall.",params:{data:"The encoded function data for each of the calls to make to this contract"},returns:{results:"The results from each of the calls passed in via data"},notice:"Call multiple functions in the current contract and return the data from all of them if they all succeed"}}},"contracts/utils/TokenHelper.sol:TokenHelper":{source:"contracts/utils/TokenHelper.sol",name:"TokenHelper"},"contracts/utils/TransferHelper.sol:TransferHelper":{source:"contracts/utils/TransferHelper.sol",name:"TransferHelper"}};new jn({el:"#app",router:new ko({routes:[{path:"/",component:$o,props:()=>({json:Do})},{path:"*",component:qo,props:e=>({json:Do[e.path.slice(1)]})}]}),mounted(){document.dispatchEvent(new Event("render-event"))},render:e=>e(Mo)})})()})();